;; More random crap

(make console
  (to ~.in in)
  (to ~.out out)
  (to (~ .mode name fn)
    (system/must-succeed ("stty ~d -echo" .format name))
    (unwind-protect
     fn
     ($ (system/must-succeed "stty sane")))))    ;TODO save & restore instead


;; Top level: listener and command line

(let the-last-oops (box<- #no))

(to (with-signal-handler handler thunk)
  (let parent-handler the-signal-handler.^)
  (the-signal-handler .^= (on (k evil)
                            (the-signal-handler .^= parent-handler)
                            (handler k evil)))
  (let result (thunk))
  (the-signal-handler .^= parent-handler)
  result)

(to (unwind-protect try finally) ;TODO better name; reconcile/integrate with ejectors
  (let parent-handler the-signal-handler.^)
  (the-signal-handler .^= (to (unwind-protector k evil)
                            (the-signal-handler .^= parent-handler)
                            (finally)
                            (parent-handler k evil)))
  (let result (try))
  (the-signal-handler .^= parent-handler)
  (finally)
  result)

(to (catch-oops thunk)
  (with-ejector (on (ejector)
                  (with-signal-handler (on (k evil) (k .eject-to ejector {oops evil}))
                                       thunk))))

(to (fallback-signal-handler k evil)
  ;; XXX for some reason, the panic handler doesn't seem to be set
  ;; when we're in here. So, for now let's just set it:
  (the-signal-handler .^= panic)
  ;; TODO set up one last fallback signal handler to progress from
  ;; trying to print the evil to trying to print the traceback, before
  ;; finally panicking.
  ;; N.B. cruder code and cruder output because we're trying to use
  ;; only primitives as far as possible:
  (out .display "Oops within oops! Evils:\n")
  (begin printing [(xs evil)]
    (unless xs.none?
      (out .write xs.first)
      (out .display #\newline)
      (printing xs.rest)))
  (out .display "\nTraceback in reverse (deepest frame first):\n")
  (begin printing [(frames k)]
    (unless frames.none?
      (out .display "  ")
      (out .write frames.first)
      (out .display "\n")
      (printing frames.rest)))
  (os-exit 1))

(to (start-playing @(optional command-line-args))
  (import ((use 'traceback) (export out))
    on-oops-traceback)

  (let parent-handler the-signal-handler.^)

  (to (script-handler k evil)
    (the-signal-handler .^= parent-handler)
    (the-last-oops .^= {oops k evil})
    (on-oops-traceback k evil))

  (let listener (listener<- main-interactive-setting script-handler))

  (may command-line-args
    (be #no (listener))
    (be '() (listener))
    (be `("-i" ,filename ,@_)
      (the-signal-handler .^= listener.signal-handler)
      (load-and-run filename command-line-args.rest)
      (listener))
    (be `(,filename ,@_)
      (the-signal-handler .^= script-handler)
      (load-and-run filename command-line-args))))

(to (load-and-run filename args)
  (load filename `(,filename)) ;TODO remove .cant extension
  (when (main-interactive-setting .binds? 'main)
    ((main-interactive-setting 'main) args)))

(to (listener<- setting signal-handler)

  (to (listener-handler k evil)
    (signal-handler k evil)
    (out .display "Enter ,d to debug.\n")
    (listener))

  ;; A separate function just to make the top of tracebacks cleaner.
  (to (print-result value)
    (unless (= value void)
      (when (= setting main-interactive-setting)  ;; TODO in a mutable setting, in general
        (setting .resolve! '$$ value))
      (out .print value))
    (listener))

  ;; Like print-result, except we treat value as void.
  (to (for-effect value)
    (listener))
  
  (make listener
    (to ~.signal-handler
      listener-handler)
    (to (~)
      (the-signal-handler .^= listener-handler)
      (out .display "-> ")
      (may (read in)
        (be (? zilch?) out.newline)
        (be ',d   (print-result (debug)))
        (be ',l   (print-result (load in.read-line.trim)))
        (be ',!   (for-effect (cant .play (read in) setting)))
        (be ',time (for-effect (timex (cant .play `($ ,(read in)) setting))))
        (be sexpr (print-result (cant .play sexpr setting)))))))

(to (debug)
  (import ((use 'debugger)
           (export out in extract-datum extract-script main-interactive-setting))
    inspect-sequel)
  (may the-last-oops.^
    (be {oops k evil}
      (inspect-sequel k))
    (else
      (out .display "No oops to debug.\n"))))

;; Commonly known as a "breakpoint", but I'd hate to type out such a long word.
(to (avast @values)
  (import ((use 'debugger)              ;TODO duped code
           (export out in extract-datum extract-script main-interactive-setting))
    inspect-sequel)
  (out .say "\nAvast ~w\n" values)
  (inspect-sequel
   (with-ejector (on (ejector)
                   (with-signal-handler
                    (on (k evil)
                      ;; Get the 'real' k, the parent of the inspect-sequel call above.
                      ;; XXX omg this is awful
                      (k .eject-to ejector k.rest.rest.rest.rest.rest.rest))
                    ($ (oops "Avast")))))))

;; Basic benchmark utility
(to (timex thunk)
  (let start (nano-now))
  (let result (thunk))
  (let seconds (/ (- (nano-now) start) 1000000000.0))
  (out .say "~w seconds. Result: ~w\n" seconds result))

(full-powered-setting .resolve-each! primordial-setting full-powered-setting-extra-names)

(import (use 'flexarray)  flexarray<- flexarray<-list)
(import (use 'sort)       sort sort-by)
(import (use 'bag)        bag<-)

(the-signal-handler .^= fallback-signal-handler)

(computational-setting .resolve-each! primordial-setting computational-setting-library-imports)
(full-powered-setting .resolve-each! primordial-setting computational-setting-library-imports)
