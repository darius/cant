(make-trait array-primitive me

  (to ~.none?         (= 0 me.count))   ;redundant definition(s) for speed
  (to (~ .set! i val) (__vector-set! me i val))
  (to ~.count         (__vector-length me))
  (to (~ i)           (__vector-ref me i))
  (to (~ .maps? i)    (__vector-maps? me i))
  (to (~ .chain v)    (__vector-append me v))
  (to ~.values        (__vector->list me))
  (to (~ .from i)     (__subvector me i me.count))
  (to (~ .from i j)   (__subvector me i j))

  (to (-- (~ .move! dst source lo bound)
          message)
    ;; Block-copy source[lo..bound) to me[dst..dst+(bound-lo)).
    (if (array? source)
        (__vector-move! me dst source lo bound)
        (array-trait me message)))

  (to ~.copy          (__vector-copy me))

  (to (~ .selfie sink)
    (sink .display "[")
    (when (< 0 me.count)
      (sink .write (me 0))
      (for each! [(x ((__vector->list me) .rest))]
        (sink .display #\space)
        (sink .write x)))
    (sink .display "]"))

  (to ~.first         (oops "no .first on array" me))
  (to ~.rest          (oops "no .rest on array" me))

  (to message
    (array-trait me message))) ;XXX use trait syntax instead
