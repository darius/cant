;; Generic map trait
;; requires:
;;  .get key default
;;  .count -- hm, we could impl as .items.count
;;  .items

;; TODO untested, unused yet
;; TODO mutable-map trait?
;;   that'd need: .clear! ...

;(make missing)
;; Problem: (map .get key missing) might save `missing` for later.
;; For now, we'll make a new `missing` every time, though that's
;; uglyish and kinda expensive.

(make-trait map-trait map

  (to (~ key)
    (make missing)
    (let answer (map .get key missing))
    (if (= answer missing)
        (oops "Missing key" map key)
        answer))

  (to (~ .get key)
    (map .get key #no))

  (to (~ .maps? key)
    (make missing)
    (not= (map .get key missing) missing))

  (to ~.none?  (= map.count 0))  ; or map.items.none? - is that better? depends.

  (to ~.some?  (not map.none?))

  (to ~.count  map.items.count)

  (to ~.keys   (each (~ .part 0) map.items))

  (to ~.values (each (~ .part 1) map.items))

  (to (~ .find? value)
    (map.values .find? value))

  (to (~ .find value default)
    (do searching [(items map.items)]
      (hm (if items.none? default)
          (may items.first
            (be (~ k (= value)) k))
          (else (searching items.rest)))))

  (to (~ .find value)
    (make missing)
    (let key (map .find value missing))
    (when (= key missing)
      (oops "Missing value" value))
    key)

  (to ~.copy ;TODO rename .diverge; check that all uses want a !map result
    (!map<-items map.items))

  (to (~ .intersects? map2)
    ;; TODO: maybe iterate over the one with smaller .count ?
    (for some [(k map.keys)]
      (map2 .maps? k)))

  (to (~ .disjoint? map2)                    ;too trivial?
    (not (map .intersects? map2)))

  (to (~ .subset-of? map2)  ;TODO be a stickler and make it a set method?
    (for every [(k map.keys)]
      (map2 .maps? k)))

  (to ~.domain
    (set<-list map.keys))   ;TODO usually worth specializing

  (to ~.range
    (set<-list map.values))

  (to ~.inverse
    (let inverse (!map<-))
    (for each! [((~ k v) map.items)]
      (when (inverse .maps? v)
        (oops ".inverse of noninvertible map" map))  ; or just allow it?
      (inverse .set! v k))
    inverse)

  (to ~.distinct? ;TODO better name? .invertible?
    (= map.count map.range.count))      ;TODO more efficient

  (to ~.list
    (each map map.count.till))

  (to ~.text
    (text<-list map.list))

  (to ~.array
    (array-by map map.count))

  (to ~.map
    (map<-items map.items.list))

  (to (~ .sample-key chaos)
    (map.keys .sample-value chaos))

  (to (~ .sample-value chaos)
    (map (map .sample-key chaos)))

  ;; Pick a random key, weighted by corresponding value.
  (to (~ .weighted-sample chaos)
    (do loop [(n     (chaos .sample-count (sum map.values)))
              (items map.items)]
      (let (~ key count) items.first)
      (if (< n count)
          key
          (loop (- n count) items.rest))))

  ;; Questionably worth including these:
  (to ~.one?    (= 1 map.count))
  (to ~.maybe?  (<= map.count 1))
  (to ~.plural? (< 1 map.count))
  (to ~.unique?   ;; Equiv to map.range.one? but presumably more efficient
    (let values map.values)
    (and values.some? (= @values.list)))
  (to (~ .unique? f)
    ((each f map.values) .unique?))
  (to ~.nub
    map.range.keys)  ;; TODO preserve order of map.keys
  
  ;; What's the right definition & interface for these for maps?
  ;; TODO also, rename to .or, .and ?
  (to (~ .union other)
    (oops "unimplemented .union"))
  (to (~ .intersect other)                 
    (oops "unimplemented .intersect"))
  (to (~ .difference other)
    (oops "unimplemented .difference"))

;;  (to (~ .compare xs)
;;  (to (~ .from keys)
  )
