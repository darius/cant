;; Definitions transitively used by 00-primordia and 01-sugar

;; XXX the following comments apply more to 00-primordia

;; This special source file must be written to load without actually
;; invoking any primitive object, because this code *defines* their
;; scripts. Only after this file is loaded will the definitions get
;; magically connected to the primitives.

;; That works out because the top level here is just definitions, with
;; no top-level actions.

;; There's also a definition of map<-, needed to implement (export ...).

;; Aaand this includes further definitions used by the above-needed
;; definitions, transitively.


(to (map<-lists lists)
  (map<-items (each tuple<-list lists)))

(to (tuple<-list xs)
  (term<- '~ (as-list xs)))



(to (yeah? x)
  (not (not x)))


(to (list<- @arguments)
  arguments)


;; Hash-maps

;; TODO:
;;   extend map-trait
;;   test deletion more
;;   nonlinear probing -- now quadratic, but how about xor probing?
;;   preserving insertion order
;;   immutable snapshots
;;
;;   impl without a million boxes
;;   N.B. impl needs shared closures for efficiency
;;        (capacity, occupants, ..., hashmap)
;;   special-case impls for small maps and common-typed maps
;;   store hash codes instead of recomputing?
;;   etc.

(let !map<-
  (hide

    (make none)
    (make deleted)

    (make !map<-

      (to (~)
        (let count (box<- 0))
        (let keys  (box<- [none]))  ;; size a power of 2
        (let vals  (box<- [#no]))   ;; same size

       ;; temp performance tracking
;;       (let n-places (box<- 0))
;;       (let n-probes (box<- 0))

        (to (capacity) keys.^.count)

        (to (occupants)
          (begin walking ((i (- (capacity) 1)))
            (hm (if (< i 0)       '())
                (do (let k (keys.^ i)))
                (if (= k none)    (walking i.-))
                (if (= k deleted) (walking i.-))
                (else             (link i (walking i.-))))))

        (to (place key)
          (__place key keys.^ none deleted))

        (to (maybe-grow)
          (when (< (* 2 (capacity))
                   (* 3 count.^))
            (resize (* 2 (capacity)))))

        (to (resize new-capacity)
;;         (out .print `(resize ,new-capacity places ,n-places.^ probes ,n-probes.^
;;                         average ,(~.inexact (/ n-probes.^ (max 1 n-places.^)))))
;;         (n-places .^= 0)
;;         (n-probes .^= 0)
          (let old-keys keys.^)
          (let old-vals vals.^)
          (keys .^= (array<-count new-capacity none))
          (vals .^= (array<-count new-capacity))
          (for each! (((~ i key) old-keys.items))
            (unless (or (= key none) (= key deleted))
              (let {missing-at j} (place key))
              (keys.^ .set! j key)
              (vals.^ .set! j (old-vals i)))))
       
        (make !map {extending map-trait}
          (to (~ key)
            (may (place key)
              (be {at i} (vals.^ i))
              (else      (oops "Missing key" !map key))))
          (to (~ .get key @(optional default))
            (may (place key)
              (be {at i} (vals.^ i))
              (else      default)))
          (to (~ .set! key val)
            (may (place key)
              (be {at i}
                (vals.^ .set! i val))
              (be {missing-at i}
                (keys.^ .set! i key)
                (vals.^ .set! i val)
                (count .^= count.^.+)
                (maybe-grow))))
          (to (~ .maps? key)
            (may (place key)
              (be {at _} #yes)
              (else      #no)))
          (to ~.none? (= count.^ 0))
          (to ~.count  count.^)
          (to ~.keys   (each keys.^ (occupants))) ;XXX lazy-map
          (to ~.values (each vals.^ (occupants)))
          (to ~.items
            (let ks keys.^)
            (let vs vals.^)
            (for each ((i (occupants)))
              (~ (ks i) (vs i))))
          (to (~ .get-set! key value<-)
            (may (place key)
              (be {at i}
                (vals.^ i))
              (be {missing-at _}
                (let value (value<-))
                ;; Alas, we can't just stick it in at i because (value<-)
                ;; might have changed things too:
                (!map .set! key value)
                value)))
          (to (~ .delete! key)
            (may (place key)
              (be {at i}
                (keys.^ .set! i deleted)
                (count .^= count.^.-)
                #no)
              (else #no)))   ;XXX oops instead? It is in Python.
          (to (~ .find value default)
            (let vs vals.^)
            (begin searching ((js (occupants)))  ;XXX should be lazy
              (hm (if js.none? default)
                  (if (= value (vs js.first)) (keys.^ js.first))
                  (else (searching js.rest)))))
          (to ~.clear!
            (count .^= 0)
            (keys .^= [none])
            (vals .^= [#no]))
          (to ~.copy
            (!map<-items !map.items))
          (to (~ .update key f)         ;TODO define in a mutable-map-trait ?
            (let value (f (!map key)))  ;TODO what about a (!map .get key) version? how to factor this?
            (!map .set! key value)
            value)
          (to (~ .selfie sink)
            (sink .display "#<!map (")
            (sink .write count.^)
            (sink .display ")>"))
          ))

      (to (~ @items)
;;        (!map<-items items))
        (let m (!map<-))
        (for each! (((~ k v) items))
          (m .set! k v))
        m)
      )))

(to (!map<-items items)
  (let m (!map<-))
  (for each! (((~ k v) items))
    (m .set! k v))
  m)

(to (!map<-lists lists)
  (let m (!map<-))
  (for each! ((`(,k ,v) lists))
    (m .set! k v))
  m)


;; Sets via hashtable
;; TODO unify with hashmaps

(to (set<- @vals)            ;XXX this name is better saved for frozen sets
  (let s (hash-set<-))
  (s .add-all! vals)
  s)

(to (set<-list vals)            ;XXX this name is better saved for frozen sets
  (let s (hash-set<-))
  (s .add-all! vals)
  s)

(to (hash-set<-)                        ;XXX shouldn't be a global
  (let !map (!map<-)) ;TODO would be nice to avoid storing all the #yes values
  (make set {extending map-trait}
    (to ~.none?            !map.none?)
    (to ~.count            !map.count)
    (to ~.keys             !map.keys)
    (to (~ .maps? key)     (!map .maps? key))
    (to ~.copy             (set<-list !map.keys)) ;TODO tune
    (to (~ .add! key)      (!map .set! key 1))    ;N.B. matching the bag type here
    (to (~ .add-all! vals) (for each! ((v vals)) (set .add! v)))
    (to (~ .union! other)  (set .add-all! other.keys))
    (to (~ .union other)
      (let result set.copy)
      (result .union! other)
      result)
    (to (~ .intersect other)                 ;TODO rename to .and, etc., I guess
      (let result (set<-))
      (for each! ((x !map.keys))
        (when (other .maps? x)
          (result .add! x)))
      result)
    (to (~ .difference other)
      (let result (set<-))
      (for each! ((x !map.keys))
        (unless (other .maps? x)
          (result .add! x)))
      result)
    (to (~ .except other)               ;TODO add to map-trait?
      (let result (set<-))
      (for each! ((x !map.keys))
        (unless (= other x)
          (result .add! x)))
      result)
    (to (~ .intersects? map2)
      (!map .intersects? map2))
    (to ~.clear!         !map.clear!)
    ;; TODO missing: (~ .get key default)
    (to (~ .get key)     (!map .get key))
    (to (~ key)          (!map .get key 0)) ;I'm not sure this is a good idea, but it's to match the bag type
    (to ~.items          !map.items)
    (to ~.values         !map.values)
    (to (~ .delete! key) (!map .delete! key))
    (to ~.total          !map.count)        ;like bags again
    ;; XXX fill in rest of set interface (just the map interface, I guess)
    (to (~ .selfie sink)
      (sink .display "#<set")
      (sink .write !map.keys)
      (sink .display ">"))
    ))


;; stdlib

(to (surely ok? @arguments)
  (unless ok?
    (oops @(if arguments.none? '("Assertion failed") arguments))))

(to (count? x)
  (and (integer? x) (<= 0 x)))

(to (not= x y)
  (not (= x y)))

(make-trait left-folding-operation operation
  (to (~ a b @arguments)
    (foldl operation (operation a b) arguments))
  (to (~ a) a))      ; Of course this no-op by default is overridable.

(make-trait right-folding-operation operation
  (to (~ @arguments)
    (foldr1 operation arguments)))

(make + {extending left-folding-operation}
  (to (~ a b) (a .+ b))
  (to (~) 0))

(make * {extending left-folding-operation}
  (to (~ a b) (a .* b))
  (to (~) 1))

(make - {extending left-folding-operation}
  (to (~ a b) (a .- b))
  (to (~ a) (0 .- a)))

(make-trait transitive-comparison compare?
  (to (~ x @xs)
    (begin comparing ((x0 x) (xs xs))
      (may xs
        (be `()           #yes)
        (be `(,x1 ,@rest) (and (compare? x0 x1)
                               (comparing x1 rest)))))))

(make <   {extending transitive-comparison} (to (~ a b)      (= (compare a b) -1)))
(make <=  {extending transitive-comparison} (to (~ a b) (not (= (compare a b)  1))))
(make <=> {extending transitive-comparison} (to (~ a b)      (= (compare a b)  0))) ; XXX better name?
(make >=  {extending transitive-comparison} (to (~ a b) (not (= (compare a b) -1))))
(make >   {extending transitive-comparison} (to (~ a b)      (= (compare a b)  1)))

(to (compare a b)
  (may (a .compare b)
    (be -1 -1)
    (be  0  0)
    (be +1 +1)
    (else  (oops "Incomparable" a b))))

;;XXX so should some of these be in list-trait?

(to (text<-list runes) (__string<-list (as-list runes)))


(make chain {extending right-folding-operation}
  (to (~ xs ys) (xs .chain ys))
  (to (~) '()))

;; Using the optional suffix is like (chain (reverse xs) suffix).
(to (reverse xs @(optional suffix))
  (for foldl ((result (or suffix '()))
              (x xs))
    (link x result)))

;; (foldl f z '(a b c)) = (f (f (f z 'a) 'b) 'c)
(to (foldl f z xs)           ; 'z' connoting zero from f's perspective
  (if xs.none?
      z
      (foldl f (f z xs.first) xs.rest)))

;; (foldr f '(a b c) z) = (f 'a (f 'b (f 'c z)))
(to (foldr f xs z) ;N.B. some other languages have a different argument order
  (if xs.none?
      z
      (f xs.first (foldr f xs.rest z))))

;; Like foldr but requiring xs to be nonempty.
;; (foldr1 f '(a b c)) = (f 'a (f 'b 'c))
(to (foldr1 f xs)
  (let tail xs.rest)
  (if tail.none?
      xs.first
      (f xs.first (foldr1 f tail))))

;; Like foldl but requiring xs to be nonempty.
;; (foldl1 f '(a b c)) = (f (f 'a 'b) 'c)
(to (foldl1 f xs)
  (begin folding ((L xs.first) (Rs xs.rest))
    (if Rs.none? L (folding (f L Rs.first) Rs.rest))))

;; (transpose '((a c e) (b d f)))   = '((a b) (c d) (e f)))
;; (transpose '((a b) (c d) (e f))) = '((a c e) (b d f))
;; TODO: name it (zip @rows) instead, like Python?
(to (transpose rows)
  (if (every ~.none? rows)   ; and make it (some ~.none? rows)?
      '()
      (link (each ~.first rows)
            (transpose (each ~.rest rows)))))

(make-trait zipped-list-transducer transducer
  (to (~ f @lists)
    (for transducer ((args (transpose lists)))
      (f @args)))
  (to message
    (miranda-trait transducer message)))

;; (each f '(a b c)) = (list<- (f 'a) (f 'b) (f 'c))
;; and similar for (each f xs ys zs) and so on
(make each {extending zipped-list-transducer}
  (to (~ f xs)
    (for foldr ((x xs) (results '()))
      (link (f x) results))))

;; Call (f x) for each x in xs, in order, for the sake of any side effects.
(make each! {extending zipped-list-transducer}
  (to (~ f xs)
    (unless xs.none?
      (f xs.first)
      (each! f xs.rest))))

;; (some pass? xs) = does pass? approve any x in xs?
;; More precisely, the first non-#no result of (pass? x) for x in xs,
;; or else #no. Check the xs in order, short-circuited.
(make some {extending zipped-list-transducer}
  (to (~ pass? xs)
    (and xs.some?
         (or (pass? xs.first)
             (some pass? xs.rest)))))

;; (every pass? xs) = does pass? approve each x in xs?
;; More precisely, (not (some (compose not pass?) xs)).
(make every {extending zipped-list-transducer}
  (to (~ pass? xs)
    (or xs.none?
        (and (pass? xs.first)
             (every pass? xs.rest)))))

;; TODO better as (link x (lazy-list<- thunk)) ?
(to (link/lazy x thunk)
  (make lazy-list {extending list-trait}
    (to ~.none? #no)
    (to ~.first x)
    (to ~.rest  (thunk))
    ;; XXX override parts of list-trait that need it for laziness
    ))

;; An interval represents a progression from a `first`, short of a
;; `limit`, successively by a `stride`.
;; TODO above comment is inaccurate on negative strides: then limit is inclusive. Is this just a bad design?
;; TODO methods like `k..infinity` or `k..-infinity by -3`
(make interval<-
  (to (~ first limit)
    (if (<= limit first)
        '()
        (make range {extending list-trait}
          (to ~.none? #no)
          (to ~.first first)
          (to ~.rest  (interval<- first.+ limit))
          (to ~.count (- limit first))
          (to (~ i)
            (if (not (integer? i))
                (oops "Key error" range i)
                (do (let j (+ first i))
                    (if (and (<= first j) (< j limit))
                        j
                        (oops "Out of range" range i)))))
          (to (~ .maps? i)
            (and (integer? i)
                 (do (let j (+ first i))
                     (and (<= first j) (< j limit)))))
          ;; TODO: .compare
          )))
  (to (~ limit)
    (interval<- 0 limit))
  (to (~ first limit stride)
    ;; TODO factor the code better
    (hm (if (< 0 stride)
            (if (<= limit first)
                '()
                (make range {extending list-trait}
                  (to ~.none? #no)
                  (to ~.first first)
                  (to ~.rest  (interval<- (+ first stride) limit stride))
                  (to (~ i)
                    (oops "TODO" range `(,i)))
                  (to (~ .maps? i)
                    (oops "TODO" range (~ .maps? i)))
                  )))
        (if (< stride 0)
            (if (< first limit)
                '()
                (make range {extending list-trait}
                  (to ~.none? #no)
                  (to ~.first first)
                  (to ~.rest  (interval<- (+ first stride) limit stride))
                  (to (~ i)
                    (oops "TODO" range `(,i)))
                  (to (~ .maps? i)
                    (oops "TODO" range (~ .maps? i)))
                  )))
        (else
          (oops "Zero stride" first limit stride)))))

;; A lazy sequence of key-value pairs.
(make enumerate
  (to (~ xs)
    (enumerate xs 0))
  (to (~ xs i)
    (if xs.none?
        '()
        (make enumeration {extending list-trait}
          (to ~.none? #no)
          (to ~.first (~ i xs.first))
          (to ~.rest  (enumerate xs.rest i.+))))))

(to (text<- @runes)
  (text<-list runes))

(to (text<-writer writer)
  (let sink (text-sink<-))
  (writer sink)
  sink.output-text)

;; Return focus after sending it to each of the actions.
;; Helpful for concisely creating-and-initializing an object, and such.
(to (hey focus @actions)                ;TODO better name 'also'?
  (each! (~ focus) actions)
  focus)


;; printf-ish thing. TODO do something completely different?
(let format
  (hide

    (make format
      (to (~ .to-sink sink format-text @arguments)
        (scanning sink format-text arguments)))

    ;;TODO actually design the format language

    (to (scanning sink t args)
      (if t.none? 
          (when args.some?
            (oops "Leftover arguments to format" args))
          (may t.first
            (be #\~
              (parse sink t.rest args))
            (be rune
              (sink .display rune)
              (scanning sink t.rest args)))))

    ;; Parse a ~ field, then go back to scanning the rest of t.
    (to (parse sink t args)
      (let {pair sign t1} (if (t .prefix? '(#\-))
                              {pair -1 t.rest}
                              {pair #no t}))
      (if (t1 .prefix? '(#\0))
          (parsing sink t1.rest #\0     sign 0   args)
          (parsing sink t1      #\space sign #no args)))

    (to (parsing sink t pad sign width args)
      (when t.none?
        (oops "Incomplete format")) ;TODO report the format-text
      (may t.first
        (be #\w
          (maybe-pad sink pad sign width (~ .write args.first))
          (scanning sink t.rest args.rest))
        (be #\d
          (maybe-pad sink pad sign width (~ .display args.first))
          (scanning sink t.rest args.rest))
        (be #\~
          (sink .display "~") ;TODO: complain if there were formatting directives before "~"?
          (scanning sink t.rest args))
        (be (? ~.digit? rune)
          (let new-width (+ (- rune #\0)
                            (if width (* 10 width) 0)))
          (parsing sink t.rest pad sign new-width args))
        (be #\x  ; hex number, XXX works wrong on negative numbers
          (maybe-pad sink pad sign width
                     (~ .display ((text<-number args.first 16) .lowercase)))
          (scanning sink t.rest args.rest))
        (else
          (oops "Bad format text" (text<-list t)))))

    (to (maybe-pad sink pad sign width message)
      (hm (when width
            ;; TODO fix: we're currently justifying to width, but not truncating
            (let w (if sign (* sign width) width))
            (sink .display ((text<-writer message) .justify w pad)))
          (when sign
            (oops "Missing width in format text"))
          (else
            (call sink message))))

    format))
