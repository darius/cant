;; Using modules and loading source files

(to (normalize-path base-path file-stem)
  (if (path-absolute? file-stem)
      file-stem
      (path-join base-path file-stem)))

(to (path-join base-path file-stem)
  (chain base-path "/" file-stem))      ;TODO not normalized

(let library-path (path-join (getenv "CANT_DIR") "library"))
;; TODO the fully-qualified names get absurdly long, what to do?

(let the-modules (!map<-))
(let use-base-path (box<- (current-directory)))

;; To make it possible to reload a module by calling (use file-stem)
;; again afterward. N.B. that won't mutate the existing module object.
(to (unuse file-stem)                   ;TODO better name
  (the-modules .delete! file-stem))

(to (use file-stem)                  ;TODO a realer module system
  (let stem (if (symbol? file-stem)
                (path-join library-path file-stem.text)
                (normalize-path use-base-path.^ file-stem)))
  (or (the-modules .get stem)
      (with-use-path (path-parent stem)
                     (: (hey (do (let loader (if (or (symbol? file-stem)
                                                     (sandboxed-files .find? file-stem))
                                                 new-load-module
                                                 load-module))
                                 ;; XXX the above is scaffolding until we can
                                 ;; fully ditch load-module for new-load-module
                                 (loader (chain stem ".cant") `(,stem)))
                             (-> (the-modules .set! stem it)))))))

(let sandboxed-files
  '("char-set" "chess" "console" "display" "key-map"
    "parser" "prelude" "squirm-interpreter"))

(to (with-use-path path thunk)
  (let old-base-path use-base-path.^)
  (use-base-path .^= path)
  (ejector-protect thunk
                   (: (use-base-path .^= old-base-path))))

;; TODO relative loading like (use filename), I guess
(to (load filename @(optional context))
  (let exp `(do ,@(with-input-file read-all filename)))
  (with-use-path (path-parent
                  ;; A hack to make sure filename *has* a path-parent:
                  (if (path-absolute? filename)
                      filename
                      (path-join "." filename)))
                 (: (cant .play exp main-interactive-setting context))))

(to (load-module filename @(optional context))
  (let exp `(hide ,@(with-input-file read-all filename)))
  (let setting full-powered-setting)
;;  (let setting computational-setting)  ;TODO
  (cant .play exp setting context))

(to (new-load-module filename @(optional context))
  (let exp `(hide ,@(with-input-file read-all filename)))
  (let setting computational-setting)
  (cant .play exp setting context))

(let full-powered-setting-extra-names
  '(full-powered-setting main-interactive-setting
    nano-now nanosleep out stdin os-exit open-subprocess system-randomness-source<-
    console
    extract-datum extract-script
    open-input-file open-output-file with-input-file with-output-file
    system/must-succeed
    the-modules unuse load load-module
    the-last-error push-signal-handler with-signal-handler the-signal-handler
    listener<- debug breakpoint))
(let full-powered-setting
  (empty-setting .extend-promises
                 (chain full-powered-setting-extra-names
                        computational-setting-library-imports
                        computational-setting-names)))
(full-powered-setting .resolve-each! primordial-setting computational-setting-names)

(let main-interactive-setting full-powered-setting.extend-mutable)
(cant .play `(let main-interactive-setting ',main-interactive-setting)
            full-powered-setting)
