;; Misc functions I want to be generally available without needing an import.
;; Some such functions are defined at an earlier stage in abcs/ because they're
;; used by other earlier-stage code.

;; (gather f '(a b c)) = (chain (f 'a) (f 'b) (f 'c))
(make gather {extending zipped-list-transducer}
  (to (~ f xs)
    (for foldr ((x xs) (gathered '()))
      (chain (f x) gathered))))

;; (those ~.even? '(3 1 4 1 5 9 2 6)) = '(4 2 6)
;; No {extending zipped-list-transducer} for this one, because the
;; one-arg case is not substitutable for the n-arg: the n-arg version
;; would return a list of n-tuples, but a 1-tuple of x is not equal to
;; x itself. I rather wish it were, but 1-tuples seem to need to be
;; distinct for the sake of message dispatch.
(to (those keep? xs)
  (for foldr ((x xs) (kept '()))
    (if (keep? x) (link x kept) kept)))

;; (yeahs maybe xs) = a list of the non-#no results of (maybe x) for x in xs,
;; in order.
;;TODO is this worth defining? good name?
(make yeahs {extending zipped-list-transducer}
  (to (~ maybe xs)
    ;; Inlining of (those itself (each maybe xs))
    (for foldr ((x xs) (kept '()))
      (may (maybe x)
        (be #no  kept)
        (be yeah (link yeah kept))))))

;; The identity function.
(to (itself x)
  x)

;; (zip xs ys zs ...) = a list of (~ x y z ...) for x in xs and
;; corresponding y in ys, etc. The inputs must all have the same
;; length.
(make zip
  (to (~ xs ys)                           ;specialized for speed
    (to (mismatch)
      (error "zip: mismatched arguments" xs ys))
    (begin zipping ((xs xs) (ys ys))
      (hm (if xs.none? (if ys.none? '() (mismatch)))
          (if ys.none? (mismatch))
          (else (link (~ xs.first ys.first)
                      (zipping xs.rest ys.rest))))))
  (to (~ @lists)
    (each tuple<-list (transpose lists))))

;; XXX float contagion
(make min {extending left-folding-operation}
  (to (~ a b) (if (< a b) a b)))
(make max {extending left-folding-operation}
  (to (~ a b) (if (< a b) b a)))

;; `(min-by f xs)` = an `x` in `xs` giving the minimum value of `(f x)`.
(to (min-by key<- xs) (foldr1 (on (x y) (if (< (key<- x) (key<- y)) x y))
                              xs))
(to (max-by key<- xs) (foldr1 (on (x y) (if (> (key<- x) (key<- y)) x y))
                              xs))

;; ((compound-key<- f g h) x) = (list<- (f x) (g x) (h x))
(to ((compound-key<- @key-fns) x)   ;; TODO shorter name? combo-key? call-each?
  (each (~ x) key-fns))

;; (where ok? map) = a list of those keys k of map for which (ok? (map k)).
;; Not sure this is the most useful design:
;;  - Most often we want a set, not a list (i.e. we want result.range)
;;  - Sometimes it's *almost* applicable, but ok? needs to take `(,i ,x) as the argument.
;;    But if we make that change, then it's barely different from yeahs.
(to (where ok? map)
  (for yeahs (((~ i x) map.items))
    (and (ok? x) i)))

;; Make a map from k to (f k) for k in keys.
(to (map-by f keys) ;TODO maybe name it map<-keys ? along with a map<-values ?
  (map<-items (for each ((key keys))
                (~ key (f key)))))

(to (!map-by f keys) ;TODO ugly duplication
  (!map<-items (for each ((key keys))
                 (~ key (f key)))))

;; Make a map from (f v) to v for v in values.
(to (map<-values f values)
  (map<-items (for each ((value values))
                (~ (f value) value))))

;; Pair every x in xs with every y in ys.
;; What's a good name for this? I like 'cartesian*' even less.
(to (grid* xs ys)                     ;TODO generalize
  (for gather ((x xs))
    (for each ((y ys))
      `(,x ,y))))

;; (intercalate T '(as bs cs)) = `(,@as ,T ,@bs ,T ,@cs)
;; TODO almost never used
(to (intercalate between elements)      ;TODO unify with .join
  (if elements.none?
      elements
      (link elements.first
            (for gather ((x elements.rest)) ;TODO more efficient
              `(,between ,x)))))

(to (link/lazy x thunk)
  (make lazy-list {extending list-trait}
    (to ~.none? #no)
    (to ~.first x)
    (to ~.rest  (thunk))
    ;; XXX override parts of list-trait that need it for laziness
    ))

;; TODO zipped-list-transducer for the below?

(to (those/lazy keep? xs)
  (if xs.none?
      '()
      (if (keep? xs.first)
          (link/lazy xs.first (: (those/lazy keep? xs.rest)))
          (those/lazy keep? xs.rest))))

(to (each/lazy f xs)
  (for foldr/lazy ((x xs) (rest-thunk (: '())))
    (link/lazy (f x) rest-thunk)))

(to (gather/lazy f xs)
  (for foldr/lazy ((x xs) (rest-thunk (: '())))
    (chain/lazy (f x) rest-thunk)))

(to (chain/lazy xs ys-thunk)
  (foldr/lazy link/lazy xs ys-thunk))

(to (foldr/lazy f xs z-thunk)
  (if xs.none?
      (z-thunk)
      (f xs.first
         (: (foldr/lazy f xs.rest z-thunk)))))

;; ((compose f g) x) = (f (g x)), etc.
(make compose {extending right-folding-operation}
  (to (~ f g)                   ;TODO support (to ((~ f g) @arguments)
    (on (@arguments)
      (f (g @arguments))))
  (to (~)
    itself))

(to (sum ns)
  (foldl + 0 ns))

;; (sum-by f '(a b)) = (+ (f 'a) (f 'b))
;;TODO overload 'sum' instead? (viz. other use of name below)
(make sum-by {extending zipped-list-transducer}
  (to (~ f xs)
    (for foldl ((total 0) (x xs))
      (+ total (f x)))))

(to (tally xs)
  (sum-by ~.count xs))

;; (tally-by f '(a b)) = (+ (~.count (f 'a)) (~.count (f 'b)))
(make tally-by {extending zipped-list-transducer}
  (to (~ f xs)
    (sum-by (compose ~.count f) xs)))
;; TODO hm, I was thinking of f as returning a claim, but as written,
;; it could be any function that returns a countable thing, such as a
;; collection. What's a good name for this from that point of view?
;; total-count ? total ? sum-by ? count-by ?

;; TODO too specialized for the stdlib
(to (union-over sets)
  (let result (set<-))
  (for each! ((set sets))
    (result .union! set))
  result)

;; Split xs at its first element where split-point? is true.
;; That is, return `(,head ,tail), where (chain head tail) = xs,
;; and either tail is () or (split-point? tail.first) is true
;; at the first possible place.
;; TODO I forgot this existed
(to (split-on split-point? xs)
  (begin scanning ((r-head '()) (xs xs))
    (if (or xs.none? (split-point? xs.first))
        `(,(reverse r-head) ,xs)
        (scanning (link xs.first r-head) xs.rest))))

(to (with-input-file fn filename)
  (with-closing fn (open-input-file filename)))

(to (with-output-file fn filename)
  (with-closing fn (open-output-file filename 'replace))) ;TODO the 'replace is for Chez

(to (with-closing fn closable)
  (let result (fn closable))
  closable.close                       ;TODO unwind-protect
  result)

(to (read-all source) ;XXX confusing name, since source.read-all returns a string
  (let thing (read source))
  (if (eof? thing)
      '()
      (link thing (read-all source))))

(to (system/must-succeed command)
  (unless (= 0 (system command))
    (error "Failed system command" command)))

(to (setting<-map map)
  (__setting<- map.keys (array<-list map.values) #no))

(to (system-randomness-source<-)
  (open-input-file "/dev/urandom"))


;; Experiments

;; (take input f g h) = (h (g (f input)))
;: TODO better name 'with'?
;; Hm, (take x) is just x, so this could also replace 'itself'...
;; is there a name suggestive of both functions?
(make take {extending left-folding-operation}
  (to (~ input f)
    (f input)))

;; Return focus after sending it to each of the actions.
;; Helpful for concisely creating-and-initializing an object, and such.
(to (hey focus @actions)                ;TODO better name 'also'?
  (each! (~ focus) actions)
  focus)

;; 'bind' on the maybe monad
(to (mayhap f ?thing)
  (may ?thing
    (be #no #no)
    (else   (f ?thing))))

;; probably worthless
(to (method<- actor cue)
  (on (@arguments)
    (call actor (term<- cue arguments))))


;; Package it all up

(let computational-setting-names
     ;; TODO: nonrandom order
  '(computational-setting read-all cant
    intercalate compound-key<- yeahs where split-on itself max min-by
    those !map-by compose those/lazy
    take foldr/lazy gather chain/lazy sum-by tally-by zip setting<-map
    gather/lazy method<- link/lazy map-by
    hey max-by tally min union-over each/lazy map<-values mayhap
    grid* sum = link link? null? list? number? integer? symbol? cue?
    claim? char? string? array? box? term? source? sink? eof? box<-
    symbol<- term<- char<- array<-count inexact<-exact exact<-inexact
    floor not sqrt void / expt abs gcd number<-string string<-number
    list<-string string-source<- string-sink<- self-evaluating?
    maybe-macroexpand-expr maybe-macroexpand-patt
    setting? immutable-map? map<-items empty-setting
    error with-ejector ejector-protect with-closing
    miranda-trait array-trait list-trait map-trait sink-trait
    as-list array<-list array<- map<- map<-lists tuple<-list yeah?
    list<- !map<- !map<-items !map<-lists set<- set<-list hash-set<-
    surely count? not= left-folding-operation right-folding-operation
    + * - transitive-comparison < <= <=> >= > compare string<-list
    chain reverse foldl foldr foldr1 transpose zipped-list-transducer
    each each! some every interval<- enumerate string<- string<-writer
    read
    assoc  ;; TODO remove
    __as-link __array<-list ;; used implicitly by parse expansion
    __vector-move! ;; TODO is this safe for computational-setting?
    ))
(let computational-setting-library-imports
  '(use
    unwind-protect ;;TODO not exactly safe as currently defined
    sort-by sort flexarray<- flexarray<-list bag<-))
(let computational-setting
  (empty-setting .extend-promises
                 (chain computational-setting-library-imports
                        computational-setting-names)))
(computational-setting .resolve-each! primordial-setting computational-setting-names)
