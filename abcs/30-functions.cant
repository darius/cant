;; Misc functions I want to be generally available without needing an import.
;; Some such functions are defined at an earlier stage in abcs/ because they're
;; used by other earlier-stage code.

;; (yeahs maybe xs) = a list of the non-#no results of (maybe x) for x in xs,
;; in order.
;;TODO is this worth defining? good name?
;;TODO this n-ary case is usually an error, complain? -- (yeahs maybe)
(make yeahs {extend zipped-list-transducer}
  (to (~ maybe xs)
    ;; Inlining of (keep itself (each maybe xs))
    (hm (if xs.none? '())
        (may (maybe xs.first)
          (be #no  (yeahs maybe xs.rest))
          (be yeah (link yeah (yeahs maybe xs.rest)))))))

;; The identity function.
(to (itself x)
  x)

;; (zip xs ys zs ...) = a list of (~ x y z ...) for x in xs and
;; corresponding y in ys, etc. The inputs must all have the same
;; length.
(make zip
  (to (~ xs ys)   ;specialized for speed (TODO still worth bothering?)
    (to (mismatch)
      (oops "zip: mismatched arguments" xs ys))
    (do zipping [xs ys]
      (hm (if xs.none? (if ys.none? '() (mismatch)))
          (if ys.none? (mismatch))
          (else (link (~ xs.first ys.first)
                      (zipping xs.rest ys.rest))))))
  (to (~ @lists)
    (each tuple<-list (transpose lists)))
  ;; Like (zip @lists), but clipping the lists to the length of the shortest:
  ;; TODO move .ragged and pad methods to zipped-list-transducer? and define zip in terms of it?
  (to (~ .ragged @lists) ;; TODO better name .clip ? nah...
    (do zipping [lists]
      (if (some ~.none? lists)
          '()
          (link (tuple<-list (each ~.first lists))
                (zipping (each ~.rest lists))))))
  ;; Like (zip @lists), but right-padding the lists to match the longest:
  (to (~ .pad-right padding @lists)
    (do zipping [lists]
      (if (every ~.none? lists)
          '()
          (link (tuple<-list (each (~ .get 0 padding) lists))
                (zipping (each (~ .from 1) lists))))))
  (to (~ .pad-left padding @lists)
    (reverse (zip .pad-right padding @(each reverse lists)))))

;; `(min-by f xs)` = an `x` in `xs` giving the minimum value of `(f x)`.
;; TODO names `least`, `most` from Arc?
(to (min-by key<- xs)
  ;; The simplest code (fold1 (on (x y) (if (< (key<- x) (key<- y)) x y)) xs))
  ;; can be painfully slow, from repeated calls to key<- on the best x so far.
  (surely xs.some?)
  (let x0 xs.first)
  (let (~ best-x _) (for amass [(best-so-far (~ x0 (key<- x0)))
                                (x xs.rest)]
                      (let (~ _ bsf-key) best-so-far)
                      (let xkey (key<- x))
                      (if (< xkey bsf-key) (~ x xkey) best-so-far)))
  best-x)

(to (max-by key<- xs)
  (surely xs.some?)
  (let x0 xs.first)
  (let (~ best-x _) (for amass [(best-so-far (~ x0 (key<- x0)))
                                (x xs.rest)]
                      (let (~ _ bsf-key) best-so-far)
                      (let xkey (key<- x))
                      (if (> xkey bsf-key) (~ x xkey) best-so-far)))
  best-x)

;; (where ok? map) = a list of those keys k of map for which (ok? (map k)).
;; Not sure this is the most useful design:
;;  - Most often we want a set, not a list (i.e. we want result.range)
;;  - Sometimes it's *almost* applicable, but ok? needs to take `(,i ,x) as the argument.
;;    But if we make that change, then it's barely different from yeahs.
(to (where ok? map)
  (for gather [((~ i x) map.items)]
    (if (ok? x) `(,i) '())))

;; Make a map like `map` with each value transformed by f.
(to (each-value f map)
  (map<-items (for each [((~ k v) map.items)]
                (~ k (f v)))))

;; Make a map from k to (f k) for k in keys.
(to (map-by f keys) ;TODO maybe name it map<-keys ? along with a map<-values ?
  (map<-items (for each [(key keys)]
                (~ key (f key)))))

(to (!map-by f keys) ;TODO ugly duplication
  (!map<-items (for each [(key keys)]
                 (~ key (f key)))))

;; Make a map from (f v) to v for v in values.
(to (map<-values f values)
  (map<-items (for each [(value values)]
                (~ (f value) value))))

(to (text-by f xs)
  ;; TODO zipped-list-transducer? (also for map-by etc.)
  ;; TODO also delete when (f x) = #no?
  ;;      (or make #no.text = ""? that's a bit much...)
  ;; TODO inconsistent to auto-.values here and not elsewhere, isn't it?
  ("" .join (each ||((f it) .text) xs.values)))

(make grid*$
  (to (~)           '(()))
  (to (~ xs @lists) (for gather$ [(x xs)]
                      (for each$ [(picks (grid*$ @lists))]
                        (link x picks)))))

;; TODO zipped-list-transducer for the below?

(to (keep$ keep? xs)
  (hm (if xs.none? '())
      (if (keep? xs.first)
          (link$ xs.first ($ (keep$ keep? xs.rest))))
      (else (keep$ keep? xs.rest))))

(to (skip$ skip? xs)
  (keep$ (compose not skip?) xs))

(to (each$ f xs)
  (hm (if xs.none? '())
      (else (link$ (f xs.first)
                   ($ (each$ f xs.rest))))))

(to (gather$ f xs)
  (for fold$ [(x xs) (rest-thunk ($ '()))]
    (chain$ (f x) rest-thunk)))

(to (yeahs$ maybe xs)
  (keep$ itself (each$ maybe xs)))

(to (amassing$ f z xs)
  (do walking [z xs]
    (link$ z ($ (if xs.none?
                    '()
                    (walking (f z xs.first) xs.rest))))))

(to (amassing f z xs)
  (as-list (amassing$ f z xs)))

;; ((compose f g) x) = (f (g x)), etc.
(make compose {extend right-to-left-operation}
  (to (~ f g)                   ;TODO support (to ((~ f g) @arguments)
    (on (@arguments)
      (f (g @arguments))))
  (to (~)
    itself))

;; (sum-by f '(a b)) = (+ (f 'a) (f 'b))
;;TODO overload 'sum' instead? (viz. other use of name below)
(make sum-by {extend zipped-list-transducer}
  (to (~ f xs)
    (for amass [(total 0) (x xs)]
      (+ total (f x)))))

(to (tally xs)
  (sum-by ~.count xs))

;; (tally-by f '(a b)) = (+ (~.count (f 'a)) (~.count (f 'b)))
(make tally-by {extend zipped-list-transducer}
  (to (~ f xs)
    (sum-by (compose ~.count f) xs)))
;; TODO hm, I was thinking of f as returning a bool, but as written,
;; it could be any function that returns a countable thing, such as a
;; collection. What's a good name for this from that point of view?
;; total-count ? total ? sum-by ? count-by ?

;; (-> input f g h) = (h (g (f input)))
(make -> {extend left-to-right-operation}
  (to (~ input f)
    (f input)))

;; Like (f ?thing) but preserving #no-ness.
(to (mayhap f ?thing)
  (and ?thing (f ?thing)))

(to (with-input-file fn filename)
  (with-closing fn (open-input-file filename)))

(to (with-output-file fn filename)
  (with-closing fn (open-output-file filename 'replace))) ;TODO the 'replace is for Chez

(to (with-closing fn closable)
  (let result (fn closable))
  closable.close                       ;TODO unwind-protect
  result)

(to (read-all source) ;XXX confusing name, since source.read-all returns a text
  (do reading []
    (may (read source)
      (be (? zilch?) '())
      (be thing      (link thing (reading))))))

(to (system/must-succeed command)
  (unless (= 0 (system command))
    (oops "Failed system command" command)))

(to (setting<-map map)
  (__setting<- map.keys map.values.array #no))

(to (system-randomness-source<-)
  (open-input-file "/dev/urandom"))


;; Experiments

;; TODO too specialized for the stdlib
(to (union @sets)
  (hey (set<-) @(each ||(~ .merge! it) sets)))

(to (intersect @sets)
  ;; TODO .intersect! like the above
  (amass1 (on (x y) (x .intersect y))
          sets))

(to (keep-while prefix? xs)             ;TODO as list/text method?
  (hm (if xs.none? '())
      (let x xs.first)
      (if (prefix? x)
          (link x (keep-while prefix? xs.rest)))
      (else '())))
  
(to (keep-while$ prefix? xs)
  (hm (if xs.none? '())
      (let x xs.first)
      (if (prefix? x)
          (link$ x ($ (keep-while$ prefix? xs.rest))))
      (else '())))
  
(to (skip-while prefix? xs)             ;TODO as list/text method?
  (if (and xs.some? (prefix? xs.first))
      (skip-while prefix? xs.rest)
      xs))

(to (keep-until stop? xs) (keep-while (compose not stop?) xs))
(to (skip-until stop? xs) (skip-while (compose not stop?) xs))
(to (keep-until$ stop? xs) (keep-while$ (compose not stop?) xs))

;; Combined keep-until and skip-until: split xs at its first element
;; where suffix? is true.
;; That is, return the pair (~ head tail), where (chain head tail) = xs,
;; and either tail is () or (suffix? tail.first) is true at the first
;; possible place.
(to (until suffix? xs)
  (do scanning [xs (r-head '())]
    (if (or xs.none? (suffix? xs.first))
        (~ (reverse r-head) xs)
        (scanning xs.rest (link xs.first r-head)))))

(to (while prefix? xs)
  (until (compose not prefix?) xs))

;; Inverse to number.digits method.
;; TODO what about signed numbers, non-integers...? Is this whole thing misconceived?
;;      (this could also evaluate polynomials, if designed and named right)
;; TODO check that all digits are valid?
(to (count<-digits digits @(optional base))
  (may (or base 10)
    (be (? number? radix)
      (for amass [(total 0) (digit digits)]
        (+ (* radix total) digit)))
    (be (? list? mixed-radix)
      (let bases (may (- digits.count mixed-radix.count)
                   (be 0 mixed-radix)
                   (be 1 (link 0 mixed-radix))
                   (else (oops "Digits don't match base" digits base))))
      (do loop [digits bases (total 0)]
        (hm (if digits.none? total)
            (else (loop digits.rest bases.rest
                        (+ (* total bases.first) digits.first))))))))

;; ((compound-key<- f g h) x) = (list<- (f x) (g x) (h x))
(to ((compound-key<- @key-fns) x)   ;; TODO shorter name? combo-key? call-each?
  (each (~ x) key-fns))

;; probably worthless
(to (method<- actor cue)
  (on (@arguments)
    (call actor (term<- cue arguments))))


;; Package it all up

;; The debug/trace logger. TODO design a trace-log feature
;; Making it identical to the out capability is just a stopgap!
(let btw out) 

(let computational-setting-names
     ;; TODO: nonrandom order
  '(computational-setting read-all cant
;;    trace-sink
    compound-key<- yeahs where while until itself 
    compose zip setting<-map
    link/lazier lazier<- 
    fold$ gather chain$ 
    each$ gather$ link$ amassing$ iterating
    each-value
    array-by map-by !map-by map<-values text-by method<- ->
    sum-by tally-by tally max min max-by min-by
    hey union intersect mayhap
    grid* sum = link link? list? number? integer? symbol? cue? ;TODO rename cue? or rm it
    bool? rune? array? box? term? source? sink? zilch? ejector?
    box<-
    text? number<-text text<-number
    list<-text text-source<- text-sink<-
    text<-list text<- text<-writer
    term<- rune<- array<-count inexact<-exact exact<-inexact
    not void /
    self-evaluating?
    maybe-macroexpand-expr maybe-macroexpand-patt
    setting? immutable-map? map<-items empty-setting
    oops with-ejector ejector-protect with-closing
    miranda-trait array-trait list-trait map-trait sink-trait
    as-list array<-list array<- map<- map<-lists tuple<-list yeah?
    list<- !map<- !map<-items !map<-lists set<- set<-list
    count? not= left-to-right-operation right-to-left-operation
    + * - transitive-comparison < <= <=> >= > compare
    gcd lcm count<-digits
    chain reverse amass amass1 fold fold1 amassing transpose zipped-list-transducer
    each each! some every march<- yeahs$ grid*$
    keep skip keep$ skip$
    keep-while skip-while keep-while$ keep-until skip-until keep-until$
    read
    assoc  ;; TODO remove
    __as-link __array<-list ;; used implicitly by parse expansion
    btw
    ))
(let computational-setting-library-imports
  '(use avast
    unwind-protect ;;TODO not exactly safe as currently defined
    sort-by sort flexarray<- flexarray<-list bag<-))
(let computational-setting
  (empty-setting .extend-promises
                 (chain computational-setting-library-imports
                        computational-setting-names)))
(computational-setting .resolve-each! primordial-setting computational-setting-names)
