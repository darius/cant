;; Rational numbers
;; same TODOs as complex numbers
;; n = numerator
;; d = denominator

;; N.B. all functions assume the {ratio n d} structures come in 
;; reduced to lowest terms (and with positive denom), and preserve
;; the same invariant.

(to (ratio? thing)
  (may thing
    (be {ratio n d} (and (integer? n) (integer? d) (< 0 d))) ;TODO also check gcd?
    (else           #no)))

(make ratio<-
  (to (~ n)
    (surely (integer? n))
    {ratio n 1})
  (to (~ n d)
    (surely (integer? n))
    (surely (integer? d))
    (reduce n d)))

(to (reduce n d)
  (may d.sign
    (be -1 (lowest-terms (- n) (- d)))
    (be  0 (oops "Divide by 0"))
    (be +1 (lowest-terms n d))))

(to (lowest-terms n d)
  (let g (n .gcd d))
  ;; TODO when we can mix number types: return an int if d/g = 1.
  {ratio (n .quotient g)
         (d .quotient g)})

(to (r* {ratio n1 d1} {ratio n2 d2})
  (lowest-terms (* n1 n2)
                (* d1 d2)))

(to (r/ {ratio n1 d1} {ratio n2 d2})
  (reduce (* n1 d2)
          (* d1 n2)))

(to (r+ {ratio n1 d1} {ratio n2 d2})
  (lowest-terms (+ (* n1 d2) (* n2 d1))
                (* d1 d2)))

(to (r- {ratio n1 d1} {ratio n2 d2})
  (lowest-terms (- (* n1 d2) (* n2 d1))
                (* d1 d2)))

(to (compare {ratio n1 d1} {ratio n2 d2})
  ((* n1 d2) .compare (* n2 d1)))

(to (r-integer? {ratio n d})
  (= d 1))

(to (integer<-ratio {ratio n d})
  (unless (= d 1) (oops "Not an integer" {ratio n d}))
  n)

(to (float<-ratio {ratio n d})
  (/ n.inexact d))

;; TODO just export r-names instead of renaming
((export ratio? ratio<- compare r-integer? integer<-ratio float<-ratio)
 .override (map<- (~ '+ r+)
                  (~ '- r-)
                  (~ '* r*)
                  (~ '/ r/)))
