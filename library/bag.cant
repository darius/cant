;; A bag is a multiset, i.e. a map from a key to a count of its occurrences.

(make bag<-
  (to (~)
    (let !map (!map<-))
    (make bag {extend map-trait} ;; XXX make sure map-trait methods are OK
      (to ~.none?              !map.none?)
      (to ~.count              !map.count)
      (to ~.keys               !map.keys)
      (to ~.values             !map.values)
      (to ~.items              !map.items)
      (to (~ .maps? key)       (!map .maps? key))
      (to (~ key)              (!map .get key 0)) ; TODO (!map key) would be safer... revisit this
      (to (~ .get key default) (!map .get key default))
      (to (~ .get key)         (!map .get key))
      (to (~ .add! key)        (!map .set! key (+ (!map .get key 0) 1)))
      (to (~ .add! key n)      (!map .set! key (+ (!map .get key 0) n)))  ; TODO delete key if now 0?
      (to (~ .add-all! vals)   (for each! [(v vals)]
                                 (bag .add! v)))
      (to (~ .delete! key)     (!map .delete! key))  ; TODO should this decrement the value instead? Or should that be a different method?
      (to ~.clear!             !map.clear!)
      (to ~.total              (sum !map.values))
      (to ~.multikeys
        (for gather [((~ k n) !map.items)]
          (each ||k n.till)))           ; TODO if we support negative counts, this will be nonsense
      (to (~ .most-common @(optional n))
        ;; TODO heap-based n-largest function
        (-> (sort-by (~ .part 1) !map.items)
            reverse
            (if n (~ .prefix n) itself)))
      ;; XXX fill in rest of bag interface (just the map interface, I guess)
      (to (~ .selfie sink)
        (sink .display "#<bag (")
        (sink .write !map.count)
        (sink .display ")>"))
      ))

  (to (~ vals)
    (let bag (bag<-))
    (bag .add-all! vals)
    bag))

(export bag<-)
