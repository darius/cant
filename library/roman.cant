;; Roman numerals
;; TODO: expose as a parson grammar, too?

(to (number<-roman text)
  (let values (array<-list (each value<-rune text.uppercase)))
  (sum (for each (((~ i v) values.items))
         ;; Each letter goes into the sum either positively or negatively,
         ;; depending on the next letter. E.g. X in "XC" means -10, not 10.
         (let next-v (values .get i.+ v))
         (take v (if (< v next-v) - +)))))

(let value<-rune
  (map<-lists '((#\M 1000) (#\D 500) (#\C 100) (#\L 50) (#\X 10) (#\V 5) (#\I 1))))

(to (roman<-number n)
  (surely (< 0 n))
  (for foldr ((digit n.digits) (roman ""))
    (chain (roman*10 roman) (roman<-digit digit))))

(to (roman*10 text)
  (text<-list (each rune*10 text)))

(let roman<-digit (array<-list (" I II III IV V VI VII VIII IX" .split " ")))
(let rune*10 (map<-items (zip "IVXLC"
                              "XLCDM")))

(export number<-roman roman<-number)
