;; Random tests from property checks.
;; Based on clickcheck/peckcheck.

;; Glossary:
;;    g    generator context: includes a chaos and a size
;;    gen  generates a value of a type, given a g

(import (use 'chaos) chaos<-)
(let default-chaos (chaos<- 1234567))    ;TODO don't use this all the time

;; TODO an API separating defining a test from the rest of the stuff,
;;  where only running a test needs to import 'out'

(to (module powers)
  (import powers out)

  ;; TODO report which property failed
  ;; TODO make and report deterministic seeds
  ;; TODO catch errors
  ;; TODO better names
  (make all
    (to (~ property @gens)
      (all .run (context<- default-chaos) 40 property gens))
    (to (~ .run g n-times property gens)
      (let failures (flexarray<-))
      (for each! ((_ n-times.till))
        (let inputs (each (~ g) gens))
        (may (property @inputs)
          (be #yes    (out .display "."))
          (be outcome (out .display "X") (failures .push! (~ outcome inputs)))))
      out.newline
      (when failures.some?
        (out .say "Failures for ~w:\n" property)
        (for each! (((~ outcome inputs) failures.values))
          (out .say "~w: ~w\n" outcome inputs)))
      failures.none?))

  (to (should be-ok? @arguments)
    (be-ok? @arguments))       ;TODO communicate failure more usefully


  ;; Generator context

  (make context<-
    (to (~ chaos)
      (context<- chaos 20)) ; TODO we'll want a bigger number when we're no longer super-slow
    (to (~ chaos size)
      ;; TODO better method names
      (make gen
        (to ~.size              size)
        (to (~ .natural n)      (chaos .sample-count n))
        (to (~ .interval lo hi) ((lo .till hi) .sample-value chaos))
        (to ~.a-size            (chaos .sample-count size))
        (to (~ .choose xs)      (xs .sample-value chaos)))))


  ;; Basic gens
  ;; TODO maybe name like <claim> etc.

  (to (a-claim g)
    (may (g .natural 2)
      (be 0 #no)
      (be 1 #yes)))

  (to (a-count g)
    (g .natural g.size))

  (to (an-int g)
    (g .interval (- g.size) g.size))

  (to (a-rune g)
    (rune<- (g .natural 256)))

  (to (a-printable-rune g)
    (rune<- (g .interval 32 126))) ; TODO this is an exclusive range. do I want to exclude code 126?

  (to ((a-list-of gen) g)
    (for each ((_ g.a-size.till))
      (gen g)))

  (to (a-text g)
    (~.text ((a-list-of a-rune) g)))

  (to (a-printable-text g)
    (~.text ((a-list-of a-printable-rune) g)))

  ;; TODO find a new name for this after the retupling
  (to ((a-tuple @gens) g)
    (each (~ g) gens))

  (to ((a-choice @gens) g)
    ((g .choose gens) g))

  
  (export
    a-claim a-count an-int a-rune a-printable-rune a-text a-printable-text
    a-list-of a-tuple a-choice
    all should
    context<-
    ))
