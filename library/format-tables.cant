;; Format a sequence of texts in columns.
;; Based on github.com/darius/columnize

;; Given a list of rows, each a list of things, return a list of lines.
;; Each line is the corresponding row displayed as texts joined by
;; `spacer`, with each column padded to its max width.
;; TODO right-justify numeric columns, or parameterize justification by column
(to (format-table rows-of-things @(optional ?spacer ?justify))
  (let rows (each ||(each text-display it) rows-of-things))
  (let spacer  (or ?spacer  " "))
  (let justify (or ?justify ('.pad-right .method)))
  (surely (rows .unique? ~.count) "Rows must be the same length" rows)
  (let widths (for each [(column (transpose rows))]
                (max @(each ~.count column))))
  (for each [(row rows)]
    (spacer .join (each justify row widths))))

(to (text-display thing)
  (text<-writer (~ .display thing)))

;; Given a sequence of texts, return a matrix of the same texts in
;; column order, trying to fit them in the given width.
(to (tabulate texts @(optional ?width))
  (let width (or ?width 79))
  (let max-width (+ 2 (max 0 @(each ~.count texts))))
  (let n-cols (max 1 (min texts.count (width .quotient max-width))))
  (let n-rows (max 1 ((+ texts.count n-cols -1) .quotient n-cols)))
  (let padded (texts .pad-right (* n-rows n-cols) ""))
  (transpose (for each [(i (0 .till texts.count n-rows))] ;TODO `chunk` function?
               (padded .from i (+ i n-rows)))))

(export format-table tabulate)
