;; Pseudo-random number generators
;; TODO: port a better one

;; (random-seed<-) -> seed (From system randomness.)
;; (chaos<- seed) -> chaos
;; (chaos .random-count n) -> int

(let D 2147483647)

;; Multiplicative congruential
(to (park-miller-chaos<- seed)
  (surely (< 0 seed))
  (let state (box<- seed))

  (to (next)
    (let (~ _ r) (state.^ .*/mod 16807 D))
    (state .^= r)
    r)

  (make chaos
    (to (~ .random-count n)
      ;; XXX surely 0 < n <= D
      ((next) .modulo n))                ;XXX could be better
    (to (~ .random-range lo hi)
      (+ lo (chaos .random-count (- hi lo))))
    (to (~ .pick xs)
      (xs (chaos .random-count xs.count)))
    (to (~ .shuffle! array)
      (let n array.count)
      (for each! ((i n.till))
        (array .swap! i (chaos .random-range i n))))
    ))

(let chaos<- park-miller-chaos<-)
(let chaos (chaos<- 1234567))

(to (random-chaos<- randomness-source<-)
  (chaos<- (random-seed<- randomness-source<-)))

(to (random-seed<- randomness-source<-)
  (for with-closing ((source (randomness-source<-)))
    (begin trying ()
      (let seed (read-u32 source))
      (if (< 0 seed D)
          seed
          (trying)))))

;; Read a 4-byte unsigned int, big-endian.
;; TODO should be in a library
;; TODO use .read-u8 on a *binary* source. Then cult-of-the-bound-variable could use this too.
(to (read-u32 source)
  (for foldl ((n 0) (_ (4 .till)))
    (+ (n .<< 8) source.read-rune.code)))

(export chaos<- chaos random-chaos<- random-seed<-)
