;; Pseudo-random number generators
;; TODO: port a better one

;; (random-seed<-) -> seed (From system randomness.)
;; (chaos<- seed) -> chaos
;; (chaos .sample-count n) -> n'

(let D 2147483647)
(let D-as-float D.inexact)

;; Multiplicative congruential
(to (park-miller-chaos<- seed)
  (surely (< 0 seed))
  (let state (box<- seed))

  (to (next)
    (let (~ _ r) (state.^ .*/mod 16807 D))
    (state .^= r)
    r)

  (make chaos
    ;; TODO not thrilled with these names
    (to (~ .sample-count n)        ;; a random integer in [0..n)
      ;; XXX surely 0 < n <= D
      ((next) .modulo n))    ;XXX not quite uniform sampling
    ;; TODO a trait for the remaining methods
    (to ~.sample-portion           ;; a random real in [0..1]
      (/ (next) D-as-float))
    (to (~ .probability numerator denominator) ;; #yes with probability n/d, else #no
      (surely (<= 0 numerator denominator))
      (< (chaos .sample-count denominator) numerator))
    (to (~ .probability p) ;; #yes with probability p, else #no
      (surely (<= 0 p 1))
      (< chaos.sample-portion p))))

(let chaos<- park-miller-chaos<-)
(let chaos (chaos<- 1234567))

(to (random-chaos<- randomness-source<-)
  (chaos<- (random-seed<- randomness-source<-)))

(to (random-seed<- randomness-source<-)
  (for with-closing [(source (randomness-source<-))]
    (begin trying []
      (let seed (read-u32 source))
      (if (< 0 seed D)
          seed
          (trying)))))

;; Read a 4-byte unsigned int, big-endian.
;; TODO should be in a library
;; TODO use .read-u8 on a *binary* source. Then cult-of-the-bound-variable could use this too.
(to (read-u32 source)
  (for amass [(n 0) (_ 4.till)]
    (+ (n .<< 8) source.read-rune.code)))

(export chaos<- chaos random-chaos<- random-seed<-)
