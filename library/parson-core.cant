;; PEG parsing
;; from https://github.com/darius/parson, but incomplete

;; TODO: fuller oops reporting
;; TODO: memoize
;; TODO: delay semantic actions until final success
;; TODO: a top-level fn that oopses on failure

;; Glossary:
;;  p, q       parsing expression
;;  text       input sequence
;;             (We call it 'text' here even though these operations
;;             don't care what kind of sequence they deal with. It had
;;             better support efficient access by index, though -- I
;;             don't recommend a linked list.)
;;  far        the rightmost index tentatively advanced to in text
;;             (used for oops reporting)
;;  i, j       index into text
;;  vals, vs   list of parsed values

;; A parser (i.e. parsing expression) is represented as a function 
;;   p: text far i vals -> result
;; where result is a failure or success object as defined below
;; (or anyway an object following the same protocol as failure/success).

(to (parse parser text)
  (parser text 0 0 '()))

;; The first, basic parsers just fail or succeed right away.

(to (fail text far i vals)
  (make failure
    (to (~ .continue _)     failure)
    (to (~ .else p j vs)    (p text far j vs))
    (to ~.invert            empty)
    (to (~ .capture-from _) failure)
    (to (~ .prefix _)       failure)
    (to ~.leftovers         (oops "Parse failed" failure.postmortem))
    (to ~.?results          #no)
    (to ~.results           (oops "Parse failed" failure.postmortem))
    (to ~.result            (oops "Parse failed" failure.postmortem))
    (to ~.postmortem        `(,(text .slice 0 far) /
                              ,(text .slice far)))
    (to ~.display                         ;TODO change to .selfie
      (let `(,left / ,right) failure.postmortem)
      ("failed: ~w/~w" .format left right))))

(to (empty text far i vals)
  (make success
    (to (~ .continue p)       (p text far i vals))
    (to (~ .else _ _ _)       success)
    (to ~.invert              fail)
    (to (~ .capture-from j)   (empty text far i `(,@vals ,(text .slice j i))))
    (to (~ .prefix pre-vals)  (empty text far i (chain pre-vals vals)))
    (to ~.leftovers           i)
    (to ~.?results            vals)
    (to ~.results             vals)
    (to ~.result              vals.maybe)    ;TODO nicer oops on wrong # of vals
    (to ~.display
      ("~w ~w" .format (text .slice i) vals))))

;; (invert p): a parser that succeeds from a state just when p fails
;; from the same state. Any parsing by p becomes mere lookahead; it
;; won't affect any of the result, not even the 'far' point.
(to ((invert p) text far i vals)
  (((p text far i vals) .invert) text far i vals))

;; Return a parser that acts like p, except it appends a value: the
;; text that p matched.
(to ((capture p) text far i vals)
  ((p text far i vals) .capture-from i))

;; (either p1 ... pn): a parser that succeeds just when one of its
;; arguments does, trying them in order.
(make either {extending right-folding-operation}
  (to (~ p q)
    (on (text far i vals)
      ((p text far i vals) .else q i vals)))
  (to (~)
    fail))

;; (then p1 ... pn): a parser that succeeds just when all of p1..pn
;; do, each one starting where the last left off.
(make then {extending right-folding-operation}
  (to (~ p q)
    (on (text far i vals)
      ((p text far i vals) .continue q)))
  (to (~)
    empty))

;; (feed-list f): a parser that replaces the vals with a singleton, (f vals).
(to ((feed-list f) text far i vals)
  (empty text far i `(,(f vals))))

;; The same, but for a multi-argument f.
(to (feed f)
  (feed-list (on (vals) (f @vals))))

;; TODO Python Parson also has alter(f), trace(message), others?

;; Succeed, clearing away any vals.
(to (drop text far i vals)
  (empty text far i '()))

;; Succeed, appending `constant` to the vals.
(to ((push constant) text far i vals)
  (empty text far i `(,@vals ,constant)))

;; (seclude p): parse as p, but with () in place of the incoming
;; values. If p succeeds, producing new values, then succeed overall,
;; producing the chain of the incoming values plus the new ones.
;; For example, if the incoming values are (#\x #\y), then
;; (feed text<-) succeeds, producing ("xy"). But
;; (seclude (feed text<-)) produces (#\x #\y "").
;;
;; When you write a grammar, you typically want to seclude most
;; productions: e.g. a rule A ::= B C | D
;; would be like (seclude (either (then B C (feed a<-bc))
;;                                (then D   (feed a<-d))))
;;
;; But you needn't always seclude your productions: that'd be like
;; writing a recursive-descent parser without ever passing parameters
;; or keeping loop state. You *could* get along without those
;; features, as long as the data only enters into semantics, not
;; syntactic predicates: instead of taking parameters, return a
;; closure that takes them, and instead of loop state, return a data
;; structure for a later pass in code to deal with. These would be
;; pretty annoying hacks to need for things as ordinary as parsing
;; left-associative operators -- which in a recursive-descent parser
;; would be just a while-loop. In Parson it's equally simple: the
;; `many` combinator (below) of a non-secluded loop body. (Call it a
;; left fold if you prefer.)
;;
;; Sometimes you want to seclude only part of a production. `seclude`
;; works together with `feed` to pipe results from producers to
;; consumers.
(to ((seclude p) text far i vals)
  ((p text far i '()) .prefix vals))

;; When (thunk) gets called, it must return a parser p. We don't call
;; it right away; instead (delay thunk) returns a parser that, the
;; first time *it* gets called, calls (thunk) and acts as the
;; resulting p, then and thereafter. Use this for recursive grammars.
;; TODO: implement promises instead
(to (delay thunk)
  (let p (box<- (on (text far i vals)
                  ;; TODO detect left-recursion loops at parse time
                  (p .^= (thunk))
                  (p.^ text far i vals))))
  (on (text far i vals)
    (p.^ text far i vals)))

;; Advance one place if possible -- i.e. we're short of the end, and
;; ok? is true of the element at the current place (normally, the rune
;; we're looking at).
(to ((skip-1 ok?) text far i vals)
  (if (and (text .maps? i) (ok? (text i)))
      (empty text (max far i.+) i.+ vals)
      (fail text far i vals)))


;; Derived combinators

;; Like (skip-1 ok?), but appending the one-element sequence (one-rune
;; subtext) to the vals.
(to (take-1 ok?)
  (capture (skip-1 ok?)))

(let any-1      (take-1 (:: #yes)))
(let skip-any-1 (skip-1 (:: #yes)))

;; Succeed just at the end of the input.
(let end (invert skip-any-1))

;; E.g. (lit-1 #\x) advances past exactly "x", or fails.
(to (lit-1 my-rune)
  (skip-1 (:: (= my-rune it)))) ;TODO I think <=> in place of = would catch some bugs in client code

;; E.g. (lit "hello") advances past exactly "hello", or fails.
(to (lit text)
  (then @(each lit-1 text)))

;; Always succeed, but preferably after p.
(to (maybe p)
  (either p empty))

(make many
  ;; Parse as 0 or more p's in sequence, i.e. Kleene star.
  (to (~ p)
    (let p* (maybe (then p (delay (: p*))))))
  ;; 0 or more p's, with separator in between each.
  (to (~ p separator)
    (maybe (then p (many (then separator p))))))

(make at-least-1
  ;; Parse as 1 or more p's in sequence, i.e. Kleene plus.
  (to (~ p)
    (let p+ (then p (maybe (delay (: p+))))))
  ;; 1 or more p's, with separator in between each.
  (to (~ p separator)
    (then p (many (then separator p)))))

(export invert capture either then feed-list feed push seclude delay
        maybe many at-least-1
        fail empty end skip-1 take-1 any-1 skip-any-1 lit-1 lit drop
        parse)
