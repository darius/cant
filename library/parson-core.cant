;; PEG parsing
;; from https://github.com/darius/parson, though that has a bit more

;; TODO: fuller oops reporting
;; TODO: memoize
;; TODO: delay semantic actions until final success

;; Glossary:
;;  p, q       parsing expression
;;  text       input sequence
;;             (We call it 'text' here even though these operations
;;             don't care what kind of sequence they deal with. It had
;;             better support efficient access by index, though -- I
;;             don't recommend a linked list.)
;;  far        the rightmost index tentatively advanced to in text
;;             (used for oops reporting)
;;  i, j       index into text
;;  vals, vs   list of parsed values

;; A parser (i.e. parsing expression) is represented as an object with the method
;;   ~ .parsing text far i vals -> outcome
;; where outcome is a failure or success object as defined below
;; (or anyway an object following the same protocol as failure/success).

(make-trait peg-trait peg
;; TODO conveniences like so, though let's try to span the space better with fewer methods:
;;  (to (~ text)  ((peg .parse-outcome text) .results))
;;  (to (~ .parse-1 text)  ((peg .parse-outcome text) .result))
  (to (~ .parse text)  ((peg .parse-outcome text) .results))
  (to (~ .?parse text) ((peg .parse-outcome text) .?results))
  (to (~ .parse-outcome text)           ;TODO better name, etc.
    (peg .parsing text 0 0 '()))
  ;; Convenience constructor methods:
  (to ~.nix         (nix peg))
  (to ~.capture     (capture peg))
  (to ~.seclude     (seclude peg))
  (to ~.peek        (peek peg))
  (to ~.seek        (seek peg))
  (to ~.maybe       (maybe peg))
  (to ~.many        (many peg))
  (to ~.at-least-1  (at-least-1 peg))
  (to (~ .then q)   (then peg q))
  (to (~ .either q) (either peg q))
  (to message
    (miranda-trait peg message)))


;; The first, basic parsers just fail or succeed right away.

(make fail {extending peg-trait}
  (to (~ .parsing text far i vals)
    (make failure
      (to (~ .continue _)     failure)
      (to (~ .else p j vs)    (p .parsing text far j vs))
      (to ~.nix               empty)
      (to (~ .capture-from _) failure)
      (to (~ .prefix _)       failure)
      (to ~.leftovers         (oops "Parse failed" failure.postmortem))
      (to ~.?results          #no)
      (to ~.results           (oops "Parse failed" failure.postmortem))
      (to ~.result            (oops "Parse failed" failure.postmortem))
      (to ~.postmortem        `(,(text .slice 0 far) /
                                ,(text .slice far)))
      (to ~.display                         ;TODO change to .selfie
        (let `(,left / ,right) failure.postmortem)
        ("failed: ~w/~w" .format left right)))))

(make empty {extending peg-trait}
  (to (~ .parsing text far i vals)
    (make success
      (to (~ .continue p)       (p .parsing text far i vals))
      (to (~ .else _ _ _)       success)
      (to ~.nix                 fail)
      (to (~ .capture-from j)   (empty .parsing text far i `(,@vals ,(text .slice j i))))
      (to (~ .prefix pre-vals)  (empty .parsing text far i (chain pre-vals vals)))
      (to ~.leftovers           i)
      (to ~.?results            vals)
      (to ~.results             vals)
      (to ~.result              vals.maybe)    ;TODO nicer oops on wrong # of vals
      (to ~.display
        ("~w ~w" .format (text .slice i) vals)))))

;; (nix p): a parser that succeeds from a state just when p fails
;; from the same state. Any parsing by p becomes mere lookahead; it
;; won't affect any of the result, not even the 'far' point.
(to (nix p)
  (make nix-p {extending peg-trait}
    (to (~ .parsing text far i vals)
      (((p .parsing text far i vals) .nix) .parsing text far i vals))))

;; Return a parser that acts like p, except it appends a value: the
;; text that p matched.
(to (capture p)
  (make capture-p {extending peg-trait}
    (to (~ .parsing text far i vals)
      ((p .parsing text far i vals) .capture-from i))))

;; (either p1 ... pn): a parser that succeeds just when one of its
;; arguments does, trying them in order.
(make either {extending right-folding-operation}
  (to (~ p q)
    (make either-p-q {extending peg-trait}
      (to (~ .parsing text far i vals)
        ((p .parsing text far i vals) .else q i vals))))
  (to (~) fail))

;; (then p1 ... pn): a parser that succeeds just when all of p1..pn
;; do, each one starting where the last left off.
(make then {extending right-folding-operation}
  (to (~ p q)
    (make then-p-q {extending peg-trait}
      (to (~ .parsing text far i vals)
        ((p .parsing text far i vals) .continue q))))
  (to (~) empty))

;; (seclude p): parse as p, but with () in place of the incoming
;; values. If p succeeds, producing new values, then succeed overall,
;; producing the chain of the incoming values plus the new ones.
;; For example, if the incoming values are (#\x #\y), then
;; (feed text<-) succeeds, producing ("xy"). But
;; (seclude (feed text<-)) produces (#\x #\y "").
;;
;; When you write a grammar, you typically want to seclude most
;; productions: e.g. a rule A ::= B C | D
;; would be like (seclude (either (then B C (feed a<-bc))
;;                                (then D   (feed a<-d))))
;;
;; But you needn't always seclude your productions: that'd be like
;; writing a recursive-descent parser without ever passing parameters
;; or keeping loop state. You *could* get along without those
;; features, as long as the data only enters into semantics, not
;; syntactic predicates: instead of taking parameters, return a
;; closure that takes them, and instead of loop state, return a data
;; structure for a later pass in code to deal with. These would be
;; pretty annoying hacks to need for things as ordinary as parsing
;; left-associative operators -- which in a recursive-descent parser
;; would be just a while-loop. In Parson it's equally simple: the
;; `many` combinator (below) of a non-secluded loop body. (Call it a
;; left fold if you prefer.)
;;
;; Sometimes you want to seclude only part of a production. `seclude`
;; works together with `feed` to pipe results from producers to
;; consumers.
(to (seclude p)
  (make seclude-p {extending peg-trait}
    (to (~ .parsing text far i vals)
      ((p .parsing text far i '()) .prefix vals))))

;; When (thunk) gets called, it must return a parser p. We don't call
;; it right away; instead (delay thunk) returns a parser that, the
;; first time *it* gets called, calls (thunk) and acts as the
;; resulting p, then and thereafter. Use this for recursive grammars.
;; TODO: implement promises instead
(to (delay thunk)
  (let p (box<- (to (_ .parsing text far i vals)
                  ;; TODO detect left-recursion loops at parse time
                  (p .^= (thunk))
                  (p.^ .parsing text far i vals))))
  (make delay-p {extending peg-trait}
    (to (~ .parsing text far i vals)
      (p.^ .parsing text far i vals))))

;; Succeed iff (?advance text i) is a yeah, the new i afterwards.
(to (match ?advance)
  (make match-p {extending peg-trait}
    (to (~ .parsing text far i vals)
      (may (?advance text i)
        (be #no
          (fail .parsing text far i vals))
        (be i1
          (surely (<= i i1 text.count))
          (empty .parsing text (max far i1) i1 vals))))))

;; Push our current position in the text.
(make position {extending peg-trait}
  (to (~ .parsing text far i vals)
    (empty .parsing text far i `(,@vals ,i))))

;; Pop the values and give them to f to choose a peg to match with.
;; This serves about the same purpose as monadic bind in other
;; parser-combinator libraries.
(to (dynamic f)
  (make dynamic-p {extending peg-trait}
    (to (~ .parsing text far i vals)
      ((f @vals) .parsing text far i '()))))

;; Update the values by 'f'.  TODO better name?
(to (alter f)
  (make alter-p {extending peg-trait}
    (to (~ .parsing text far i vals)
      (empty .parsing text far i (f vals)))))

;; The next few are defined in terms of 'alter', but might be worth
;; making primitive for less overhead.

;; (feed-list f): a parser that replaces the vals with a singleton, (f vals).
(to (feed-list f)
  (alter (on (vals) `(,(f vals)))))

;; The same, but for a multi-argument f.
(to (feed f)
  (alter (on (vals) `(,(f @vals)))))

;; Succeed, clearing away any vals.
(let drop (alter (:: '())))

;; Succeed, appending `constant` to the vals.
(to (push constant)
  (alter (on (vals) `(,@vals ,constant))))

;; TODO Python Parson also has trace(message), others?


;; Derived combinators

;; Succeed iff p does, but without advancing.
(to (peek p)
  (nix (nix p)))

;; Match p in the first position possible after skipping forward 0 or more places.
(to (seek p)
  (let seek-p (either p (then skip-any-1 (delay (: seek-p))))))

;; Advance one place if possible -- i.e. we're short of the end, and
;; ok? is true of the element at the current place (normally, the rune
;; we're looking at).
(to (skip-1 ok?)
  (match (on (text i)
           (and (text .maps? i) (ok? (text i)) i.+))))

(let skip-any-1 (match (on (text i) (and (text .maps? i) i.+))))

;; Succeed just at the end of the input.
(let end (nix skip-any-1))

;; Like (skip-1 ok?), but appending the one-element sequence (one-rune
;; subtext) to the vals.
(to (take-1 ok?)
  (capture (skip-1 ok?)))

(let any-1 (capture skip-any-1))

;; E.g. (lit-1 #\x) advances past exactly "x", or fails.
(to (lit-1 my-rune)
  (skip-1 (:: (= my-rune it)))) ;TODO I think <=> in place of = would catch some bugs in client code

;; E.g. (lit "hello") advances past exactly "hello", or fails.
(to (lit literal)
  (if (<= literal.count 1) ;; Splitting into these two cases should be more efficient
      (then @(each lit-1 literal))
      (match (on (text i)
               (and (text .maps? i)
                    (do (let j (+ i literal.count))
                        (and (= literal (text .slice i j)) ; (see above about <=>)
                             j)))))))

;; Always succeed, but preferably after p.
(to (maybe p)
  (either p empty))

(make many
  ;; Parse as 0 or more p's in sequence, i.e. Kleene star.
  (to (~ p)
    (let p* (maybe (then p (delay (: p*))))))
  ;; 0 or more p's, with separator in between each.
  (to (~ p separator)
    (maybe (then p (many (then separator p))))))

(make at-least-1
  ;; Parse as 1 or more p's in sequence, i.e. Kleene plus.
  (to (~ p)
    (let p+ (then p (maybe (delay (: p+))))))
  ;; 1 or more p's, with separator in between each.
  (to (~ p separator)
    (then p (many (then separator p)))))

(export peg-trait
        fail empty nix capture either then seclude delay match position
        dynamic alter feed-list feed drop push
        peek seek skip-1 skip-any-1 end take-1 any-1 lit-1 lit
        maybe many at-least-1)
