;; Convert integers to their English numerals and ordinals.
;; E.g. 11 -> "eleven", "eleventh"

;; Numerals

(to (numeralize n)
  (surely (integer? n))
  (may n.sign
    (be -1 (chain "negative " (numeralize n.magnitude)))
    (be  0 "zero")
    (be +1 (" " .join (digitize n 1000 (with-suffix zillions numeralize<1000))))))

(to (numeralize<1000 n)
  (" " .join (digitize n 100 (with-suffix hundreds numeralize<100))))

(to (numeralize<100 n)
  (hm (if (< n 20) (numerals<20 n))
      (else ("-" .join (digitize n 10 sans-suffix)))))

(to (digitize n base render-term)
  (reverse (for yeahs (((~ power digit) (~.items (n .digits base))))
             (and (not= 0 digit) (render-term power digit)))))

;; Ways to render a term in a base**power expansion.

(to ((with-suffix suffixes render) power digit)
  (" " .join (link (render digit) (yeahs suffixes `(,power)))))

(to (sans-suffix power digit)
  ((smalls power) digit))

;; Indexed by digits. The _ entries are never accessed.
(let numerals<20
  '[_          "one"      "two"        "three"     "four"
    "five"     "six"      "seven"      "eight"     "nine"
    "ten"      "eleven"   "twelve"     "thirteen"  "fourteen"
    "fifteen"  "sixteen"  "seventeen"  "eighteen"  "nineteen"])
(let n-ty
  '[_ _ "twenty" "thirty" "forty" "fifty" "sixty" "seventy" "eighty" "ninety"])

;; Indexed by powers. The #no entries for 0th powers mean no suffix.
(let smalls [numerals<20 n-ty])
(let hundreds [#no "hundred"])
(let zillions `[#no ,@(-> "thousand m* b* tr* quadr* quint* sext*"
                          (~ .replace "*" "illion") ~.split)])


;; Ordinals

(import (use 'parson) like)

(to (ordinalize n)
  ("" .join (fix-up (numeralize n))))   ;TODO speed. fix-up is super slow.

(let fix-up (like "
  'y'      :end :'ieth'
| 'one'    :end :'first'
| 'two'    :end :'second'
| 'three'  :end :'third'
| 'five'   :end :'fifth'
| 'eight'  :end :'eighth'
| 'nine'   :end :'ninth'
| 'twelve' :end :'twelfth'
|          :end :'th'
| :anyone loop"))

(to (ordinalize-suffix n)
  (surely (count? n))
  (ordinal-suffixes (if (< n 20) n (n .remainder 10))))

(let ordinal-suffixes (~.array (for each ((n (20 .till)))
                                 ((ordinalize n) .last-n 2))))


(export numeralize ordinalize ordinalize-suffix)
