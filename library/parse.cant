;; Parse with a context-free grammar and a chart.
;; Ported from PAIP chapter 9

(import (use 'memoize) memoize)

(to (grammar<-rules rules)

  ;; Return a list of those rules with word on the rhs.
  (let lexical-rules
    (memoize (on (word) (for keep ((rule rules))
                          (= rule.rhs word)))))

  ;; Return a list of those rules where cat starts the rhs.
  (let rules-starting-with
    (memoize (on (cat) (keep (~ .starts-with? cat) rules))))

  ;; Look for the categories needed to complete the parse.
  (to (extend-parse lhs rhs rest needed)
    (hm (when needed.none?
          ;; Return parse and upward extensions.
          (let tree (tree<- lhs rhs))
          (link (parse<- tree rest)
                (for gather ((rule (rules-starting-with lhs)))
                  (extend-parse rule.lhs `(,tree)
                                rest rule.rhs.rest))))
        (else
          ;; Try to extend rightward.
          (for gather ((p (grammar .parse-prefixes rest)))
            (if (= p.lhs needed.first)
                (extend-parse lhs `(,@rhs ,p.tree)
                              p.remainder needed.rest)
                '())))))

  (make grammar

    ;; Return all complete parses of a list of words.
    (to (~ .parse words)
      (each ~.tree (keep ~.complete? (grammar .parse-prefixes words))))

    ;; Return all parses of any prefix of words (working bottom-up).
    (to (~ .parse-prefixes words)
      (if words.none?
          '()
          (for gather ((rule (lexical-rules words.first)))
            (extend-parse rule.lhs `(,words.first) words.rest '()))))))

(to (grammar<- sexprs)
  (grammar<-rules (for each ((`(,lhs -> ,rhs) sexprs))
                    (rule<- lhs rhs))))

(to (rule<- lhs rhs)
  (make _
    (to ~.lhs lhs)
    (to ~.rhs rhs)
    (to (~ .starts-with? cat)
      (-> rhs (be? (link (= cat) _))))))

(to (tree<- lhs rhs)
  (make _
    (to ~.lhs lhs)
    (to ~.rhs rhs)
    (to (~ .selfie sink) (sink .write `(,lhs ,@rhs)))))

;; A parse tree and a remainder.
;; TODO s/remainder/leftover/ or some such?
(to (parse<- tree remainder)
  (make
    (to ~.tree      tree)
    (to ~.remainder remainder)
    (to ~.lhs       tree.lhs)
    (to ~.complete? remainder.none?)
    (to (~ .selfie sink)
      (sink .write `((tree: ,tree)
                     (remainder: ,remainder))))))

(export grammar<-
        grammar<-rules rule<-)
