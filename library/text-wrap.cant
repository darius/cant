;; Like Python's textwrap.
;; TODO try using Parson
;; TODO the Python names are pretty arbitrary

;; Reformat text, trying to fit in width.
(to (fill text width)
  ("\n" .join (wrap text width)))

;; Reformat text into a list of lines, trying to fit in width.
(to (wrap text width)
  (surely (< 0 width))  ;TODO 'require' or something, for preconditions
  (wrap-into (flexarray<-) (parse-tokens text) width))

(to (flush buffer)
  (text<-list buffer.values))

(to (parse-tokens text)
  (if text.none?
      '()
      (may text.first
        (be #\newline (link {break} (parse-tokens text.rest)))
        (be #\space   (link {space} (parse-tokens text.rest)))
        (be (? ~.whitespace? rune)
          (oops "I don't know how to fill whitespace like" rune))
        (be rune
          (let word (flexarray<- rune))
          (begin eating ((text text.rest))
            (if (or text.none? text.first.whitespace?)
                (link {word (flush word)} (parse-tokens text))
                (do (word .push! text.first)
                    (eating text.rest))))))))

(to (wrap-into line tokens width)
  (begin scanning ((spaces 0) (tokens tokens))
    (if tokens.none?
        (if line.none? '() `(,(flush line)))
        (may tokens.first
          (be {space}
            (scanning spaces.+ tokens.rest))
          (be {break}
            (link (flush line) (wrap-into (flexarray<-) tokens.rest width)))
          (be {word w}
            (if (<= (+ line.count spaces w.count) width)
                (do (line .extend! (chain (" " .repeat spaces) w))
                    (scanning 0 tokens.rest))
                (link (flush line) (wrap-into (hey (flexarray<-) (~ .extend! w))
                                              tokens.rest width))))))))

(export fill wrap)
