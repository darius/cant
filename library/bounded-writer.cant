;; (A writer is a function taking a sink, expected to write on it.)

;; Given a writer, return a wrapped writer that will give up and
;; truncate if the output length overflows `bound`. (Mark overflow by
;; ".." at the end.)
(to ((bounded-writer<- writer bound) sink)
  (surely (<= 2 bound))
  (with-ejector
   (on (ejector)
     ;; (- bound 2) leaves space for the possible overflow mark.
     (let budget (box<- (- bound 2))) ; The length remaining
     (let ts (text-sink<-))

     ;; Send ts's latest chunk to `sink`, ejecting on hitting the bound.
     (to (cut-off)
       (let chunk ts.output-text)
       (let length chunk.count)
       (hm (when (<= length budget.^)
             (sink .display chunk)
             (budget .-= length))
           (else
             (sink .display (chunk .from 0 budget.^))
             (sink .display "..")
             ts.close
             (ejector .eject void))))

     (writer (make bounded-sink {extending sink-trait}
               (to (~ .display a)   (ts .display a)   (cut-off))
               (to (~ .write-u8 u8) (ts .write-u8 u8) (cut-off))
               (to ~.close          ts.close))))))

(export bounded-writer<-)

;; TODO it'd be nice to omit the ".." in the case where
;; the output just fits. It's sort of annoying to get ".."
;; scribbled over a perfectly good end-of-text. We could fix
;; this by an extra warning-track state.

;; TODO if you do that, consider somehow disambiguating whether
;; the output legitimately ends in ".." or whatever
