;; Discrete constraint satisfaction problems

;; A csp problem is represented by {problem v-domains constraints}
;;   v-domains: a map from variable to list of possible values
;;     (a variable is any datum, used as a key in maps of assignments)
;;   constraints: a list of {constraint vs ok?}
;;     where vs: a list of variables (all in v-domains)
;;           ok?: a predicate with the same arity as vs.count
;;     A constraint is satisfied by a v-map (a map from variables to values)
;;     when all its vs have values, and (ok? @corresponding-values) is yeah.
;; A csp problem is satisfied when all of its constraints are satisfied
;; by the same v-map.

;; Simple solve-by-search.
;; Return a list of v-maps.
;; TODO make it lazy
;; N.B. it leaves variables unassigned, when unmentioned by any constraints
(to (csp-search {problem v-domains constraints})
  (for fold [({constraint vs ok?} constraints)
             (v-maps (list<- (map<-)))]
    (for gather [(v-map v-maps)]
      (let new-vs (skip ||(v-map .maps? it) vs.nub))
      (let new-possibles (each v-domains new-vs))
      (for yeahs [(new-values (grid* @new-possibles))]
        (let extension ((map<- @(zip new-vs new-values)) .override v-map))
        (and (ok? @(each extension vs))
             extension)))))

(to (csp-solve (-- problem {problem v-domains constraints}))
  (let choices (!map<-items (for each [((~ var vals) v-domains.items)]
                              (~ var vals.range))))
  (csp-propagating problem choices)
  (csp-search {problem (map<-items (for each [((~ var val-set) choices.items)]
                                     (~ var val-set.keys)))
                       constraints}))

;; Try to prune choices. Return yeah if any pruning was done.
(to (csp-propagating problem choices)
  (let {problem v-domains _} problem)
  (let steps (iterating ||(csp-propagate-step problem choices it)
                        v-domains.domain))
  (let taken-steps (keep-until ~.none? steps))
  taken-steps.rest.some?)
  
(to (csp-propagate-step problem choices dirty-vs)
  ;; choices: a map from variable to set of possible values (a subset
  ;;   of the variable's domain). It's a mutable map.

  ;; dirty-vs: a set of variables
  
  ;; For each constraint mentioning any of dirty-vs, try to prune the
  ;; choices further by checking the constraint for all of the choices
  ;; for its variables, pruning any value that fails to appear in any
  ;; satisfying combination.

  ;; (Seems inefficient because dirty-vs doesn't track which
  ;; constraint caused the last pruning of a dirty variable, and it's
  ;; pointless to check that same constraint again?)
  
  ;; Mutate choices when we prune, and return a new dirty-vs of the
  ;; variables that got pruned.

  (let {problem _ constraints} problem)
  (let new-dirty-vs (set<-))
  
  (for each! [({constraint params ok?} constraints)]  ;; TODO hopefully we could set up to only visit relevant constraints
    (let ps params.nub)
    (when (some ||(dirty-vs .maps? it) ps)
      (let index ps.inverse)
      (let consistent-ps (for keep [(p-vals (grid* @(each ||((choices it) .keys) ps)))]
                           (ok? @(each ||(p-vals (index it)) params))))
      (let satisfying (if consistent-ps.none?
                          (each ||'() ps)
                          (transpose consistent-ps)))
      (surely (= ps.count satisfying.count))
      ;; Now keep the choices, for each variable in ps, which ever appear in consistent-ps at its position
      (for each! [(p ps) (p-vals satisfying)]
        (let new-vals p-vals.range)
        (surely (new-vals .subset-of? (choices p)))
        (when (not= new-vals.count ((choices p) .count))
          (choices .set! p new-vals)
          (new-dirty-vs .add! p)))))
  new-dirty-vs)

(export csp-search csp-solve csp-propagating csp-propagate-step)
