;; An oops handler that prints a (crude) traceback.

;; We try to call on less of the library than usual, to work better
;; when the system is borked.
(import (use 'bounded-writer) bounded-writer<-)

(to (module powers)
  (import powers out)

  (to (on-oops-traceback k evil)
    ;; For now we're going to show the complaint first, and
    ;; then the traceback with the current frame first. This
    ;; is the opposite of the traditional order, but for now
    ;; it's more important to put the most specific info first,
    ;; in case a nested error occurs during this printing.
    ;; TODO revisit this once error recovery is better
    (out .display "Oops! ")
    (complain evil)
    (out .display "Traceback:\n")
    (print-traceback k))

  (to (on-oops-complain k evil)
    (out .display "Oops!\n")
    (complain evil))

  (to (print-traceback k)
    (for each! [(frame k)] ;;TODO (reverse k) once error recovery is better
      (out .display "  ")
      (-> out (bounded-writer<- (~ .write frame) 77))
      (out .display "\n")))

  (to (complain evil)
    (may evil
      (be `(,(? text? plaint) ,@values)
        (out .display plaint)
        (out .display ": ")
        (-> out (bounded-writer<- (~ .write values) (* 80 20))))
      (else
        (out .display "Nonstandard evil: ")
        (out .write evil)))
    out.newline)

  (export on-oops-traceback on-oops-complain complain print-traceback))
