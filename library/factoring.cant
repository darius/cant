;; List prime numbers
;; TODO add some way to reset/shrink the cache

;; Return a lazy list of all primes < limit.
(to (list-primes-till limit)
  (keep-while ||(< it limit) the-primes))

;; An incremental Sieve of Eratosthenes, implicitly leaving out the
;; even numbers. (Incremental because we don't know how high we're
;; going to be asked to go.) We keep a map keyed on the next numbers
;; to cross out, for all the odd primes we've discovered so far. The
;; step size for each odd prime p is 2p, since we only consider odd
;; numbers: so for p we'll first insert 2p at the key p^2, then after
;; we reach p^2 we'll delete it and insert 2p at the key p^2+2p, then
;; afterwards at p^2+4p, etc. (We start at p^2 because smaller
;; multiples k of p will have already been scheduled for sieving on
;; the factors of k.)
;; Sometimes multiple primes are at the same key, so the value for each
;; key is a list.

;; Each odd prime found so far appears in a value of this map, in a
;; list keyed by the next candidate multiple of the prime to check.
;; E.g. 3 initially appears in (sieve 9) => '(6)
;;   (at 9, because 6 will get skipped because it's even).
;; Then after the sieve reaches 9, that key will be deleted and 3 will
;; reappear in (sieve 15), and so on afterwards. 
(let sieve (!map<-))

(to (next-sieve! step next-key)
  (sieve .set! next-key (link step (sieve .get next-key '()))))

(next-sieve! (* 2 3) (3 .** 2)) ;; Schedule the prime 3 into the sieving

(let known-primes (set<- 2 3)) ;; Set of primes found so far, for a faster prime? function
(let last-known-prime (box<- 3))

;; Return a lazy list of the added primes.
(to (sieving n)
  (hm (when (let factors (sieve .get n))
        (sieve .delete! n)
        (for each! [(step factors)]
          (next-sieve! step (+ n step))) 
        (sieving (+ n 2)))
      (else
        (known-primes .add! n)
        (last-known-prime .^= n)
        (next-sieve! (* 2 n) (n .** 2)) ;; Schedule the prime n into the sieving
        (link/lazier n ($ (sieving (+ n 2)))))))

;; XXX used to be just (link 2 3 (sieving 5))... but some uses hit the
;; primitive list-ref since this started as a nonlazy list. Then list-ref barfed.
;; I knew that could happen but sort of hoped I wouldn't have to deal with it yet.
(let the-primes (link/lazier 2 ($ (link/lazier 3 ($ (sieving 5))))))

;; Return a list of the prime factors of a positive integer.
;; TODO return a lazy list?
(to (factor n)
  (surely (integer? n))
  (surely (< 0 n))
  (if (= n 1)
      '()
      (begin trying [n (p the-primes.first) (primes the-primes.rest)]
        (if (n .even? p)
            (link p (if (= p n)
                        '()
                        (trying (n .quotient p) p primes)))
            (trying n primes.first primes.rest)))))

;; TODO better algorithm?
(to (prime? n)
  (surely (and (integer? n) (< 0 n)))
  (and (< 1 n)
       (if (<= n last-known-prime.^)
           (known-primes .maps? n)
           (begin trying [(primes the-primes)]
             (let p primes.first)
             (hm (if (n .even? p) #no)
                 (if (< (p .** 2) n) (trying primes.rest))
                 (else #yes))))))

;; List n's divisors. Comes up a few times already in project-oiler, where the
;; naivest way to write it is too slow. I doubt it's really worth including here...
(to (list-divisors n)
  ;; (keep (~ .divides? n) (1 .thru n))
  (hm (if (= n 1) '(1))
      (else
        (let powers (for each [((~ prime power) (run-encode (factor n)))]
                      (each (~ .power-of prime) (0 .thru power))))
        (for each [(factors (grid* @powers))]
          (* @factors)))))

;; E.g. (a a b b b c) => ((~ a 2) (~ b 3) (~ c 1))
(to (run-encode xs)
  (surely xs.some?)
  (begin scanning [(n 1) (x xs.first) (xs xs.rest)]
    (may xs
      (be '() `(,(~ x n)))
      (be `(,(= x) ,@rest) (scanning n.+ x rest))
      (else (link (~ x n) (scanning 1 xs.first xs.rest))))))



(to (test-me-till limit)

  ;; Like (factor n), but with simpler code just for testing.
  (to (naive-factor n)
    (surely (integer? n))
    (surely (< 0 n))
    (if (= n 1)
        '()
        (begin trying [(d 2) n]
          (if (n .even? d)
              (link d (if (= d n) '() (trying d (n .quotient d))))
              (trying d.+ n)))))

  (let primes (~.range (list-primes-till limit)))
  (for each! [(n (1 .till limit))]
    (let factors (naive-factor n))
    (surely (= factors (factor n)))
    (hm (when (primes .maps? n)
          (surely (= `(,n) factors)))
        (else
          (surely (not factors.one?))
          (surely (= n (* @factors)))
          (surely (<= @factors))
          (each! ||(surely (primes .maps? it)) factors)))))

;;(test-me-till 5000)
;;(out .print (as-list (list-primes-till 2000000)))


(export factor the-primes prime? list-primes-till list-divisors)
