;; String matching
;; Return index of first substring in DAT equal to PAT, or #no.
;; Note that (string-match "" "") = 0.

;; Based on my old scheme-data-structures code.

;; TODO this should be in runtime.cant somewhere
(let alphabet-size 256)

;; Brute force algorithm
;; TODO make this a built-in string method
(to (string-match/brute pat dat)
  (let P pat.count)
  (let j-limit (+ (- dat.count P) 1))
  (begin sliding ((j 0))
    (and (< j j-limit)
         (begin checking ((i 0))
           (hm (if (= i P)
                   j)
               (if (= (pat i) (dat (+ i j)))
                   (checking i.+))
               (else
                   (sliding j.+)))))))

;; TODO better name?
;; Boyer-Moore-Horspool algorithm
;; TODO looks different from
;; https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm
;; -- is it worse?
(to (string-matcher<- pat)
  (let m pat.count.-)
  (if (< m 0)
      (on (dat) 0)
      (do (let skip (array<-count alphabet-size pat.count))
          (for each! ((i (0 .to< m)))
            (skip .set! ((pat i) .code) (- m i)))
          ;; On a mismatch whose last char of dat == (pat i), we'll
          ;; slide right by 1 + (|pat| - i). Then that last char will
          ;; align with (pat new-i). It'll be the rightmost i in the
          ;; range with that char, because the above loop overwrites
          ;; preceding instances of the same char. We always make
          ;; progress because i's range excludes the last position of
          ;; pat.

          ;; Search
          (on (dat)
            (let D dat.count)
            (begin sliding ((i m))
              (and (< i D)
                   (begin checking ((k i) (j m))
                     (hm (unless (= (dat k) (pat j)) ;NB this can go first because of (< m 0) above
                           (sliding (+ i (skip ((dat i) .code)))))
                         (if (= j 0)
                           k)
                         (else
                           (checking k.- j.-))))))))))

(export string-matcher<- string-match/brute)
