;; Generic sorting

(make sort
  (to (~ xs)
    (sort-by itself xs))
  (to (~ xs {reverse})          ;TODO design a better keyword-args scheme
    ;; TODO sort by 'negation' of key instead, but allowing for
    ;; non-numbers. Make up a negation-wrapper type?
    (reverse (sort-by itself xs))) 
  ;; ...
  )

(to (sorted? xs)
  (or xs.none?
      (begin checking ((x xs.first) (xs xs.rest))
        (or xs.none?
            (and (<= x xs.first)
                 (checking xs.first xs.rest))))))

(to (sort-by key<- sequence)
  ;; Merge sort
  (begin sorting ((seq sequence))
    (begin splitting ((seq seq) (xs '()) (ys '()))
      (hm (if seq.some? (splitting seq.rest ys (link seq.first xs)))
          (if xs.none?  ys) ; (already sorted since ys.count <= 1 in this case)
          (else         (merge-by key<- (sorting xs) (sorting ys)))))))

(to (merge-by key<- xs ys)
  (hm (if xs.none? ys)
      (if ys.none? xs)
      (if (<= (key<- xs.first) (key<- ys.first))
        (link xs.first (merge-by key<- xs.rest ys)))
      (else
        (link ys.first (merge-by key<- xs ys.rest)))))

(to (merge xs ys)
  (merge-by itself xs ys))

(export
  sort sort-by sorted? merge merge-by)
