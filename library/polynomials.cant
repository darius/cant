;; Univariate polynomials
;; Representation: list of coefficients in decreasing order of degree
;; TODO tests
;; TODO lots of things

;; TODO always keep the constant term?
(to (poly<- coeffs)
  (skip-while (:: (= it 0)) coeffs))

;; Readable text for a poly, like "2x^2 + 42".
;; TODO like " - 5x" instead of " + -5x"
(to (show coeffs)
  (surely (poly? coeffs))
  (if coeffs.none?
      "0"
      (" + " .join (for yeahs ((c coeffs) (k (coeffs.count.- .down-thru 0)))
                     (and (not= 0 c)
                          (do (let x (may k
                                       (be 0 "")
                                       (be 1 "x")
                                       (else ("x^~w" .format k))))
                              (if (and (not= 0 k) (= 1 c))  ;; TODO less ugly
                                  x
                                  ("~w~d" .format c x))))))))

(to (poly? coeffs)
  (and (list? coeffs)
       (every number? coeffs)))

;; Value of a poly at a given x value.
;; TODO hm, maybe make this a method on lists?
(to (evaluate coeffs x)
  ;; Horner's method
  (for amass ((accum 0) (c coeffs))
    (+ (* accum x) c)))

;; Derivative with respect to x.
(to (derivative coeffs)
  (hm (if coeffs.none? '())
      (else (let n coeffs.count.-)
            (each * (coeffs .prefix n) (n .down-thru 1)))))

;; TODO: needs complex numbers, and some way to make it converge generally
;; TODO an interface that can fail (if constant poly, or no real root)
(to (find-root poly x0)
  (find-fixpoint (newton poly x0)))

;; Successive approximations to a root by Newton's method, taking x0
;; as the starting guess.
(to (newton poly x0)
  (let dpoly (derivative poly))
  (for iterating ((x x0.inexact))
    (- x (/ (evaluate poly x)
            (evaluate dpoly x)))))

;; Return the first approximate repeat in successive elements of xs.
;; (Assumes an infinite list.)
;; TODO extract this to a good place in stdlib
(to (find-fixpoint xs)
  (let `(,x0 ,xs1) `(,xs.first ,xs.rest))
  (let x1 xs1.first)
  (if (approx= x0 x1)
      x1
      (find-fixpoint xs1)))

;; TODO extract this to a good place in stdlib, with some kind of tolerance param
(to (approx= x0 x1)
  (let d (- x1 x0))
  (< d.magnitude epsilon))  ;; XXX super crude

(let epsilon 1e-4)  ;; XXX also crude

;; import Numeric.IEEE
;; approxEqIEEE x y =
;;     ( sameSignificandBits x y >= d
;;     || (x < epsilon && y < epsilon)
;;     || (isNaN x && isNaN y)
;;     )
;;   where d = (floatDigits x + 1) `div` 2

(to (poly-degree coeffs)
  (max 0 coeffs.count.-))

(to (poly+ p q)
  (poly<- (reverse (each (:: (call + it)) (zip .padded 0 (reverse p) (reverse q))))))

(to (poly* p q)
  (let accum (array<-count (+ (poly-degree p) (poly-degree q) 1)
                           0))
  (let rp (reverse p))
  (let rq (reverse q))
  (for each! (((~ i pi) rp.items))
    (for each! (((~ j pj) rq.items))
      (accum .update (+ i j) (:: (+ it (* pi pj))))))
  (poly<- (reverse accum.values)))
  
(export
  poly<- poly? show
  evaluate poly+ poly* derivative find-root
  poly-degree)
