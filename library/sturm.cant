;;; ANSI terminal input, output, and mode-setting.

(to (module powers)
  (import powers console)
  (let in console.in)
  (let out console.out)

  ;; I/O modes -- Unix specific, not ANSI

  (to (raw-mode fn)    (mode "raw" fn))
  (to (cbreak-mode fn) (mode "cbreak" fn))

  (to (mode name fn)
    (console .mode name
             (: (out .display home)
                (out .display clear-to-bottom)
                (fn)
                (out .display cursor-show)
                (out .display #\newline))))


  ;; ANSI terminal escape codes

  (let esc (text<- (rune<- 27))) ;TODO support more escapes in text literals

  (let prefix (chain esc "["))

  (to (seq text) (chain prefix text))

  (let home               (seq "H"))
  (let clear-to-bottom    (seq "J"))
  (let clear-screen       (chain prefix "2J" home))
  (let clear-to-right     (seq "K"))

  (let cursor-pos-save    (seq "s"))
  (let cursor-pos-restore (seq "u"))
  (let cursor-show        (seq "?25h"))
  (let cursor-hide        (seq "?25l"))

  (to (sgr num)
    (seq ("~wm" .format num)))

  (let [screen-height screen-width] [25 80]) ;TODO find out for real


  ;; Rendering

  (to (render scene)
    (let cursor-seen? (box<- #no))
    (out .display home-and-hide)
    (paint cursor-seen? default-state scene)
    (out .display clear-to-bottom)
    (when cursor-seen?.^
      (out .display restore-and-show))
    ;; TODO do we need to flush the output?
    ;; TODO need to reset styles so they go away on program exit?
    )

  (let home-and-hide    (chain home cursor-pos-save cursor-hide))
  (let restore-and-show (chain cursor-pos-restore cursor-show))
  (let cr-lf            (chain clear-to-right "\r\n"))

  (make state<-
    (to (and (~ fg bg styles) tuple)
      (make state
        (to ~.reveal            tuple)
        (to (~ .set-fg code)    (state<- code bg   styles))
        (to (~ .set-bg code)    (state<- fg   code styles))
        (to (~ .add-style code) (state<- fg   bg   (styles .or code))))))

  (let default-state (state<- 39 49 0))

  (to (screen-state<-)
    (let fg     (box<- 39))
    (let bg     (box<- 49))
    (let styles (box<- 0))
    (to (_ .establish! state)
      (let (~ want-fg want-bg want-styles) state.reveal)
      (unless (= styles.^ want-styles)
        (out .display (sgr 0))
        (fg .^= 39)
        (bg .^= 49)
        (for each! ((s '(1 4 5 7)))
          (unless (= 0 (want-styles .and (1 .<< s)))
            (out .display (sgr s))))
        (styles .^= want-styles))
      (unless (= want-fg fg.^)
        (out .display (sgr want-fg))
        (fg .^= want-fg))
      (unless (= want-bg bg.^)
        (out .display (sgr want-bg))
        (bg .^= want-bg))))

  (let screen-state (screen-state<-))

  (to (paint cursor-seen? wanted-state scene)
    ;; TODO: skip any terminal codes in the scene's texts/runes
    (may scene
      (be (? text?)
        (screen-state .establish! wanted-state)
        (for each! ((rune scene))
          (out .display (if (= rune #\newline) cr-lf rune))))
      (be (? rune?)
        (screen-state .establish! wanted-state)
        (out .display (if (= scene #\newline) cr-lf scene)))
      (be (? (-> (or (list? it) (array? it))))
        (for each! ((subscene scene.values))
          (paint cursor-seen? wanted-state subscene)))
      (else
        (scene .paint cursor-seen? wanted-state))))

  (to (cursor .paint cursor-seen? _)
    (out .display cursor-pos-save)
    (cursor-seen? .^= #yes))

  (to (foreground-color<- code)
    (to (foreground-color subscene)
      (to (fg-painter .paint cursor-seen? wanted-state)
        (paint cursor-seen? (wanted-state .set-fg code) subscene))))

  (to (background-color<- code)
    (to (background-color subscene)
      (to (bg-painter .paint cursor-seen? wanted-state)
        (paint cursor-seen? (wanted-state .set-bg code) subscene))))

  (to (style<- code)
    (let mask (1 .<< code))
    (to (style subscene)
      (to (style-painter .paint cursor-seen? wanted-state)
        (paint cursor-seen? (wanted-state .add-style mask) subscene))))

  (let `(,black ,red ,green ,yellow ,blue ,magenta ,cyan ,white)
    (each foreground-color<- (30 .thru 37)))

  (let `(,on-black ,on-red ,on-green ,on-yellow ,on-blue ,on-magenta ,on-cyan ,on-white)
    (each background-color<- (40 .thru 47)))

  (let bold       (style<- 1))
  (let underlined (style<- 4))
  (let blinking   (style<- 5))
  (let inverted   (style<- 7))

  (to (unstyled scene) scene)
  

  ;; Keyboard input.
  ;; Dear users, don't try to read a bare escape-key press, because this
  ;; code can't tell the difference from a key that sends a longer escape
  ;; sequence. I once had logic for that, which always broke in one OS or
  ;; another.
  ;; We pretend control-X is the escape key, sheesh.
  ;; TODO optional timeout

  (to (ctrl ch)
    (- ch.uppercase 64))

  (let key-map
    (map<- (~ (text<- (ctrl #\X))   'esc) ;XXX a hack until the timeout works
           (~ (text<- (rune<- 127)) 'backspace)

           (~ (chain esc "[1~")  'home)   (~ (chain esc "[H") 'home)
           (~ (chain esc "[2~")  'ins)
           (~ (chain esc "[3~")  'del)
           (~ (chain esc "[4~")  'end)    (~ (chain esc "[F") 'end)
           (~ (chain esc "[5~")  'pg-up)
           (~ (chain esc "[6~")  'pg-dn)
           (~ (chain esc "[11~") 'f1)
           (~ (chain esc "[12~") 'f2)
           (~ (chain esc "[13~") 'f3)
           (~ (chain esc "[14~") 'f4)
           (~ (chain esc "[15~") 'f5)
           (~ (chain esc "[17~") 'f6)
           (~ (chain esc "[18~") 'f7)
           (~ (chain esc "[19~") 'f8)
           (~ (chain esc "[20~") 'f9)
           (~ (chain esc "[21~") 'f10)
           (~ (chain esc "[23~") 'f11)
           (~ (chain esc "[24~") 'f12)
           (~ (chain esc "[Z")   'shift-tab)

           (~ (chain esc "[A") 'up)       (~ (chain esc "[OA") 'up)
           (~ (chain esc "[B") 'down)     (~ (chain esc "[OB") 'down)
           (~ (chain esc "[C") 'right)    (~ (chain esc "[OC") 'right)
           (~ (chain esc "[D") 'left)     (~ (chain esc "[OD") 'left)
           ))

  (let key-map-prefixes
    (~.range (for gather ((full-key key-map.keys))
               (for each ((i (1 .till full-key.count)))
                 (full-key .slice 0 i)))))

  (let key-stack (flexarray<-))

  (to (get-key-unmapped)
    (if key-stack.some?
        key-stack.pop!
        (hey in.read-rune
             (-> (surely (not (zilch? it))))))) ;shouldn't ever happen in raw/cbreak modes

  (make get-key
    (to (~)
      (let keys (flexarray<- (get-key-unmapped)))
      (begin matching ()
        (let t (text<-list keys.values))
        (hm (or (key-map .get t))
            (when (key-map-prefixes .maps? t)
              (keys .push! (get-key-unmapped))
              (matching))
            (else
              (key-stack .extend! (reverse keys.values)) ;TODO use a FIFO instead of this reversed LIFO
              key-stack.pop!))))
    ;; Silly conveniences:
    (to ~.uppercase ((get-key) .uppercase))
    (to ~.lowercase ((get-key) .lowercase)))

  (export
    raw-mode cbreak-mode
    screen-height screen-width
    get-key ctrl
    render
    cursor
    bold underlined blinking inverted unstyled
    black red green yellow blue magenta cyan white
    on-black on-red on-green on-yellow on-blue on-magenta on-cyan on-white))
