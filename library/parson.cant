;; Create Parson parsers from their concrete language-independent syntax.
;; XXX leaving out regexes, fnord, anonymous start

(import (use 'parson-core)
  invert capture either then feed-list feed push seclude delay
  maybe many at-least-1
  fail empty end skip-1 take-1 any-1 skip-any-1 lit-1 lit drop
  parse)


;; {lifted refs p<-} is a 'lifted' parser.
;; - refs: A set of symbols, the names of grammar rules used by this parser.
;;     This is used to warn about undefined rules before you try to run anything.
;;     We might also warn about unused rules with this, though currently we don't.
;; - p<-: A function (p<- builder rules subs) to an un-lifted parser.
;;   - builder: Tells how to turn different kinds of Parson literals into parsers.
;;   - rules: The map from rule-name to un-lifted parser. It's mutable,
;;       to resolve recursion.
;;   - subs: Substitutions, i.e. the map from symbol to un-lifted parser,
;;       which is passed in from the client to link this Parson grammar to
;;       semantic actions and to other grammars.

(to (rule-ref<- name)
  {lifted (set<- name)
          (on (_ rules _)
            (delay (: (rules name))))})

(to (constant<- p)
  {lifted (set<-)
          (on (_ _ _) p)})

(to (lift peg-op)
  (feed-list
   (on (lifted)
     {lifted (union-over (for each (({lifted refs _} lifted))
                           refs))
             (on (builder rules subs)
               (peg-op @(for each (({lifted _ p<-} lifted))
                          (p<- builder rules subs))))})))

(to (literal<- text)
  {lifted (set<-)
          (on (builder _ _) (builder .literal text))})

(to (keyword<- text)
  {lifted (set<-)
          (on (builder _ _) (builder .keyword text))})

(to (unquote<- name)
  {lifted (set<-)
          (on (_ _ subs) (subs name))})


;; The grammar for Parson grammars

(let hug (feed-list itself))

(to (push-lit<- text)
  (constant<- (push text)))

(to (name-rune? rune) (or rune.letter?       (= rune #\_)))
(to (word-rune? rune) (or rune.alphanumeric? (= rune #\_)))

(let word-boundary (invert (skip-1 word-rune?)))

(let skip-line
  (delay (: (either (lit-1 #\newline)
                    (then skip-any-1 skip-line)
                    empty))))

(let whitespace
  (at-least-1 (either (skip-1 ~.whitespace?)
                      (then (lit-1 #\#) skip-line))))

(let __ (maybe whitespace))

(let name 
  (seclude
   (then (capture (then (skip-1 name-rune?)
                        (many (skip-1 word-rune?))))
         (feed ~.symbol)
         __)))

(let word
  (seclude
   (then (capture (at-least-1 (skip-1 word-rune?)))
         (feed ~.symbol)
         __)))

(to (text-quoted-by q-rune)
  (let q (lit-1 q-rune))
  (let quoted-rune
    (then (either (lit-1 #\\) (invert q))
          any-1))
  (seclude
   (then q (many quoted-rune) q __
         (feed-list (-> ("" .join it))))))

(let qtext  (text-quoted-by #\'))
(let dqtext (text-quoted-by #\"))

(let pe
  (delay (: (seclude
             (either (then term (maybe (then (lit "|") __ pe (lift either))))
                     (lift (: empty)))))))

(let term
  (delay (: (seclude
             (then factor (maybe (then term (lift then))))))))

(let factor
  (delay (: (seclude
             (either (then (lit "!") __ factor (lift invert))
                     (then primary
                           (either (then (lit "**") __ primary (lift many))
                                   (then (lit "++") __ primary (lift at-least-1))
                                   (then (lit "*") __ (lift many))
                                   (then (lit "+") __ (lift at-least-1))
                                   (then (lit "?") __ (lift maybe))
                                   empty)))))))

(let primary
  (seclude
   (either (then (lit "(") __ pe (lit ")") __)
           (then (lit "[") __ pe (lit "]") __   (lift seclude))
           (then (lit "{") __ pe (lit "}") __   (lift capture))
           (then qtext (feed literal<-))
           (then dqtext (feed keyword<-))
           (then (lit ":") (either (then word  (feed unquote<-))
                                   (then qtext (feed push-lit<-))))
           (then name (feed rule-ref<-)))))

(let rule
  (seclude
   (then name
         (either (then (lit "=") __ pe)
                 (then (lit ":") whitespace
                       (seclude (then pe (lift seclude)))))
         (lit ".") __
         hug)))

(let parson-grammar
  (then __ (at-least-1 rule) end))


;; Semantics of Parson grammars

(make none)

;; TODO use map.override once that's efficient
(to (union-map<- map backup)
  ;; TODO: rest of map interface?
  (on (key)
    (let value (map .get key none))
    (if (= value none)
        (backup key)
        value)))

(to (grammar<- text)
  (let skeletons (parse-grammar text))
  (let builder default-builder)         ;TODO parameterize
  (on (subs)
    (let full-subs (union-map<- subs default-subs))
    (let rules (for !map-by ((name (each ~.first skeletons)))
                 (delay (: (rules name)))))
    (for each! ((`(,name ,{lifted _ p<-}) skeletons))
      (rules .set! name (p<- builder rules full-subs)))
    rules))

(let default-subs
  (map<- (~ 'skip skip-any-1)
         (~ 'anyone any-1) ;TODO just drop this now that we have {skip}?
         (~ 'letter (skip-1 ~.letter?))
         (~ 'digit (skip-1 ~.digit?))
         (~ 'end end)
         (~ 'hug hug)
         (~ 'join (feed chain))
         (~ 'drop drop)
         (~ 'whitespace (skip-1 ~.whitespace?))
         (~ 'count (seclude
                    (then (capture (at-least-1 (skip-1 ~.digit?))) ;; TODO no leading 0s
                          (feed ~.number))))
         (~ 'integer (seclude
                      (then (capture (then (maybe (lit-1 #\-))
                                           (at-least-1 (skip-1 ~.digit?))));; TODO no leading 0s
                            (feed ~.number))))
         ;; TODO: more
         ))

(make default-builder
  (to (~ .literal text) (lit text))
  (to (~ .keyword text) (then (lit text) word-boundary))
  (to (~ .match regex-text) (surely #no))  ;TODO
  )

(to (parse-grammar text)
  (let outcome (parse parson-grammar text))
  (let skeletons outcome.?results)

  (unless skeletons
    (oops "Ungrammatical grammar" outcome.display))

  (let lhses (bag<- (each ~.first skeletons)))
  (let duplicates (for where ((count lhses)) (< 1 count)))
  (when duplicates.some?
    (oops "Multiply-defined rules" (sort duplicates)))

  (let all-refs (union-over (for each ((`(,_ ,{lifted refs _}) skeletons))
                              refs)))
  (let undefined (all-refs .difference lhses))
  (when undefined.some?
    (oops "Undefined rules" (sort undefined.keys)))

  skeletons)

;; An amenity for concise code for the simplest parsers.
(to (like template)
  ;; TODO inefficient/error-prone to build a string and then parse it
  (let grammar (grammar<- (chain "loop: " template " :end.\n"
                                 "_ = :whitespace*.")))
  (let peg ((grammar (map<-)) 'loop))
  (make parser
    (to (~ text)        ((parse peg text) .results))
    (to (~ .parse text) (parse peg text))))

(export grammar<- parse feed push like)
