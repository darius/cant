;; Regular expression matching.

;; Does regex `re` match `runes`? (Anchored matching at both ends.)
;; Algorithm: Antimirov derivatives.
(to (regex-match re runes)
  (some nullable? (amass step `(,re) runes)))

(to (step res rune)
  (~.nub (gather (after rune) res)))

(to (nullable? re)
  (may re
    (be {empty}      #yes)
    (be {unit _}     #no)
    (be {anyone}     #no)
    (be {either r s} (or (nullable? r) (nullable? s)))
    (be {then r s}   (and (nullable? r) (nullable? s)))
    (be {star _}     #yes)))

(to (after rune)
  (to (walk re)
    (may re
      (be {empty}      '())
      (be {unit c}     (if (= c rune) '({empty}) '()))
      (be {anyone}     '({empty}))
      (be {either r s} (chain (walk r) (walk s)))
      (be {then r s}   (let dr+s (each ||(then it s) (walk r)))
                       (if (nullable? r) (chain dr+s (walk s)) dr+s))
      (be {star r}     (each ||(then it re) (walk r))))))

;; Regex constructors

(let empty {empty})
(to (lit-rune c) {unit c})              ;TODO rename
(let anyone {anyone})
(to (either r s) {either r s})
(to (then r s)   (may r
                   (be {empty} s)
                   (else {then r s})))
(to (star r)     {star r})

;; Extras

(to (maybe r) (either empty r))
(to (plus r)  (then r (star r)))

(to (literal text)
  (fold then (each lit-rune text) empty))

(to (one-of text)
  (surely text.some?) ; since we don't currently have a {fail} regex type
  (fold1 either (each lit-rune text.nub)))

;; Concrete syntax

(import (use 'regex-parse) regex-parser<-)

(let regex-parse
  (regex-parser<- (export
                    empty literal star then either plus maybe one-of anyone)))

(export
  regex-match regex-parse
  empty lit-rune literal either then star
  plus maybe one-of anyone)
