;; Immutable sorted sets

(to (sset<- @xs)
  (sset<-list xs))

(to (sset<-list xs)
  ;; TODO don't need the full sset-insert here
  ;;  -- maybe worth adding a "sort -u" equivalent to sort.cant
  (for foldr ((x (sort xs)) (ss '()))
    (sset-insert ss x)))

(to (sset-elements xs)
  xs)

(to (sset-insert xs x)
  (sset-union `(,x) xs))                ;TODO specialize

(to (sset-remove xs unwanted)
  (may xs
    (be '() '())
    (be (link x1 xs1)
      (if (= x1 unwanted)
          xs1
          (link x1 (sset-remove xs1 unwanted))))))

;; Not quite the same as sort.cant's merge, since we dedupe here.
(to (sset-union xs ys)
  (hm (if xs.none? ys)
      (if ys.none? xs)
      (else (may (xs.first .compare ys.first)
              (be -1 (link xs.first (sset-union xs.rest ys)))
              (be  0 (link xs.first (sset-union xs.rest ys.rest)))
              (be  1 (link ys.first (sset-union xs ys.rest)))))))

(to (sset-difference xs ys)
  (hm (if xs.none? '())
      (if ys.none? xs)
      (else (may (xs.first .compare ys.first)
              (be -1 (link xs.first (sset-difference xs.rest ys)))
              (be  0 (sset-difference xs.rest ys.rest))
              (be  1 (sset-difference xs ys.rest))))))

;; TODO intersect

(export
  sset<- sset<-list sset-elements sset-insert sset-remove sset-union sset-difference)
