;; Text search:
;; Return the index of the first slice in DAT equal to PAT, or #no.
;; Note that ((text-finder<- "") "") = 0.

;; TODO this should be in runtime.cant somewhere
(let alphabet-size 256)

;; TODO better name?
;; Boyer-Moore-Horspool algorithm
;; TODO looks different from
;; https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm
;; -- is it worse?
(to (text-finder<- pat)
  (let m pat.count.-)
  (if (< m 0)
      (on (dat) 0)
      (do (let skip (array<-count alphabet-size pat.count))
          (for each! [(i m.till)]
            (skip .set! ((pat i) .code) (- m i)))
          ;; On a mismatch whose last rune of dat == (pat i), we'll
          ;; slide right by 1 + (|pat| - i). Then that last rune will
          ;; align with (pat new-i). It'll be the rightmost i in the
          ;; range with that rune, because the above loop overwrites
          ;; preceding instances of the same rune. We always make
          ;; progress because i's range excludes the last position of
          ;; pat.

          ;; Search
          (on (dat)
            (let D dat.count)
            (begin sliding [(i m)]
              (and (< i D)
                   (begin checking [(k i) (j m)]
                     (hm (unless (= (dat k) (pat j)) ;NB this can go first because of (< m 0) above
                           (sliding (+ i (skip ((dat i) .code)))))
                         (if (= j 0)
                           k)
                         (else
                           (checking k.- j.-))))))))))

(export text-finder<-)
