;; Highly-divisible triangular number

(import (use 'factoring) factor list-divisors)

(to (count-divisors n)
  (let powers (run-lengths (factor n)))
  (* @(each ~.+1 powers)))
  ;; eg 12 = 2^2 * 3^1; 1 2 3 4 6 12 
  ;; So it's 6 divisors, the product of the incremented powers, (2+1)*(1+1)

;; E.g. (a a b b b c) => (2 3 1)
(to (run-lengths xs)
  (hm (if xs.none? '())
      (else (begin scanning [(n 1) (x xs.first) (xs xs.rest)]
              (may xs
                (be '() `(,n))
                (be `(,(= x) ,@rest) (scanning n.+1 x rest))
                (else (link n (scanning 1 xs.first xs.rest))))))))

(for each! [(n (1 .thru 42))]  ;; Quickie test of count-divisors
  (surely (= (count-divisors n)
             (~.count (list-divisors n)))))

(let triangle-numbers (amassing$ + 1 2.and-up))

(let highly-divisibles (for keep$ [(n triangle-numbers)]
                         (< 500 (count-divisors n))))
(out .print highly-divisibles.first)
