;; Digit cancelling fractions

(import (use 'ratio) ratio<- ratio-show)
(let r* ((use 'ratio) '*))  ;; man this is a pain

;; There are exactly four non-trivial examples of this type of
;; fraction, less than one in value, and containing two digits in the
;; numerator and denominator.

;; If the product of these four fractions is given in its lowest
;; common terms, find the value of the denominator.

(to (canceling-fraction num den)
  (let nr num.digits.range)
  (let dr den.digits.range)
  (may ((dr .difference nr) .keys)
    (be `(,(? ~.positive? ddig))
      (may ((nr .intersect dr) .keys)
        (be `(,(? ~.positive? common))
          (may ((nr .difference dr) .keys)
            (be `(,ndig)
              (and (= (ratio<- ndig ddig) (let r (ratio<- num den)))
                   (out .say "Found ~d\n" (ratio-show r))
                   r))         
            (else #no)))
        (else #no)))
    (else #no)))
;; TODO so much nesting and else-no's. We could use a bigger 'may' on all three
;; venn-diagram expressions at once, but that's slower with no short-circuiting.
;; Design better pattern-matching/control-flow constructs?
  
(let fractions (for yeahs ((pair ((11 .thru 99) .k-sets 2)))
                 (canceling-fraction @pair)))
(out .say "Product: ~d\n" (ratio-show (foldr r* fractions (ratio<- 1))))
