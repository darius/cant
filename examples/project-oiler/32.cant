;; Pandigital products

;; The product 7254 is unusual, as the identity, 39 Ã— 186 = 7254,
;; containing multiplicand, multiplier, and product is 1 through 9
;; pandigital.

;; Find the sum of all products whose multiplicand/multiplier/product
;; identity can be written as a 1 through 9 pandigital.

"
Strategies:

1. List all numbers up to 5 digits, skip repeat-digit ones, factor
what's left, look for pandigital products.

2. List first factors, list second factors > the first (and using
fresh digits), check the product, save good ones in a set.

The last step of #1 seems more of a pain than #2. So let's try #2.

3-digit * 3-digit is > 10000, for total 10-digit, too many.
2-digit * 3-digit is > 12*123 = 1476, for 9 digits, just right.
1-digit * 4-digit    > 1*2345 = 2345, also 9 digits.
"

(import (use 'factoring) list-divisors)
(import (use "utils") count<-digits)

(to (answer-2)
  (let products (set<-))

  (let all-digits ((1 .thru 9) .list))
  (for each! ((a-b-combos (all-digits .combinations 5)))
    (let p-digits (those (:: (not (a-b-combos .find? it)))
                         all-digits))
    (for each! ((a-b-digits a-b-combos.permutations))
      (for each! ((split '(1 2)))
        (let a (count<-digits (a-b-digits .slice 0 split)))
        (let b (count<-digits (a-b-digits .slice split)))
        (let product (* a b))
        (when (= p-digits (sort product.digits))
          (out .say "found ~w * ~w = ~w\n" a b product)
          (products .add! product)))))

  (sum products.keys))

;; So strategy #2 worked, but coming back to #1, it turns out to be
;; a bit nicer and a bit faster, actually:
(to (answer-1)
  (let all-digits ((1 .thru 9) .list))
  (for sum-by ((p-combos (all-digits .combinations 4))) ;; (5-digit products can't come up, d'oh)
    (let m-digits (those (:: (not (p-combos .find? it)))
                         all-digits))
    (for sum-by ((p-digits (p-combos .permutations)))
      (let p (count<-digits p-digits))
      (or (for some ((a (list-divisors p)))
            (and (< a 100) ;; redundant quick filter
                 (do (let b (p .quotient a))
                     (and (= m-digits (sort (chain a.digits b.digits)))
                          p))))
          0))))

(out .print (answer-1))
