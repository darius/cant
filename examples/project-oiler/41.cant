;; Pandigital prime

(import (use 'factoring) prime?)
(import (use "utils") lex-permutation)
(import (use "utils") detect count<-digits)

(to (answer)
  (for some ((nd (9 .down-thru 1))) ;; n digits
    (let digsum (sum (1 .thru nd)))
    (and (not (3 .divides? digsum)) ;; (Every permutation would be a multiple of 3)
         (find-largest-prime nd))))
  
(to (find-largest-prime nd)
  ;; List permutations of 1..9 in decreasing order; return the first good one.
  ((~ .get 0) (for yeahs/lazy ((i (((nd .!) .-) .down-thru 0)))
                (let n (count<-digits (my-lex-permutation nd i)))
                (out .say "prime? ~w\n" n)
                (and (prime? n) n))))

(to (my-lex-permutation nd i)
  ;; +1 to each digit because my permutations are of (1 .thru nd) instead of (0 .till nd)
  (each ~.+ (lex-permutation nd i)))

(out .print (answer)) ;; 7652413
