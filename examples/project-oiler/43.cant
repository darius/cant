(import (use 'factoring) the-primes)
(import (use "utils") count<-digits)

;; We'll take a constraint-solver approach: find 3-digit tiles for each
;; position which are consistent with their neighbors, then search for
;; global solutions that fit the tiles together.

(let triples ((0 .thru 9) .permutations 3))

(let tiles (flexarray<-))
(for each! ((p (link 1 (the-primes .first-n 7))))
  (tiles .push! (for those ((triple triples))
                  (and (p .divides? (count<-digits triple))
                       (or tiles.none?
                           ((each ~.rest tiles.last) .find? triple.but-last))))))

;; TODO For the enumeration we'd like to have for each position a map
;; from an overlap to a list of next digit candidates. But we'll just
;; use the tile array we have, and filter as we search.

(let solutions
  (for gather ((last-tile tiles.last))
    (begin extending ((place (- tiles.count 2))
                      (suffix last-tile)) ;; a partial solution from place+1 rightward
      (hm (when (< place 0)
            (out .say "found ~w\n" suffix)
            `(,suffix))
          (else (for gather ((next-digit
                              (~.nub (for yeahs ((t (tiles place)))
                                       (and (suffix .prefix? t.rest)
                                            (not (suffix .find? t.first))
                                            t.first)))))
                  (extending place.- (link next-digit suffix))))))))

(out .say "sum: ~w\n" (sum-by count<-digits solutions))
