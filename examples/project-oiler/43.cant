(import (use 'factoring) the-primes)

;; We'll take a constraint-solver approach: find 3-digit tiles for
;; each position which satisfy the divisor condition, then search for
;; global solutions that fit the tiles together.

;; Originally the tile-building phase also propagated the constraints
;; from the leftward neighbors, but that was actually a bit slower.

(let triples ((0 .thru 9) .k-permutations 3))
(let tiles (~.array (for each [(p (link 1 (the-primes .prefix 7)))]
                      (keep (compose (~ .even? p) count<-digits) triples))))

(let solutions
  (for gather [(last-tile tiles.last)]
    (begin extending [(place (- tiles.count 2))
                      (suffix last-tile)] ;; a partial solution from place+1 rightward
      (hm (when (< place 0)
            (out .say "found ~w\n" suffix)
            `(,suffix))
          (else
            (let candidates (for yeahs [(t (tiles place))]
                              (and (suffix .prefix? t.rest)
                                   (not (suffix .find? t.first))
                                   t.first)))
            (for gather [(next-digit candidates.nub)]
              (extending place.-1 (link next-digit suffix))))))))

(out .say "sum: ~w\n" (sum-by count<-digits solutions)) ;; 16695334890
