;; Pandigital multiples

(import (use "utils") lex-permutation detect)

(to (answer)
  ;; List permutations of 1..9 in decreasing order; return the first good one.
  (detect pandigital-multiple? (for each/lazy ((i (((9 .!) .-) .down-thru 0)))
                                 (my-lex-permutation 9 i))))

;; TODO ugh we've needed this hack twice now
(to (my-lex-permutation nd i)
  ;; +1 to each digit because my permutations are of (1 .thru nd) instead of (0 .till nd)
  (each ~.+ (lex-permutation nd i)))

(to (pandigital-multiple? digits)
  (for some ((i '(1 2 3 4)))
    (let n (count<-digits (digits .from 0 i)))
    (begin checking ((target (* 2 n)) (rest (digits .from i)))
      (or rest.none?
          (and (rest .prefix? (let td target.digits))
               (checking (+ target n) (rest .from td.count)))))))

(out .print (count<-digits (answer))) ;; 932718654
