;; Pandigital multiples

(to (answer)
  ;; List permutations of 1..9 in decreasing order; return the first good one.
  (detect pandigital-multiple? (for each/lazy ((i (((9 .!) .-) .down-thru 0)))
                                 (lex-permutation 9 i))))

(to (pandigital-multiple? digits)
  (surely (= 9 digits.count))
  (for some ((i '(1 2 3 4)))
    (let n (count<-digits (digits .slice 0 i)))
    (begin checking ((j i)   ;; index into digits
                     (k 2))  ;; multiplier
      (hm (if (= j 9) #yes)
          (if (> j 9) #no)
          (else (let multiple (reverse ((* k n) .digits)))
                (let next-j (+ j multiple.count))
                (and (= multiple (digits .slice j next-j))
                     (checking next-j k.+)))))))

;; TODO adapted from hamming-codes.cant
(to (count<-digits digits)
  (for foldl ((total 0) (digit digits))
    (+ (* 10 total) digit)))

;; TODO copied from advent-of-code utils.cant
;; (detect ~.even? '(3 1 4 1 5 9 2 6)) = 4
;; TODO is this worth it? sometimes what you want is the yeahs equivalent
;; TODO #no if not found?
(to (detect keep? xs)
  ((those/lazy keep? xs) .first))

;; copied from 24.cant
(to (lex-permutation n i)
  (let i-in-mixed-radix (reverse (i .digits (as-list (1 .thru n)))))   ;; TODO ugly to need as-list
  (let cvt (i-in-mixed-radix .pad-left n 0))
  (let digits-free (flexarray<-list (1 .thru n)))  ;; changed from 24.cant
  (let result (flexarray<-))
  (for each! ((j n.till))
    (result .push! (digits-free .pop! (cvt j))))
  result.values)



;;(out .print (pandigital-multiple? '(1 9 2 3 8 4 5 7 6)))

(out .print (answer)) ;; 932718654
