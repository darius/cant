;; Pandigital multiples

(import (use "utils") permuter<- detect)

;; List permutations of 1..9 in descending order; return the first good one.
(to (v1-answer)
  ;; TODO we could just use the list.permutations method if it were lazy
  (let descending-perm (permuter<- (9 .down-thru 1)))
  (detect pandigital-multiple? (each$ descending-perm 9.!.till)))

(to (pandigital-multiple? digits)
  (for some [(i '(1 2 3 4))]
    (let n (count<-digits (digits .from 0 i)))
    (begin checking [(target (* 2 n)) (rest (digits .from i))]
      (or rest.none?
          (and (rest .prefix? (let td target.digits))
               (checking (+ target n) (rest .from td.count)))))))

;; Not so brute-force. For each possible base-prefix length, find the
;; first base prefix that works, trying prefixes in descending order.
(to (v2-answer)
  (max @(for yeahs [(length (1 .thru 4))]
          (some ?build-pandigital ((9 .down-thru 1) .k-permutations length)))))

(to (?build-pandigital base-digits)
  (let base (count<-digits base-digits))
  (begin building [(i 2) (prefix base-digits)]
    (and (not (prefix .find? 0))
         prefix.distinct?
         (may (compare prefix.count 9)
           (be '> #no)
           (be '= prefix)
           (be '< (building i.+ (chain prefix ((* i base) .digits))))))))

;;(let result (v1-answer))
(let result (v2-answer))
(out .print (count<-digits result)) ;; 932718654
