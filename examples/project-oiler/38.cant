;; Pandigital multiples

(import (use "utils") lex-permutation count<-digits detect)

(to (answer)
  ;; List permutations of 1..9 in decreasing order; return the first good one.
  (detect pandigital-multiple? (for each/lazy ((i (((9 .!) .-) .down-thru 0)))
                                 (lex-permutation 9 i))))

(to (pandigital-multiple? digits)
  (surely (= 9 digits.count))
  (for some ((i '(1 2 3 4)))
    (let n (count<-digits (digits .slice 0 i)))
    (begin checking ((target (* 2 n)) (rest (digits .slice i)))
      (or rest.none?
          (and (rest .prefix? (let td target.digits))
               (checking (+ target n) (rest .slice td.count)))))))

;;(out .print (pandigital-multiple? '(1 9 2 3 8 4 5 7 6)))

(out .print (count<-digits (answer))) ;; 932718654
