;; Pandigital multiples

(import (use "utils") lex-permutation count<-digits detect)

(to (answer)
  ;; List permutations of 1..9 in decreasing order; return the first good one.
  (detect pandigital-multiple? (for each/lazy ((i (((9 .!) .-) .down-thru 0)))
                                 (lex-permutation 9 i))))

(to (pandigital-multiple? digits)
  (surely (= 9 digits.count))
  (for some ((i '(1 2 3 4)))
    (let n (count<-digits (digits .slice 0 i)))
    (begin checking ((j i)   ;; index into digits
                     (k 2))  ;; multiplier
      (hm (if (= j 9) #yes)
          (if (> j 9) #no)
          (else (let multiple ((* k n) .digits))
                (let next-j (+ j multiple.count))
                (and (= multiple (digits .slice j next-j))
                     (checking next-j k.+)))))))

;;(out .print (pandigital-multiple? '(1 9 2 3 8 4 5 7 6)))

(out .print (answer)) ;; 932718654
