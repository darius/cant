;; Circular primes

(import (use 'factoring) list-primes-till prime?)

(to (v1-answer max-ndigits)
  (for those ((p (list-primes-till (10 .** max-ndigits))))
    (-> p.text rotations ~.rest (:: (every (compose prime? ~.number) it)))))

;; "abc" -> ("abc" "bca" "cab")
(to (rotations xs)
  ((chain xs xs.but-last) .slices xs.count))

;; Faster version: only enumerate numbers using the digits 1,3,7,9.
(to (v2-answer max-ndigits)
  (link 2 5 (for gather ((nds (1 .thru max-ndigits)))
              (for gather ((combo ("1379" .bag-combinations nds)))
                (for yeahs ((digits combo.permutations.nub))
                  (and (-> digits.text rotations (:: (every (compose prime? ~.number) it)))
                       digits.text.number))))))

;;(let circulars (v1-answer 6))
(let circulars (v2-answer 6))
(out .say "circulars: ~w\n" (sort circulars))
(out .print circulars.count)
