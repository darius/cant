;; Circular primes

(import (use 'factoring) list-primes-till prime?)

(to (answer limit)
  (let circulars (those circular? (list-primes-till limit)))
  (out .say "circulars: ~w\n" circulars)
  circulars.count)

(to (circular? p)
  (-> p.text rotations ~.rest (:: (every (compose prime? ~.number) it))))

(to (rotations xs)
  (surely xs.some?)
  (for each ((i xs.count.till))
    (chain (xs .slice i) (xs .slice 0 i))))

;;(out .print (answer 100))
(out .print (answer 1000000)) ;; 55
