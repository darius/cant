;; Reciprocal cycles
;; Find the value of d < 1000 for which 1/d contains the longest
;; recurring cycle in its decimal fraction part.

(to (answer)
  (max-by cycle-length (2 .till 1000)))

(to (cycle-length d)
  (find-repeat-length (long-reciprocal-states d)))

;; Compute the infinite decimal reciprocal of denom by long division.
;; List the states we go through in doing this.
(to (long-reciprocal-states denom)
  (begin dividing [(numer 1)]
    (let (~ digit remainder) (numer ./mod denom))
    (link$ remainder
           ($ (dividing (* remainder 10))))))

;; Find the first repeated state and return the length of the state cycle.
(to (find-repeat-length states)
  (let index (!map<-)) ;; Map from state to the last index where it previously occurred
  (begin scanning [(pairs states.items)]
    (let (~ i state) pairs.first)
    (may (index .get state)
      (be #no
        (index .set! state i)
        (scanning pairs.rest))
      (be prev-i
        (- i prev-i)))))

(out .print (answer)) ;; 983
