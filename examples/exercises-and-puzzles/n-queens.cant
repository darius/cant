;; The N-queens problem as a binary decision diagram.

(import (use 'bdd)
  satisfy-first bdd-and bdd-or match-map)

(to (main args)
  (may args.rest
    (be `(,n) (queens n.number))
    (else     (out .say "Usage: ~d board-size\n" (args 0)))))

;; If possible, place n queens on an n*n board with none attacking any other.
(to (queens n)
  (may (satisfy-first (queens-problem n) 1)
    (be #no (out .display "none\n"))
    (be map (print-board n map))))

(to (print-board n map)
  (for each! [(row (board<- n))]
    (for each! [(var row)]
      (out .say "~d " (".Q" (map var))))
    out.newline))

(to (queens-problem n)
  (bdd-and @(for each [(r n.till)]
              (bdd-or @(for each [(c n.till)]
                         (place-queen n r c))))))

(to (place-queen n r c)

  (let map (!map<-))

  (to (exclude rr cc)
    (when (and (<= 0 rr n.-) (<= 0 cc n.-))
      (map .set! (queen n rr cc) #no)))

  (for each! [(cc n.till)]
    (exclude r cc))
  (for each! [(rr n.till)]
    (exclude rr c))
  (for each! [(dd ((- n.-) .till n))] ; diagonals
    (exclude (+ r dd) (+ c dd))
    (exclude (+ r dd) (- c dd))
    (exclude (- r dd) (+ c dd))
    (exclude (- r dd) (- c dd)))
  (map .set! (queen n r c) #yes) ; (Overlaps and overrides the above no's)

  (match-map map))

;; The variable for a queen at (row r, column c) in an n*n board.
(to (queen n r c)
  (+ 2 (* n r) c))  ; Variables must be >= 2, to not clash with literals.

;; Return a 2-d array of distinct variables: each means there's a
;; queen at its position. Row/column numbers start from 0.
(to (board<- n)
  (for each [(r n.till)]
    ((queen n r 0) .till (queen n r.+ 0))))

(export queens queens-problem print-board)
