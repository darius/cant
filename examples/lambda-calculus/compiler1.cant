;; Yet another compiler: lambda to VM.

(import (use 'sset)
  sset<- sset<-list sset-elements sset-remove sset-union sset-difference)

(import (use "parser") exp-parse)
(import (use "prelude") build-prelude)

(to (run lexp)
  (compile-and-run (exp-parse lexp)))

(to (compile-and-run exp)

  (to (compile prelude {module builtins})
    (let expanded (fill (exp-parse prelude)))
    (let scope (module-scope<- (map<-items (for each (((~ k v) builtins.items))
                                             (~ k {const v})))))
    (expanded .gen scope (prepend {reply} nil-seq)))

  (to (fill e)
    (may e
      (be {const c}        (const<- c))
      (be {var v}          (var<- v))
      (be {lam v body src} (lam<- v (fill body) src)) ;N.B. src isn't updated correspondingly
      (be {app f a src}    (app<- (fill f) (fill a) src)) ;ditto
      (be {the-env}        (fill exp))))  ; TODO this is pretty janky

  (to (invoke fn arg k)
    (may fn
      (be {compiled-closure entry _}
        (running entry {env fn arg} '() k))
      (be {primitive p}
        (reply k (p arg)))
      (be {cps-function f}
        (f arg k))))

  (to (reply k0 result)
    (may k0
      (be {frame pc r st ret-k}
        (running pc r (link result st) ret-k))
      (be {cps-sequel f}
        (f result))
      (be {halt}
        result)))

  ;; Virtual machine execution loop.
  ;; pc: program counter + 1; counts downwards except on jumps
  ;; r:  "environment": a pair {env closure argument}
  ;; st: local stack: a list
  ;; k:  "continuation"
  (to (running pc r st k)

    (to (fetch f)
      (let {env {compiled-closure _ vals} argument} r)
      (may f
        (be 'local     argument)
        (be (? count?) (vals f))))

;;        (out .say "at ~w: ~w\n" pc (code pc.-))
    (may (code pc.-)
      (be {const c}
        (running pc.- r (link c st) k))
      (be {fetch f}
        (running pc.- r (link (fetch f) st) k))
      (be {enclose addr fs _}
        (let closure {compiled-closure pc.- (each fetch fs)}) ;TODO link to src annotation somewhere
        (running addr r (link closure st) k))
      (be {push-cont addr}
        (running pc.- r st {frame addr r st k}))
      (be {reply}
        (reply k st.first))
      (be {invoke _}
        (let (link fn arg _) st)
        (invoke fn arg k))
      ))

  (let assembly (build-prelude (export out) compile invoke reply))
;;  (show assembly)

  (let code (-> assembly.insns reverse ~.array))  ; reverse so that labels index from the start
  (running code.count  ; program counter + 1
           {bad-env}   ; "environment"
           '()         ; local stack
           {halt}))    ; "continuation"


;; In the "assembly" language: The 'label' of an instruction is its
;; distance from the end of the list of all instructions. This is
;; the easiest representation since we generate code back-to-front.
;; We cache the label in an object for the sake of constant-time access.

(make nil-seq
  (to ~.label 0)
  (to ~.tail? #no)
  (to ~.insns '()))

(to (prepend insn rest)
  (let label rest.label.+)
  (let insns (link insn rest.insns))
  (make link-seq
    (to ~.label label)
    (to ~.tail? (= insn {reply}))
    (to ~.insns insns)
    (to ~.rest  rest)))                   ;kinda funky

;;XXX 
;;(to (show assembly)
;;  (for each! ((insn insns))
;;    (out .say "~2w ~w\n" insn.label insn)))


;; Expression objects cache the free-variable sets, again to avoid
;; algorithmic blow-up.
;; exp.fvs:         Free variables of exp
;; exp .gen s then: Compiled code for exp in scope s, followed by `then` code

(to (const<- c)
  (make constant
    (to ~.fvs empty-set)
    (to (~ .gen s then) (prepend {const c} then))))

(to (var<- v)
  (make variable
    (to ~.fvs (sset<- v))
    (to (~ .gen s then) (prepend (s v) then))))

(to (lam<- v body src)
  (let fvs (sset-remove body.fvs v))
  (make lambda
    (to ~.fvs fvs)
    (to (~ .gen s then)
     (let cvs ;; closure variables
       (sset-elements (sset-difference fvs (sset<-list s.known.keys))))
     (let fetches (for each (((-> s {fetch f}) cvs))
                    f))
     (prepend {enclose then.label fetches src}
              (body .gen
                    (scope<- v cvs.inverse s.known)
                    (prepend {reply} then))))))

(to (app<- f a src)
  (make application
    (to ~.fvs (sset-union f.fvs a.fvs))
    (to (~ .gen s then)
     (let code (a .gen s
                  (f .gen s
                     (prepend {invoke src} (if then.tail? then.rest then)))))
     (if then.tail? code (prepend {push-cont then.label} code)))))

(let empty-set (sset<-))


;; Scopes (called 's' above)

(to (module-scope<- known)
  (make module-scope
    (to (~ v) (known v))
    (to ~.known known)))

(to (scope<- param var-offsets known)
  (make scope
    (to (~ v)
      (if (= v param)
          {fetch 'local}
          (may (var-offsets .get v)
            (be #no (known v))
            (be n   {fetch n}))))
    (to ~.known known)))


;; Smoke test

(to (smoke)
  (let eg '(([x y] x) ([z] z)))
  (out .print eg)
  (out .print (run eg))
  out.newline

  (let eg2 '(([x] (add1 x)) 5))
  (out .print (run eg2)))


;; Main

(to (main argv)
  (for each! ((filename argv.rest))
    (out .say "\n~d:\n" filename)
    (out .print (run-file filename))))

(to (run-file filename)
  (let es (with-input-file read-all filename))
  (run `(do ,@es)))

(export run run-file)
