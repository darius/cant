;; Henderson, "Functional geometry"

;; see also https://sarabander.github.io/sicp/html/2_002e2.xhtml#g_t2_002e2_002e4
;; see also http://fssnip.net/aj
;; and http://planet.racket-lang.org/package-source/soegaard/sicp.plt/2/1/planet-docs/sicp-manual/index.html
;; and https://sicp.comp.nus.edu.sg/chapters/33


;; 2-d vectors {v x y}

(to (v* c {v x y})
  {v (* c x) (* c y)})

(to (v/ {v x y} c)
  {v (/ x c) (/ y c)})

(make v+ {extend left-to-right-operation}
  (to (~ {v x0 y0} {v x1 y1})
    {v (+ x0 x1)
       (+ y0 y1)})
  (to (~)
    {v 0 0}))

(make v- {extend left-to-right-operation} ; (fancier than we really need)
  (to (~ {v x0 y0} {v x1 y1})
    {v (- x0 x1)
       (- y0 y1)})
  (to (~ {v x y})
    {v (- x) (- y)})
  (to (~)
    {v 0 0}))


;; Affine transform {frame origin right up}
;; origin: Where (0,0) in the source ends up in the image.
;; right, up: Where the x and y unit vectors in the source end up in
;;   the image, *relative to origin*.

(let standard-frame {frame {v 0 0} {v 1 0} {v 0 1}}) ;TODO unused

(to (map-vector {frame origin right up} {v x y})
  (v+ origin (v* x right) (v* y up)))

(to (map-segment frame {segment p0 p1})
  {segment (map-vector frame p0)
           (map-vector frame p1)})


;; Picture constructors
;; picture :: frame -> list of segments
;; Glossary: p, q, r, s: pictures

(to (blank frame)
  '())

(to ((segments<- segments) frame)       ;XXX confusing name
  (for each [(s segments)]
    (map-segment frame s)))

(to (grid<- m n segments)
  (segments<- (for each [({segment {v x0 y0} {v x1 y1}} segments)]
                {segment {v (/ x0 m) (/ y0 n)}
                         {v (/ x1 m) (/ y1 n)}})))

;; Show both p and q.
(to ((superpose<- p q) frame)
  (chain (p frame) (q frame)))

;; Squish p left of q.
(to ((beside<- p q) {frame origin right up})
  (let half-right (v/ right 2))
  (chain (p {frame origin                 half-right up})
         (q {frame (v+ origin half-right) half-right up})))

;; Squish p above q.  TODO make it below instead?
(to ((stack<- p q) {frame origin right up})
  (let half-up (v/ up 2))
  (chain (q {frame origin              right half-up})
         (p {frame (v+ origin half-up) right half-up})))

;; A quarter-turn counterclockwise.
(to ((turn<- p) {frame origin right up})
  (p {frame (v+ origin right) up (v- right)}))

(to (quartet<- p q r s)
  (stack<- (beside<- p q) (beside<- r s)))

(to (cycle<- p)
  (let p1 (turn<- p))
  (let p2 (turn<- p1))
  (let p3 (turn<- p2))
  (quartet<- p p3 p1 p2))


;; Output

(to (postscript<- p)
  (text<-writer (:: (write-postscript it p))))

(to (write-postscript sink p)
  (let frame {frame {v 0 0} {v 500 0} {v 0 500}})
  ;;(sink .displayln "500 500 scale  .1 .1 translate  0 setlinewidth")
  (sink .displayln "500 500 scale  0 setlinewidth")
  (for each! [({segment {v x0 y0} {v x1 y1}} (p frame))]
    (sink .say "~d ~d moveto ~d ~d lineto\n"
          x0.inexact y0.inexact x1.inexact y1.inexact))
  (sink .displayln "stroke showpage"))


;; Smoke test

(let box (segments<- '({segment {v 0 0} {v 1 0}}
                       {segment {v 1 0} {v 1 1}}
                       {segment {v 1 1} {v 0 1}}
                       {segment {v 0 1} {v 0 0}}
                       {segment {v 0 0} {v 1 1}}
                       )))
(let X   (segments<- '({segment {v 0 0} {v 1 1}}
                       {segment {v 0 1} {v 1 0}}
                       )))
(let Y (grid<- 10 10 '({segment {v 5 0} {v 5 5}}
                       {segment {v 5 5} {v 10 10}}
                       {segment {v 5 5} {v 0 10}}
                       )))
(let Z   (segments<- '({segment {v 0 1} {v 1 1}}
                       {segment {v 1 1} {v 0 0}}
                       {segment {v 0 0} {v 1 0}}
                       )))

(to (main args)
  (write-postscript out (quartet<- box Z (cycle<- Y) box)))
