;; (Ported from github.com/darius/dole)
;; A buffer is a text with a current point of editing, a display, and
;; a key-map.

(import (use 'flextext)  flextext<- backward forward)
(import (use "char-set") char-set<-)
(import ((use "display") (export out))
                         render rows cols)   ; XXX rename to num-rows or something
(import (use "key-map")  key-map<-)
(import (use "console")  log)

;; Return the smallest i in [lo..hi) where ok(i), if any; else hi.
;; Pre: lo and hi are ints, lo < hi
;; and not ok(j) for j in [lo..i)
;; and     ok(j) for j in [i..hi)  (for some i in [lo..hi]).
(to (search lo hi ok?)
  (if (ok? lo)
      lo
      (begin searching ((L lo) (H hi))
        (if (<= H (+ L 1))
            H
            (do (let mid ((+ L H) .quotient 2))
                (if (ok? mid)
                    (searching L mid)
                    (searching mid H)))))))

(let newline (char-set<- #\newline))

;; Return a new buffer.
(to (buffer<-)

  (let ft (flextext<-))
  (let point (box<- 0))              ; TODO: make this a mark
  (let origin (box<- 0))     ; display origin. XXX keep in a window object?

  (to (update-origin)
    (let rendering (render ft origin.^ point.^))
    (hm (if rendering.point-visible?
            rendering)
        (else
          (to (has-point? o)
            ((render ft o point.^) .point-centered?))
          (let screen-size (* rows cols))
          (origin .^= (search (ft .clip (- point.^ screen-size))
                              point.^
                              has-point?))
          (when (= origin.^ point.^)
            (origin .^= 0)) ; Couldn't center it.
          (render ft origin.^ point.^))))

  (to (insert str)
    (ft .insert point.^ str)
    (point .+= str.count))

  (to (find-line p dir)
    (ft .clip (ft .find-char-set p dir newline)))

  ;; TODO: preserve goal column; respect formatting, such as tabs;
  ;; treat long lines as defined by display
  (to (previous-line)
    (let start      (find-line point.^ backward))
    (let offset     (- point.^ start))
    (let prev-start (find-line start.- backward))
    (point .^= (min (+ prev-start offset)
                    (ft .clip start.-))))

  (to (next-line)
    (let start      (find-line point.^ backward))
    (let offset     (- point.^ start))
    (let next-start (find-line start forward)) ;XXX why not start from point?
    (let next-end   (find-line next-start forward))
    (point .^= (min (+ next-start offset)
                    (ft .clip next-end.-))))
  ;; XXX this can wrap around since ft .clip moves `nowhere` to 0.
   
  (let key-map (key-map<- (on (ch)
                            (if (char? ch)
                                (insert ch.text)
                                (log "Not a char: ~w" ch)))))

  (make buffer

    (to ~.clear!
      ft.clear!
      (point .^= 0)
      (origin .^= 0))

    (to ~.backward-delete-char
      (ft .delete point.^.- 1)
      (buffer .move-char backward))

    (to ~.forward-delete-char
      (ft .delete point.^ 1))

    (to ~.beginning-of-line
      (point .^= (find-line point.^ backward)))

    (to ~.end-of-line
      (point .^= (ft .clip (- (find-line point.^ forward) 1))))

    (to (~ .insert str)
      (surely (text? str))
      (insert str))

    (to ~.key-map
      key-map)

    (to (~ .add-bindings! bindings)
      (for each! ((`(,key ,binding) bindings)) ;TODO better choice of structure?
        (key-map .set! key binding)))

    (to (~ .move-char offset)
      (point .^= (ft .clip (+ point.^ offset))))

    (to ~.previous-line (previous-line))
    (to ~.next-line     (next-line))

    ;; TODO: more reasonable/emacsy behavior. This interacts quite badly
    ;; with the dumb update-origin() logic.
    (to ~.previous-page
      ;; (update-origin)
      ;; point .^= origin
      (for each! ((_ rows.till))
        (previous-line)))

    (to ~.next-page
      ;; (update-origin)
      ;; point .^= origin
      (for each! ((_ rows.till))
        (next-line)))

    (to ~.redisplay
      (let rendering (update-origin))
      (surely rendering.point-visible?)
      rendering.show)

    (to (~ .visit filename)
      buffer.clear!
      (ft .insert 0 (with-input-file ~.read-all filename)))))

(export
  buffer<-)
