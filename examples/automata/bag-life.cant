;; Game of Life again.
;; Represent a grid as a set of populated locations.
;; A location is an `(,x ,y) coordinate pair.

(import ((use 'sturm) (export console))
  cbreak-mode)
(import (use 'ansi-term)
  clear-screen cursor-show cursor-hide)

(to (main args)
  (let n-steps (may args
                 (be `(,_)        20)
                 (be `(,_ ,n-str) (number<-string n-str))
                 (be `(,prog ,@_) (error ("Usage: ~d [#steps]" .format prog)))))
  (for cbreak-mode ()
    (out .display cursor-hide)
    (run r-pentomino n-steps)
    (out .display cursor-show)))

(to (run grid n-steps)
  (for foldl ((grid grid) (_ n-steps.till))
    (out .display clear-screen)
    (show grid)
    (update grid)))

(to (update grid)
  (let active (bag<- (gather neighbors grid.keys)))
  (~.range (for yeahs (((~ pos n-live) active.items))
             (may n-live
               (be 3 pos)
               (be 2 (and (grid .maps? pos) pos))
               (else #no)))))

(to (neighbors `(,x ,y))
  (for each ((`(,dx ,dy) neighborhood))
    `(,(+ x dx) ,(+ y dy))))

(let neighborhood (for those ((d (grid* '(-1 0 1) '(-1 0 1))))
                    (not= d '(0 0))))

(to (show grid)
  (when grid.some?
    (let `((,x-lo ,x-hi) (,y-lo ,y-hi))
      (each bounds<- (transpose grid.keys)))
    (for each! ((y (y-lo .thru y-hi)))
      (for each! ((x (x-lo .thru x-hi)))
        (out .display (if (grid .maps? `(,x ,y)) "O " "  ")))
      out.newline)))

(to (bounds<- numbers)
  `(,(min @numbers)
    ,(max @numbers)))

(to (grid<-picture lines)
  (~.range (for where ((ch (map<-lines lines)))
             (not ch.whitespace?))))

(to (map<-lines lines)
  (map<-items (for gather (((~ row line) lines.items))
                (for each (((~ col ch) line.items))
                  (~ `(,col ,(- row)) ; minus so y-coordinates increase upwards
                     ch)))))

(let r-pentomino (grid<-picture [" **"
                                 "** "
                                 " * "]))

(export update show grid<-picture r-pentomino)
