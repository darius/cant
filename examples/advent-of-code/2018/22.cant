;; (Use run.cant to run this.)
;; Simple least-cost search was too slow.

(import (use 'pairing-heap)
  priority-queues<-)

(let input (with-input-file ~.read-all data-file))

(let parse
  (like "'depth: ' :count '\ntarget: ' [:count ',' :count :hug] '\n'"))

(let `(,depth ,target) (parse input))
(out .print depth)
(out .print target)

(let geologic-index<-
  (memoize (on (p)
             (may p
               (be (= target) 0)
               (be '(0 0)     0)
               (be `(,x 0)    (* x 16807))
               (be `(0 ,y)    (* y 48271))
               (be `(,x ,y)   (* (erosion-level<- `(,x.- ,y))
                                 (erosion-level<- `(,x ,y.-))))))))

(to (erosion-level<- p)
  ((+ (geologic-index<- p) depth) .modulo 20183))

(to (type<- p)
  ((erosion-level<- p) .modulo 3))

(to (risk<- p)
 (type<- p))


(out .display "\nPart 1\n")

(to (part-1)
  (total-risk (rectangle<- '(0 0) target)))

(to (total-risk area)
  (sum-by risk<- area))

(to (rectangle<- `(,xl ,yl) `(,xh ,yh))
  (grid* (xl .thru xh)
         (yl .thru yh)))

(out .say "~w\n" (part-1))


(out .display "\nPart 2\n")

(let usables [(set<- 'climbing-gear 'torch)      ; rocky
              (set<- 'climbing-gear 'neither)    ; wet
              (set<- 'torch         'neither)])  ; narrow

(to (usable? tool p)
;;  (surely (symbol? tool) "tools are symbols")
;;  (surely (list? p) "coords")
  ((usables (type<- p)) .maps? tool))

(to (part-2)
  ;; A state is {state p tool} with position and current tool equipped.
  (let start-state {state '(0 0) 'torch})

  ;; Map from state to earliest time when it's been found to be
  ;; reachable, so far.
  (let bests (!map<- (~ start-state 0)))

  ;; An 'effort' is a state at a time it can be reached. TODO better name?
  (let start-effort {at 0 start-state})

  (to (keep-early efforts)
    (for keep (({at t state} efforts))
      ;; TODO un-duplicate this:
      (may (bests .get state)
        (be #no
          (bests .set! state t)
          #yes)
        (be t1
          (if (< t t1)
              (do (bests .set! state t)
                  #yes)
              #no)))))

  (to (equip {at t {state p tool}} new-tool)
;;    (surely (usable? new-tool p) "New tool usable" new-tool)
    {at (+ t 7) {state p new-tool}})

  (to (time-bound<=? effort1 effort2)
    (<= (time-bound<- effort1)
        (time-bound<- effort2)))

  (to (time-bound<- {at t {state p tool}})
    (+ t (manhattan-distance p target) (if (= tool 'torch) 0 7)))

  (import (priority-queues<- time-bound<=?)
    unit-pq pq-peek pq-merge pq<-list)

  (begin searching ((pq (unit-pq start-effort)))
    (let {nonempty (-- effort {at t state}) rest-pq}
      (pq-peek pq))
    
    (to (continue new-efforts)
      (searching (pq-merge rest-pq (pq<-list (keep-early new-efforts)))))

    (let t0 (bests state))
    (if (< t0 t)
        (do (out .say "at ~3w skip\n" t)
            (continue '()))
        (do (let {state p tool} state)
            (out .say "at ~3w ~3w ~w size ~w\n"
                      t (manhattan-distance p target) state bests.count)
;;            (surely (usable? tool p) "Tool is still usable after move")
            (if (and (= p target) (= tool 'torch))
                t ; Final result: time to reach the target with torch equipped.
                (do (let moves (for yeahs ((q (neighbors<- p)))
                                 (and (usable? tool q)
                                      {at t.+ {state q tool}})))
                    (let swap (equip effort (swap-tool p tool)))
                    (continue `(,swap ,@moves))))))))

(to (swap-tool q tool)
  (let candidates (-> q type<- usables ~.keys))
  (if (= tool candidates.first)         ;TODO clumsy
      candidates.rest.first
      candidates.first))

(to (neighbors<- `(,x ,y))
  `((,x.+ ,y)
    (,x ,y.+)
    ,@(if (< 0 x) `((,x.- ,y)) '())
    ,@(if (< 0 y) `((,x ,y.-)) '())))

;; (specialized from utils for speed)
(to (manhattan-distance p q)
  (+ (~.magnitude (- (p 0) (q 0)))
     (~.magnitude (- (p 1) (q 1)))))

(out .say "~w\n" (part-2))

;; Other answers: https://old.reddit.com/r/adventofcode/comments/a8i1cy/2018_day_22_solutions/
