;; (Use run.cant to run this.)

(let inputs (with-input-file ~.read-all data-file))

(to (parse world-text)
  (surely (world-text.split-lines .unique? ~.count))
  (let width world-text.split-lines.first.count.+)
  (let carts (!map<-))
  (let tracks (flexarray<-))
  (to (add-cart! i dir)
    (tracks .push! (erase-cart dir))
    (carts .set! i {cart dir 0}))
  (for each! (((~ i rune) world-text.items))
    (may rune
      (be #\> (add-cart! i E))
      (be #\< (add-cart! i W))
      (be #\v (add-cart! i S))
      (be #\^ (add-cart! i N))
      (else   (tracks .push! rune))))
  {world tracks.text width carts})


;; Directions

(let N 0)
(let E 1)
(let S 2)
(let W 3)

(to (step width dir) ; we could prob. pass an array around instead of width
  (may dir
    (be 0 (- width))
    (be 1 1)
    (be 2 width)
    (be 3 -1)))

(to (erase-cart dir)
  ("|-|-" dir))

(to (show-cart {cart dir _})
  ("^>v<" dir))

(to (maybe-turn cart rune)
  (let {cart dir veer} cart)
  (may rune
    (be #\/ {cart (turn-1 dir) veer})
    (be #\\ {cart (turn-2 dir) veer})
    (be #\+ (swerve dir veer))
    (else   cart)))

(to (turn-1 dir)     ; /  n e s w
  ('[1 0 3 2] dir))  ; -> e n w s

(to (turn-2 dir)     ; \  n e s w
  ('[3 2 1 0] dir))  ; -> w s e n

(to (turn-right dir) ;    n e s w
  (dir.+ .modulo 4)) ; -> e s w n

(to (turn-left dir)
  (dir.- .modulo 4))

(to (swerve dir veer)
  (may veer
    (be 0 {cart (turn-left dir) 1})
    (be 1 {cart dir 2})
    (be 2 {cart (turn-right dir) 0})))


;; Here we go

(let world0 (parse inputs))

(to (show {world tracks w carts})
  (for each! (((~ i rune) tracks.items))
    (out .display (may (carts .get i)
                    (be #no  rune)
                    (be cart (show-cart cart)))))
  out.newline)

(to (part1)
;  (show world0)
  (begin ticking ((state world0) (t 0))
    (when (< t 20000)
;      (out .say "time ~w\n" t)
      (let (~ state1 crashes) (tick state))
;      (show state1)
      (if crashes.some?
          (xy-coords state crashes.first)
          (ticking state1 t.+)))))

(to (xy-coords {world _ width _} pos)
  (reverse (pos .digits `(,width))))

(to (tick {world tracks width carts})
  (let carts1 carts.copy)
  (let crashes (flexarray<-))
  (for each! ((pos (sort carts.keys)))
    (unless (crashes .find? pos)
      (move! pos carts tracks width carts1 crashes)))
  (~ {world tracks width carts1} crashes.values))

(to (move! pos carts tracks width carts1 crashes)
  (let {cart dir veer} (carts pos))
  (let new-pos (+ pos (step width dir)))
  (when (carts1 .maps? new-pos)
;    (out .say "splat!\n")
    (crashes .push! new-pos))
  (let new-cart (maybe-turn {cart dir veer} (tracks new-pos)))
  (let {cart new-dir _} new-cart)
;  (out .say "pos: ~w dir: ~w to new pos: ~w dir: ~w\n"
;          pos dir new-pos new-dir)
  (carts1 .delete! pos)
  (carts1 .set! new-pos new-cart))

(out .say "~w\n" (part1))


(out .display "\nPart 2\n")

(to (part2)
  (begin ticking ((state world0) (t 0))
    (when (< t 200000000)
      (let {world _ _ pre-carts} state)
      (when (1000 .divides? t)
        (out .say "time ~w pop ~w\n" t pre-carts.count))
      (if pre-carts.one?
          (xy-coords state pre-carts.keys.first)
          (do (let (~ state1 crashes) (tick state))
              (let {world tracks width carts} state1)
              (for each! ((pos crashes))
                (carts .delete! pos))
              (ticking state1 t.+))))))

(out .say "~w\n" (part2))
