;; (Use run.cant to run this.)

(let input (with-input-file ~.read-lines data-file))

(let the-ip (~.number (input.first.split 1)))
(out .print the-ip)

(let the-program (array<-list
                  (for each [(line input.rest)]
                    (let v line.split)
                    `(,v.first.symbol ,@(each ~.number v.rest)))))
(each! (: (out .print it)) the-program.values)

(to (show insn)
  ("~d ~w ~w ~w" .format @insn))

(to (vm<- regs ip program)
  (make vm

    (to ~.run
      (begin []
        (when vm.step (loop))))
;       (when (program .maps? (regs ip))
;         (out .say "ip=~w ~w ~d " (regs ip) regs (show (program (regs ip))))
 ;        vm.step
 ;        (out .say " ~w\n" regs)
  ;       (running))))

    (to ~.step
      (let here (regs ip))
      (for mayhap [(`(,op ,a ,b ,c) (program .get here))]
        (vm .do op a b c)
        (regs .update ip ~.+)
        (when (= here 7)
          (out .say "ip=~w ~w ~d " (regs ip) regs (show (program (regs ip)))))
        #yes))

    (to (~ .do op a b c)
      (let result
        (may op

          (be 'addr  (+ (regs a) (regs b)))
          (be 'addi  (+ (regs a) b))

          (be 'mulr  (* (regs a) (regs b)))
          (be 'muli  (* (regs a) b))

          (be 'banr  ((regs a) .and (regs b)))
          (be 'bani  ((regs a) .and b))
       
          (be 'borr  ((regs a) .or (regs b)))
          (be 'bori  ((regs a) .or b))
       
          (be 'setr  (regs a))
          (be 'seti  a)
       
          (be 'gtir  (~.count (> a (regs b))))
          (be 'gtri  (~.count (> (regs a) b)))
          (be 'gtrr  (~.count (> (regs a) (regs b))))
       
          (be 'eqir  (~.count (= a (regs b))))
          (be 'eqri  (~.count (= (regs a) b)))
          (be 'eqrr  (~.count (= (regs a) (regs b))))

          ))
      (regs .set! c result))

    (to ~.get-regs
      regs)
    ))

(out .display "\nPart 1\n")

(let the-regs (array<-count 6 0))
(let the-vm (vm<- the-regs the-ip the-program))

(to (part-1)
  the-vm.run
  (the-regs 0))

;(out .say "~w\n" (part-1))


(out .display "\nPart 2\n")

(to (part-2)
  (the-regs .set! 0 1)
  the-vm.run
  (the-regs 0))

(out .say "~w\n" (part-2))
