;; (Use run.cant to run this.)
;; TODO: keep cleaning this up

(import (use 'sort) merge)

(let `(,n-workers ,min-delay)
;  '(2 1))
;  '(2 61))
  '(5 61))
(let input (with-input-file ~.read-lines data-file))

(let parse
  (like "'Step ' :anyone ' must be finished before step ' :anyone ' can begin.'"))

(let ordering (each parse input))
;(each! print ordering)

(let all-steps (~.range (chain @ordering)))
(let nodes all-steps.keys)
(let succs-set (map-by (:: (set<-)) nodes))
(for each! ((`(,pre ,post) ordering))   ;TODO use a mapreduce
  ((succs-set pre) .add! post))             ;TODO maybe use .get-set!

(let succs (for map-by ((node nodes))
             (-> node succs-set ~.keys sort)))

(to (delay<- node)                ;maybe go back to calling them steps
  (let letter (node 0))            ;symbols aren't looking so great now
  (+ min-delay (- letter #\A)))

;; I think we could've kept more of the original structure.
;; semischedule: retirement stream -> available-jobs-list stream
;; then fill workers from available jobs, and send retirement notices

(to (schedule)
  (let pred-count (!map-by (:: 0) nodes))
  (for each! ((ss succs.values))
    (for each! ((s ss))
      (pred-count .update s ~.+)))

  (let outbox (flexarray<-))

  (to (assign arg)
    ;; TODO can be simpler for initial assignment
;    (out .say "assign ~w\n" arg)
    (let {state workers jobs} arg)
    (begin assigning ((ws1 workers) (ws2 '()) jobs)
;      (out .say "ws1 = ~w\n" ws1)
      (may ws1
        (be '()
          {state (reverse ws2) jobs})
        (be `(#no ,@rest)
          (may jobs
            (be '()
              (assigning rest `(#no ,@ws2) '()))
            (be `(,j ,@js)
              (let delay (delay<- j))
              (assigning rest `((,j ,delay) ,@ws2) js))))
        (be `(,w ,@rest)
          (assigning rest `(,w ,@ws2) jobs)))))

  (to (work {state workers jobs})
    ;; Decrement one time tick on each worker,
    ;; and retire the nodes that reach 0.
    (begin working ((ws1 workers) (ws2 '()) jobs)
;      (out .say "a: ws1 = ~w\n" ws1)
      (may ws1
        (be '()
;         (out .print 'b)
          {state (reverse ws2) jobs})
        (be `(#no ,@rest)
          (working rest `(#no ,@ws2) jobs))
        (be `((,node ,ticks-left) ,@rest)
;          (out .print 'c)
          (let n ticks-left.-)
          (if (= n 0)
              (do (outbox .push! node)
                  (let new-nodes
                    (sort (for keep ((s (succs node)))
                            (surely (< 0 (pred-count s)))
                            (= 0 (pred-count .update s ~.-)))))
                  ;; let's assume assigning happens elsewhere for now
                  (working rest `(#no ,@ws2) (merge new-nodes jobs)))
              (working rest `((,node ,n) ,@ws2) jobs))))))

  (let first-steps (sort (for keep ((node nodes))
                           (= 0 (pred-count node)))))

  (out .say "Second Workers Pending Done\n")
  (begin ticking ((t 0)
                  ({state workers jobs}
                   (assign {state ('(#no) .repeat n-workers)
                                  first-steps})))
    (out .say "~6w ~7w ~7w ~w\n"
              t
              (for each ((w workers))
                (if w (w 0) '-))
              jobs
              (text-by -> outbox))
    (if (some itself workers) ;clumsy, I guess
        (ticking t.+ (assign (work {state workers jobs})))
        t)))


(out .display "Part 2\n")

(let total-delay (schedule))
(out .say "\nresult 2: ~w\n" total-delay)
