;; (Use run.cant to run this.)

(import (use 'sort)
  sorted?)
(import (use 'queue)
  empty empty?                          ;TODO too-generic names
  push extend
  peek)

;(let input (with-input-file ~.read-all "advent15.test"))
;(let input (with-input-file ~.read-all "advent15.movement"))
;(let input (with-input-file ~.read-all "advent15.movement2"))
;(let input (with-input-file ~.read-all "advent15.combat1"))
;(let input (with-input-file ~.read-all "advent15.combat2"))
;(let input (with-input-file ~.read-all "advent15.combat3"))
;(let input (with-input-file ~.read-all "advent15.combat4"))
;(let input (with-input-file ~.read-all "advent15.combat5"))
(let input (with-input-file ~.read-all data-file))

(to (part-1)
  (let field (field<- input 3))
  (let n-rounds
    (begin battling [(t 0)]
      (show t field)
      (if field.do-round!
          (battling t.+)
          t)))
  (let hp field.total-hit-points)
  (out .say "Done after ~w rounds with ~w hit points left.\n"
            n-rounds hp)
  (* n-rounds hp))

(to (show t field)
  (out .say "After ~w rounds:\n" t)
  field.show
  out.newline)

(to (field<- field-text elf-attack-power)

  (let width field-text.split-lines.first.count.+)
  (surely (for every [(line field-text.split-lines)]
            (= width line.count.+)))

  (let area field-text.array)

  (to (coords<- p)
    ("~w,~w" .format (p .quotient width) (p .modulo width)))

  ;; Step in directions N E S W
  (let steps (list<- (- width) 1 width -1))

  (to (neighbors<- p)
    (for each [(s steps)]
      (+ p s)))

  (to (open-neighbors<- p)
    (for keep [(q (neighbors<- p))]
      (= (area q) #\.)))

  ;; A unit is a goblin or elf.
  (to (unit? rune)
    ("GE" .find? rune))

  ;; Map from each remaining unit's position to its hit points,
  ;; initially 200. (A unit's species is known by its G or E on the
  ;; map.)
  (let units (!map-by ||200 (where unit? area)))

  ;; For each unit, do a turn. Return yes if the round completed.
  (to (do-round)
    (for every [((~ p unit) (sort units.items))]
      ;; This unit may have been killed in a preceding unit's turn,
      ;; but it can't have moved yet.
      (or (not (units .maps? p)) ; (must've been killed)
          (do-turn p))))

  ;; For the unit at p, do a turn. Return yes if it found a target.
  (to (do-turn p)
    (let targets (find-targets (area p)))
    (unless (maybe-attack p)
      ;;  (out .say "targets for ~w: ~w\n" p (sort targets))
      (let goals (set<-list (gather open-neighbors<- targets)))
      (may (find-shortest-paths p goals)
        (be '())
        (be paths
          (let chosen-path (min-by ||`(,it.last ,it.first) paths))
          (let spot chosen-path.first)
          (move! p spot)
          (unless (maybe-attack spot)
;           (out .say "unit ~d did not attack\n" (coords<- spot))
            'ok))))
    targets.some?)

  (to (find-targets species)
    (for where [(q units)]
      (not= species (area q))))

  (to (maybe-attack p)
    (let enemy (enemy<- (area p)))
    (may (for keep [(q (neighbors<- p))]
           (= enemy (area q)))
      (be '() #no)
      (be targets
        (let target
          ;; The least remaining hit points, then the first in reading order.
          (min-by ||`(,(units it) ,it)) targets)
        ;;     (out .say "target ~w\n" target)
        (attack p target)
        #yes)))

  (to (attack p target)
    (let hp-left (- (units target)
                    (may (area p)
                      (be #\G 3)
                      (be #\E elf-attack-power))))                      
;    (out .say "attack: from ~d@~d to ~d@~d leaving ~w hp\n"
;            (area p) (coords<- p) (area target) (coords<- target) hp-left)
    (hm (when (<= hp-left 0)
          (units .delete! target)
          (area .set! target #\.))
        (else
          (units .set! target hp-left))))

  (to (move! from-p to-p)
    (let species (area from-p))
    (let hp (units from-p))
    (units .delete! from-p)
    (area .set! from-p #\.)
    (units .set! to-p hp)
    (area .set! to-p species))

  (to (find-shortest-paths start-pos goals)
    ;; Simple breadth-first search
    (let successes (flexarray<-))
    (let already (set<-)) ; Spots not to enqueue again.

    (to (expand trail)
      (for yeahs [(q (sort (open-neighbors<- trail.first)))]
        (and (not (already .maps? q))
             (do (already .add! q)
                 (link q trail)))))

    (begin exploring [(queue
                       (extend empty (for each [(trail (expand `(,start-pos)))]
                                       `(,trail.first))))]
;;      (surely (sorted? (for each [(trail (list<-queue queue))]
;;                         `(,trail.count ,(reverse trail)))))
      (may (peek queue)
        (be {empty}
          (each reverse successes.values))
        (be {nonempty trail queue-1}
          (let spot trail.first)
          (if (goals .maps? spot)
              (if (and successes.some?
                       (< ((successes 0) .count) trail.count))
                  (each reverse successes.values)
                  (do (successes .push! trail)
                      (exploring (extend queue-1 (expand trail)))))
              (exploring (extend queue-1 (expand trail))))))))

  (to (show)
    (let notes (flexarray<-))
    (for each! [((~ p rune) area.items)]
      (may rune
        (be #\newline
          (out .say "   ~d\n" (", " .join notes.values))
          notes.clear!)
        (else
          (when (unit? rune)
            (notes .push! ("~d(~w)" .format rune (units p))))
          (out .display rune)))))

  (make field
    (to ~.do-round!        (do-round))
    (to ~.show             (show))
    (to ~.total-hit-points (sum units.values))
    (to ~.census           (bag<- area.values))
    ))

(let enemy<- (map<-lists '((#\G #\E)
                           (#\E #\G))))

;(out .say "Part 1 answer: ~w\n" (part-1))



(to (part-2)
  (out .display "\nPart 2\n")

  (begin trying [(power 4)]
    out.newline
    (out .say "Trying attack power ~w\n" power)
    (let field (field<- input power))
    (or (battle-sans-elf-casualties field power)
        (trying power.+))))

(to (battle-sans-elf-casualties field power)
  (let n-elves (field.census #\E))
  (begin battling [(t 0)]
    (show t field)
    (hm (unless (= n-elves (field.census #\E))
          (out .say "Elf casualties, aborting the battle\n\n")
          #no)
        (when field.do-round!
          (battling t.+))
        (else
          (let hp field.total-hit-points)
          (out .say "Done after ~w rounds with ~w hit points left.\n"
                    t hp)
          (* t hp)))))

(out .say "~w\n" (part-2))
