;; (Use run.cant to run this.)

(let input (with-input-file read data-file))

(to (level<- x y)
  (let rack-id (+ x 10))
  (- (hundreds-digit (* rack-id (+ (* rack-id y)
                                   grid-serial)))
     5))

(to (hundreds-digit n)
  ((n .quotient 100) .modulo 10))

(let grid-serial input)
(out .print grid-serial)
;(out .print (level<- 101 153))

(out .display "\nPart 1\n")

(to (part1)
  (max-by patch-level<- (patches)))

(to (patch-level<- `(,x ,y))
  (for sum-by [(`(,x ,y) (grid* (x .span 3) (y .span 3)))]
    (level<- x y)))

(to (patches)
  (grid* (1 .thru 298) (1 .thru 298)))

(out .say "~w\n" (part1))


(out .display "\nPart 2\n")

(let N 300)

(to (part2)
  ;; I'm gonna use 0-based coords and then convert up at the end.
  (let N1 N.+)
  (to (at x y)
    (+ (* y N1) x))

  ;; TODO use grid-2d now that we have it
  (let S (array<-count (* N1 N1) 0))
  ;; (S (at x y)) = sum of (A i j) for i,j above and left of x,y.

  (for each! [(y (1 .thru N))]
    (for each! [(x (1 .thru N))]
      (S .set! (at x y)
         (+ (S (at x y.-))          ; rect above
            (- (S (at x.- y))       ; strip to left
               (S (at x.- y.-)))
            (level<- x y)))))       ; this spot
  (out .say "S initialized\n")

  (to (power<- `(,x0 ,y0 ,d))
    (let x1 (+ x0 d))
    (let y1 (+ y0 d))
    (+ (S (at x1 y1))
       (- (S (at x0 y1)))
       (- (S (at x1 y0)))
       (S (at x0 y0))))

  (let side N.till)

  (to (subsquares)
    (for gather [(i side)]
      (for gather [(j side)]
        (for each [(d (1 .thru (min (- N i) (- N j))))]
          `(,i ,j ,d)))))

  (to (cvt-coords `(,x ,y ,d))
    `(,x.+ ,y.+ ,d))

;  (cvt-coords (max-by power<- (subsquares))))
; out of memory

  (to (corners)
    (grid* side side))

  (let `(,power ,triple)
    (max @(for each [(`(,x ,y) (corners))]
            (max @(for each [(d (1 .thru (min (- N x) (- N y))))]
                    (let triple `(,x ,y ,d))
                    `(,(power<- triple) ,triple))))))

  (cvt-coords triple))

(let `(,x ,y ,s) (part2))
(out .say "~w,~w,~w\n" x y s)
