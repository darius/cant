;; (Use run.cant to run this.)

(let input (with-input-file ~.read-lines data-file))

(let parse
  (like
   "'position=<'_ :integer ','_ :integer :hug ['> velocity=<'_ :integer ','_ :integer '>' :hug]"))

(let states (each parse input))


(out .display "\nPart 1\n")

;; TODO just skip ahead using x = v*t

(to (part1)
  (let `(,ps0 ,vs) (transpose states))
  (show ps0)
  (begin stepping ((t 1) (ps ps0))
    (when (t .even? 100)
      (out .say "time ~w\n" t))
    (let next (each vector+ ps vs))
    (when (< 10500 t)
      (out .say "After ~w seconds:\n" t)
      (if #yes ;(compact? next)
          (show next)
          (out .say "spread\n")))
    (when (< t 11000)
      (stepping t.+ next))))

(to (compact? ps)
  (let `((,xl ,yl) (,xh ,yh)) (bounds<- ps))
  (let dy (- yh yl))
  (< dy 50))
;;couldn't that use `each` too?

(to (show points)
  (let `((,xl ,yl) (,xh ,yh)) (bounds<- points))
  (let dx (- xh xl))
  (let dy (- yh yl))
  (out .say "spread: ~w ~w\n" dx dy)
  (when (< dx 100)
    (let set (set<-list points))
    (for each! ((y (yl .thru yh)))
      (for each! ((x (xl .thru xh)))
        (out .display (if (set .maps? `(,x ,y)) #\# #\.)))
      out.newline)
    out.newline))

(out .say "~w\n" (part1))
