;; (Use run.cant to run this.)

(let input data-file.read-lines)
(let parse (like "{:letter+} _ :integer"))
(let inputs (~.array (each parse input)))

(to (part1)
  (run inputs))

(to (part2)
  (some flip inputs.keys))

(to (flip pc)
  (let code inputs.copy)
  (may (code pc)
    (be `("acc" ,n)
      #no)
    (else
      (may (code pc)
        (be `("nop" ,n) (code .set! pc `("jmp" ,n)))
        (be `("jmp" ,n) (code .set! pc `("nop" ,n))))
      (may (run code)
        (be {finished acc}
          acc)
        (else #no)))))

(to (run code)
  (let seen (set<-))
  (let end code.count)
  (begin running ((pc 0) (acc 0))
    (hm (if (= pc end)       {finished acc})
        (if (seen .maps? pc) {looped acc})
        (do (seen .add! pc))
        (may (code pc)
          (be `("acc" ,n)
            (running pc.+ (+ acc n)))
          (be `("nop" ,n)
            (running pc.+ acc))
          (be `("jmp" ,n)
            (running (+ pc n) acc))))))
