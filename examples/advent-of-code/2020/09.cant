;; (Use run.cant to run this.)

(let input data-file.read-lines)
(let inputs (each ~.number input))

(to (part1)
  (for some [(i (25 .till inputs.count))]
    (let n (inputs i))
    (let ns (inputs .from (- i 25) i))
    (and (not (for some [(`(,a ,b) (ns .k-sets 2))]
                (= (+ a b) n)))
         n)))

(to (part2-naive) ; naive, adj.: the way I actually did it.
  (let target 258585477)                ;from part1
  (let sum-to (running-sum inputs))
  (for some [(i inputs.keys)]
    (for some [(j ((+ i 2) .thru inputs.count))]
      (and (= target (- (sum-to j) (sum-to i)))
           (do [(slice (inputs .from i j))]
             (+ (min @slice) (max @slice)))))))

(to (running-sum xs)
  (~.array (link 0 (amassing + 0 xs))))

;; Way faster, but I didn't think of it:
(to (part2)
  (let target 258585477)                ;from part1
  (do searching [(i 0) (j 0) (total 0)]
    ;; Loop invariant (assuming all the inputs are nonnegative):
    ;;   total = sum(inputs[i:j])
    ;;   Either total < target or it's the smallest sum,
    ;;   starting at i, that's >= target.
    (may (compare target total)
      (be '< (searching i.+1 j (- total (inputs i))))
      (be '> (searching i j.+1 (+ total (inputs j))))
      (be '= (hm (when (< (- j i) 2)
                   (searching i j.+1 (+ total (inputs j))))
                 (else
                   (let cut (inputs .from i j))
                   (+ (min @cut) (max @cut))))))))
