;; (Use run.cant to run this.)

(let input (with-input-file ~.read-lines data-file))

(let g (grammar<- "
rule: bag _ 'contain' _ [bags :hug] '.' :end.
bag: {word _ word} _ ('bags'|'bag').
bags: 'no' _ 'other' _ 'bags' | [:count _ bag :hug] ++ (','_).
word: :letter+.
_: :whitespace.
"))
(let parser ((g (map<-)) 'rule))
(let inputs (each (:: (parser .parse it)) input))
(let holdings (!map<-lists inputs))

;; dim chartreuse bags contain 1 faded indigo bag.
;; --> ("dim chartreuse" ((1 "faded indigo")))

(to (part1)
  (let goal "shiny gold")
  (let deep-contains?
    (memoize (on (bag)
               (for some ((`(,_ ,sub-bag) (holdings bag)))
                 (or (= sub-bag goal)
                     (deep-contains? sub-bag))))))
  (tally-by deep-contains? holdings.keys))

(to (part2)
  (begin deep-counting ((bag "shiny gold"))
    (sum (for each ((`(,n ,sub-bag) (holdings bag)))
           (* n (+ 1 (deep-counting sub-bag)))))))
