;; (Use run.cant to run this.)

(let input (with-input-file ~.read-lines data-file))

(let g (grammar<- "
rule: np _ 'contain' _ [nps :hug] '.' :end.
np: {word _ word} _ ('bags'|'bag').
nps: 'no' _ 'other' _ 'bags' | [:count _ np :hug] ++ (','_).
word: :letter+.
_: :whitespace.
"))
(let parser ((g (map<-)) 'rule))
(let inputs (each (:: (parser .parse it)) input))

;; dim chartreuse bags contain 1 faded indigo bag.
;; --> ("dim chartreuse" ((1 "faded indigo")))

(let contains (!map<-lists inputs))

(to (part1)
  (let goal "shiny gold")
  (let transitive-contains?
    (memoize (on (outer-bag)
               (or (= outer-bag goal)    ;; except if at top; thus ~.- below
                   (may (contains .get outer-bag)
                     (be #no #no)
                     (be contents
                       (for some ((`(,_ ,bag) contents))
                         (transitive-contains? bag))))))))
  (~.- (tally-by transitive-contains? contains.keys)))

(to (part2)
  (~.- (begin count-inside ((bag "shiny gold"))
         (+ 1 (sum (for each ((`(,n ,sub-bag) (contains bag)))
                     (* n (count-inside sub-bag))))))))
