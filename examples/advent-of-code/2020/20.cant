;; (Use run.cant to run this.)

(import (use 'grid-2d) grid-2d<-)

(let inputs (data-file.read-all .split "\n\n"))

;; Parse a tile into (~ tid {tile lines edges})
(to (parse t)
  (let `(,label-line ,@lines) t.split-lines)
  (let `(,tid) (parse-label label-line))
  (~ tid {tile lines (edges<- lines)}))

(let parse-label (like "'Tile ' :count ':'"))

(to (edges<- lines)
  (list<- lines.first
          (~.text (each ~.last lines))
          lines.last
          (~.text (each ~.first lines))))

;; Map of tid -> {tile lines edges}
(let tile-map (map<-items (each parse inputs)))

;; Map of edge -> (list<- tid ...)
;;  for both orientations of every edge of every tile,
;;  listing all the tiles that have the given edge.
(let edge-map
  (map<-items (collect (for gather [((~ tid {tile _ edges}) tile-map.items)]
                         (for gather [(edge edges)]
                           (let flipped (~.text (reverse edge)))
                           (list<- (~ edge tid) (~ flipped tid)))))))
;;(for each! [((~ k v) edge-map.items)]
;;  (out .say "~w: ~w\n" k v))

;; Map of tid -> set of other tids that share one of this tid's edges, in some orientation
(let compat-map
  (map<-items (for each [((~ tid {tile _ edges}) tile-map.items)]
                (~ tid (hey (~.range (gather edge-map edges))
                            (~ .delete! tid))))))

;; If we're lucky, the corner tiles will each have just two
;; compatible-as-neighbor tiles, and no other tiles will:
(let grid-corners (for where [(compats compat-map)]
                    (= compats.count 2)))
(surely (= grid-corners.count 4))

(to (part1)
  (* @grid-corners))


;; With further luck, all the other tiles will have just the right number of
;; compatible-as-neighbor tiles:
;;(let grid-edges   (for where [(compats compat-map)] (= compats.count 3)))
;;(let grid-inside  (for where [(compats compat-map)] (= compats.count 4)))
(surely (for every [(compats compat-map.values)]
          (<= 2 compats.count 4)))

(to (flip lines)                        ;vertical flip of a tile
  (reverse lines))
(to (turn lines)                        ;right quarter-turn of a tile
  (each ~.text (transpose (reverse lines))))
(let orientations                       ;successive ops on a tile to go through all the symmetries
  (list<- turn turn turn flip turn turn turn))

(to (orienting lines)                   ;list all 8 reorientations of a tile
  ;; TODO remove duplicates? (in the case of a symmetrical tile)
  (amassing -> lines orientations))

(to (interior<- lines)                  ;remove all the edge pixels from a tile
  (let ny lines.count)
  (let nx lines.first.count)            ;surely all the same
  (each (~ .from 1 nx.-1) (lines .from 1 ny.-1)))

(to (complete-grid)
  "So here's the plan. Start by placing a corner at top left.
Raster-scan from there, placing each using a constraint from the
previously placed. (Alternatively: grow out from the seed using a worklist.)
A constraint is an edge value in a direction. Given an edge
value in a direction, we must retrieve a list of oriented tiles
that match on that edge; of the tiles still available, one will
hopefully be unique.
On placing a tile, remove it from the available tiles. At its 
placement, save the interior of the tile and the map from direction
to edge value.
(If placements aren't all unique, I may have to institute a solver
process -- backtracking search is probably simplest.)

Data structures:
- remaining-tiles: a mutable set of tids (tile ids) available
- grid: a grid of (oriented tile or #no)
  - an oriented tile is {oriented-tile tid interior edge-map}
  - an edge-map is a map from dir to edge-text
- oriented-edge-map:
  a map from edge-text to oriented-tile list (hopefully all unique by
  the time each entry is used)

Is there no simpler scheme that's likely to work?
The worklist scheme is less likely to need backtracking.

On second thought after sketching the code below, would this be simpler
without any new data structures except the grid? Just compat-map?
- Make the grid initially empty. It will hold (~ tid lines) pairs, with the
  lines possibly reoriented from the input.
  Assume the only guessing needed will be which corner tile goes in top left,
  and its orientation. For each of those guesses:
  - Raster-scan filling in the next spot of the grid:
    - Get one neighbor edge, from either left or above.
    - Find the unused compatible tid from edge-map.
    - Try all the orientations of the new tile against its 1 or 2 already-filled neighbors.
      - If none works, give up on this guess for top-left.
      - Else fill this grid spot and continue.
TODO try reworking the code below
"
  (let remaining-tiles tile-map.domain) ; TODO dubious use of .domain: we're making a *mutable* copy of the keys here
  (let grid (grid-2d<- (~ 0 0) (~ 11 11) {constant #no})) ; N.B. assuming 12x12 grid
  (let oriented-edge-map
    (map<-items
     (collect (for gather [((~ tid {tile lines _}) tile-map.items)]
                (for gather [(oriented-lines (orienting lines))]
                  (let edges (edges<- oriented-lines))
                  ;; TODO for each (dir,edge) of oriented-lines, (~ edge {oriented-tile tid XXX edge-map})
                  'XXX)))))
  
  (to (place! pos (-- {oriented-tile tid _ _} ot))
    (grid .set! pos ot)
    (remaining-tiles .delete! tid))

  (to (place-neighbor! already-pos new-pos)
    (let dir (tuple- new-pos already-pos)) ;TODO consider from which pov to define dir
    (let {oriented-tile _ _ edge-map} (grid already-pos))
    (let edge (edge-map dir))
    (let candidates (for keep [({oriented-tile tid _ _} (oriented-edge-map edge))]
                      (remaining-tiles .maps? tid)))
    (place! new-pos candidates.only))

  (to (place-rest-of-line! y)
    (for each! [(x (1 .thru 11))]
      (place-neighbor! (~ x.-1 y) (~ x y))))

  (do []
    (let corner-tid grid-corners.first)
    (let oriented-corner 'XXX)
    (place! (~ 0 0) oriented-corner))
  (place-rest-of-line! 0)
  (for each! [(y (1 .thru 11))]
    (place-neighbor! (~ 0 y.-1) (~ 0 y))
    (place-rest-of-line! y))

  grid)

(to (tuple- (~ x1 y1) (~ x0 y0))
  (~ (- x1 x0) (- y1 y0))) 

(to (extract-image grid) ; Extract the tile interiors into a list of text lines
  (let interior-rows
    (for each [(row grid.rows)]
      (for each [({oriented-tile _ interior _} row)]
        interior)))
  (chain @(each abut interior-rows)))

(to (abut interiors) ; From a list of row-lists abutting horizontally, make a list of lines.
  (for each [(rows (transpose interiors))]
    ("" .join rows)))

(to (part2)
  (let grid (complete-grid))
  (let image (extract-image grid))
  ;; TODO orient it correctly
  ;; TODO mask out sea monsters, or maybe just count them
  ;;   Q: can sea monsters overlap?
  ;; TODO count remaining #'s
  2)

;; XXX ugh failed on empty line at end
