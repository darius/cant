;; (Use run.cant to run this.)

(let input data-file.read-lines)
(let parse (like "'mask = ' {:skip*} | 'mem[' :count '] = ' :count"))
(let program (each parse input))

(to (part1)
  (sum-run part1-do-mem))

(to (part2)
  (sum-run part2-do-mem))

(to (sum-run do-mem)
  (let memory (!map<-))
  (run memory do-mem)
  (sum memory.values))

(to (run memory do-mem)
  (for amass ((mask void) (insn program))
    (may insn
      (be `(,new-mask) new-mask)
      (be `(,addr ,value)
        (each! (~ memory) (do-mem mask addr value))
        mask))))

(to (part1-do-mem mask addr value)
  (list<- (~ .set! addr (enmask1 mask value))))

(to (enmask1 mask value)
  (let masked (for each ((m mask) (b ("~036b" .format value)))
                (may m
                  (be #\X b)
                  (else   m))))
  (number<-text masked.text 2))

(to (part2-do-mem mask addr value)
  (for each ((a (enmask2 mask addr)))
    (~ .set! a value)))

(to (enmask2 mask addr)
  (let bit-values (for each ((m mask) (rune ("~036b" .format addr)))
                    (may m
                      (be #\0 `(,rune))
                      (be #\1 '(#\1))
                      (be #\X '(#\0 #\1)))))
  (for each ((bits (grid* @bit-values)))
    (number<-text bits.text 2)))
