;; (Use run.cant to run this.)

(let input data-file.read-lines)

(let mem-lhs (like "'mem[' :count ']'"))
(to (parse line)
  (let `(,L ,R) (line .split " = "))
  (may L
    (be "mask" {mask R})
    (else
      (let `(,addr) (mem-lhs L))
      {mem addr R.number})))

(let program (each parse input))


(to (part1)
  (let memory (!map<-))
  (run1 memory)
  (sum memory.values))

(to (run1 memory)
  (let cur-mask (box<- #no))
  (for each! ((insn program))
    (may insn
      (be {mask m}
        (cur-mask .^= m))
      (be {mem addr number}
        (let value (enmask-number cur-mask.^ number))
        (memory .set! addr value)))))

;; I tried to do this with bitwise AND/OR, but accidentally used
;; 32-bit-only ops. So here we do it on text.
(to (enmask-number mask n)
  (number<-text (enmask mask ("~036b" .format n))
                2))

(to (enmask mask bits)
  (~.text (for each ((m mask) (b bits))
            (may m
              (be #\X b)
              (else   m)))))


(to (part2)
  (let memory (!map<-))
  (run2 memory)
  (sum memory.values))

(to (run2 memory)
  (let cur-mask (box<- #no))
  (for each! ((insn program))
    (may insn
      (be {mask m}
        (cur-mask .^= m))
      (be {mem addr number}
        (let addrs (enmask2-many cur-mask.^ addr))
        (for each! ((a addrs))
          (memory .set! a number))))))

(to (enmask2-many mask addr)
  (let bit-values
    (for each ((m mask) (rune ("~036b" .format addr)))
      (may m
        (be #\0 `(,rune))
        (be #\1 '(#\1))
        (be #\X '(#\0 #\1)))))
  (for each ((bits (grid* @bit-values)))
    (number<-text bits.text 2)))
