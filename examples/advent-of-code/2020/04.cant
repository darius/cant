;; (Use run.cant to run this.)

(let input data-file.read-all)
(let inputs (for each [(chunk (input .split "\n\n"))]
              (each (~ .split ":") chunk.split)))

(to (part1)
  (tally-by valid1? inputs))

(to (valid1? passport)
  (let keys ((each (~ 0) passport) .range))
  (required-keys .subset-of? keys))

(let required-keys "byr iyr eyr hgt hcl ecl pid".split.range)

(to (part2)
  (tally-by valid2? inputs))

(to (valid2? passport)
  (and (valid1? passport)
       (for every [(`(,k ,v) passport)]
         (may k
           (be "byr" (<= 1920 v.number 2002))
           (be "iyr" (<= 2010 v.number 2020))
           (be "eyr" (<= 2020 v.number 2030))
           (be "hgt" (may ((hgt-pattern .parse v) .?results)
                       (be `(,n "cm") (<= 150 n 193))
                       (be `(,n "in") (<= 59 n 76))
                       (else #no)))
           (be "hcl" (and (v .prefix? "#")
                          (= v.count 7)
                          (yeah? (number<-text (v .from 1) 16)))) ;; (lenient about uppercase though...)
           (be "ecl" ('("amb" "blu" "brn" "gry" "grn" "hzl" "oth") .find? v))
           (be "pid" (and (= v.count 9)
                          (every ~.digit? v)))
           (be "cid" #yes)
           (else #no)))))

(let hgt-pattern (like ":count {'cm'|'in'}"))
