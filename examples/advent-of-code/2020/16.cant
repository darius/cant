;; (Use run.cant to run this.)

(let input (data-file.read-all .split "\n\n"))
(let rules-text (input 0))
(let your-ticket-text (((input 1) .split-lines) 1))
(let nearby-ticket-text (input 2))

(let rules
  (for each ((line rules-text.split-lines))
    (let `(,lhs ,rhs) (line .split ": "))
    {rule lhs (union @(for each ((dash (rhs .split " or ")))
                        (let `(,lo ,hi) (dash .split "-"))
                        (set<-list (lo.number .thru hi.number))))}))

(to (parse-ticket line)
  (each ~.number (line .split ",")))  

(let your-ticket (parse-ticket your-ticket-text))
(let tickets (each parse-ticket nearby-ticket-text.split-lines.rest))

(to (part1)
  (sum-by ticket-error-rate tickets))

(to (ticket-error-rate fields)
  (sum (those (compose not valid?) fields)))

(to (valid? field)
  (for some (({rule _ ruleset} rules))
    (ruleset .maps? field)))

(to (part2)
  (let columns (transpose (those valid-ticket? (link your-ticket tickets))))
  ;; (columns 0) is all the values in the 0th field of all the valid tickets, etc.

  (let remaining-rules (set<- @rules))
  (let rule-map (!map<-))
  (begin solving ()
    (let progress? (box<- #no))

    (for each! (((~ c column) columns.items))
      (let viable-rules (for those (({rule _ ruleset} remaining-rules.keys))
                          (for every ((n column))
                            (ruleset .maps? n))))
      (when (= 1 viable-rules.count)
        (let rule viable-rules.first)
        (rule-map .set! c rule)
        (remaining-rules .delete! rule)
        (progress? .^= #yes)))

    (when (and progress?.^ remaining-rules.some?)
      (solving)))

  (let departure-fields (for yeahs (((~ c {rule name _}) rule-map.items))
                          (and (name .prefix? "departure") c)))
  (* @(each your-ticket departure-fields)))

(to (valid-ticket? fields)
  (every valid? fields))
