;; TODO load into a module instead of main-interactive-setting

(load "examples/advent-of-code/utils.cant")

(to (main args)

  (let switches (!map<-))
  
  (let stem "examples/advent-of-code/2021")
  (to (run code-name)
    (let data-name (or (switches .get 'data) ("~d.in" .format code-name)))
    (cant .play `(do (let data-name ',data-name)
                     (let data-file (open-input-file ,("~d/data/~d" .format stem data-name))))
                main-interactive-setting)
    (load ("~d/~d.cant" .format stem code-name))
    (when (switches .maps? 'part1) (run-part 'part1))
    (when (switches .maps? 'part2) (run-part 'part2))
    (when (not (or (switches .maps? 'part) (switches .maps? 'part1) (switches .maps? 'part2)))
      (or (run-part 'part2)
          (run-part 'part1))))

  (to (run-part part)
    (hey (main-interactive-setting .binds? part)
         ||(when it
             (out .say "\nStarting ~d...\n" part)
             (let answer ((main-interactive-setting part)))
             (out .say "~d: ~w\n" part answer))))

  (to (bad-command-line)
    (err .say "Usage: cant ~d day [-data data] [-part1] [-part2]\n" (args 0))
    (err .say "e.g.:  cant ~d 06 -data 06.test\n" (args 0))
    (os-exit 1))

  (may args
    (be `(,_ ,filename ,@parameters)
      (begin parsing [(ps parameters)]
        (may ps
          (be '()
            (run filename))
          (be `("-data" ,data-name ,@rest)
            (switches .set! 'data data-name)
            (parsing rest))
          (be `("-part" ,@rest)
            (switches .set! 'part #yes)
            (parsing rest))
          (be `("-part1" ,@rest)
            (switches .set! 'part1 #yes)
            (parsing rest))
          (be `("-part2" ,@rest)
            (switches .set! 'part2 #yes)
            (parsing rest))
          (be `("-part12" ,@rest)
            (switches .set! 'part1 #yes)
            (switches .set! 'part2 #yes)
            (parsing rest))
          (else
            (bad-command-line)))))
    (else
      (bad-command-line))))
