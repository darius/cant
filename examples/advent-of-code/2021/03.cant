;; (Use run.cant to run this.)

(let input data-file.read-lines)

(let sample "\
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010")
;;(let input sample.split-lines)

;; We hold off on converting the input lines to numbers, because it's
;; especially trivial to get at the columns from uniform-length text
;; lines.

(to (part1)
  (let bit-columns (transpose input))
  (let gamma-digits (each majority bit-columns))
  (let epsilon-digits (each flip gamma-digits))
  (* (binary<- gamma-digits) (binary<- epsilon-digits)))

(to (majority runes)
  (max-by (bag<- runes) "01"))

(to (flip bit-rune)
  ("10" bit-rune.number))  ;; swap 0<->1

(to (binary<- bit-runes)
  (number<-text bit-runes.text 2))

(to (part2)
  (let oxygen-rating (binary<- (winnow most-common input)))
  (let co2-rating    (binary<- (winnow least-common input)))
  (* oxygen-rating co2-rating))

(to (most-common runes)
  ;; Like majority above, but with a definite tiebreaker value of 1.
  (let count (bag<- runes))
  (if (<= (count #\0) (count #\1)) #\1 #\0))

(to (least-common runes)
  (-> runes most-common flip))

;; Filter lines down according to successive columns until only one line left.
(to (winnow favorite lines)
  (do loop [(column 0) lines]
    (hm (if lines.one? lines.first)
        (else (loop column.+1 (filter column favorite lines))))))

;; Given a current list of binary strings, choose some to keep.
(to (filter column favorite lines)
  (let chosen-bit (favorite (each (~ column) lines)))
  (for keep [(line lines)]
    (= chosen-bit (line column))))
