;; (Use run.cant to run this.)

(to (parse source)
  (let raw-numbers source.read-line)
  (let numbers (each ~.number (raw-numbers .split ",")))   ;; a bit clumsy
  (surely (= "" source.read-line))
  (let raw-boards (source.read-all .split "\n\n"))
  (let boards (for each [(text raw-boards)]
                ;; A parsed board is a list of lists of numbers.
                (each ||(each ~.number it.split)
                      text.split-lines)))
  (~ numbers boards))

(let sample-text "\
7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1

22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7")
(let sample-source (text-source<- sample-text))

;;(let (~ input-numbers input-boards) (parse sample-source))
(let (~ input-numbers input-boards) (parse data-file))

(to (part1)
  (call answer the-winners.first))

(to (part2)
  (call answer the-winners.last))

(to (list-winners)
  (let winners (flexarray<-))
  (let drawn-set (set<-))
  (for amass [(boards input-boards) (just-drew input-numbers)]
    (drawn-set .add! just-drew)
    (let (~ remaining-boards new-winners)
      (skip/keep (bingo? drawn-set) boards))
    (winners .extend! (each ||(~ just-drew it drawn-set.copy)
                            new-winners))
    remaining-boards)
  winners.values)

(to (answer just-drew board drawn-set)
  (let score (for sum-by [(row board)]
               (let row-sum (sum (skip ||(drawn-set .maps? it) row)))
               row-sum))
  (* score just-drew))

(to ((bingo? drawn-set) board)
  (to (complete? row-or-column)
    (every ||(drawn-set .maps? it) row-or-column))
  (or (some complete? board)
      (some complete? (transpose board))))

;; Partition xs by test?. Faster than separate calls to skip and
;; keep. I guess this does belong in the stdlib.
(to (skip/keep test? xs)
  (let s (flexarray<-))
  (let k (flexarray<-))
  (for each! [(x xs)]
    ((if (test? x) k s) .push! x))
  (~ s.values k.values))
      
(let the-winners (list-winners))
