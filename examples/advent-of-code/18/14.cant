;; (Use run.cant to run this.)

(let input (with-input-file read data-file))
;(let input 9)

(out .display "\nPart 1\n")

(let board (flexarray<- 3 7))
(let elves '[0 1])

(to (step!)
  (board .extend! (digits<- (sum-by at elves)))
  (for each! (((~ i elf) elves.items)) ;maybe a method like array .update!
    (elves .set! i (coord (+ elf 1 (at elf))))))

(to (at elf)
  (board (coord elf)))

(to (coord elf)
  (elf .modulo board.count))

(to (digits<- n)
  (for each ((ch n.text.values))
    (number<-text ch.text)))

(to (part-1)
  (let limit (+ input 10))
  (begin working ()
;    (show)
    (when (< board.count limit)
      (step!)
      (working)))
  (let digits (board .slice input))
  ("" .join (each ~.text digits)))

(to (show)
  (for each! (((~ i recipe) board.items))
    (let f (hm (if (= i (coord (elves 0))) "(~w)")
               (if (= i (coord (elves 1))) "[~w]")
               (else                       " ~w ")))
    (out .say f recipe))
  out.newline)

(out .say "~w\n" (part-1))


(out .display "\nPart 2\n")
(out .print input)

;; takes over 2 hrs
(to (part-2)
  (let pattern (array<-list (digits<- input)))
  (let pc pattern.count)
  (out .say "pattern: ~w\n" pattern)
  (begin working ((i 0))
    (when (1000 .divides? i)
      (out .say "working ~w\n" i))
;    (show)
    (begin checking ((j i))
      (if (< (+ j pc) board.count)
          (do (when (for every (((~ k p) pattern.items))   ;(= pattern (board .slice j (+ j pc)))   ; ugh
                      (= p (board (+ j k))))
                (out .print j)
                (os-exit 0))
              (checking j.+))
          (do (step!)
              (working j))))))

(part-2)
