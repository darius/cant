;; (Use run.cant to run this.)

(let eg1 "\
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..")

(let input
  data-file.read-all)
;;  eg1)

(let number-values ;; map from each number's position to its numeric value
  (-> input (like "([:position :count :tuple] | :skip)*") map<-items))
(let number-starts ;; map from each position of a digit to the position of its number
  (map<-items (for gather [((~ pos n) number-values.items)]
                (each ||(~ it pos) (pos .span n.text.count)))))

(to (symbol-rune? rune)
  (not (".\n0123456789" .find? rune)))

(let symbols-at (where symbol-rune? input)) ;; list of symbol positions

(let neighborhood ;; list of offsets from a position to its neighbors
  (do [(w ((input .find #\newline) .+1))] ;; width
    (list<- (- w.+1) (- w) (- w.-1) -1 1 w.-1 w w.+1)))

(to (neighbors<- pos)
  (~.nub (for yeahs [(offset neighborhood)]
           (number-starts .get (+ pos offset)))))

(to (part1)
  (sum-by number-values
          ((gather neighbors<- symbols-at) .nub)))

(to (part2)
  (let gears (for yeahs [(pos symbols-at)]
               (let neighbors (neighbors<- pos))
               (and (= 2 neighbors.count) neighbors)))
  (sum-by ||(* @(each number-values it))
          gears))
