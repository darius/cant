;; (Use run.cant to run this.)

(let eg1 "\
RL

AAA = (BBB, CCC)
BBB = (DDD, EEE)
CCC = (ZZZ, GGG)
DDD = (DDD, DDD)
EEE = (EEE, EEE)
GGG = (GGG, GGG)
ZZZ = (ZZZ, ZZZ)")

(let eg2 "\
LLR

AAA = (BBB, BBB)
BBB = (AAA, ZZZ)
ZZZ = (ZZZ, ZZZ)")

(let eg3 "\
LR

11A = (11B, XXX)
11B = (XXX, 11Z)
11Z = (11B, XXX)
22A = (22B, XXX)
22B = (22C, 22C)
22C = (22Z, 22Z)
22Z = (22B, 22B)
XXX = (XXX, XXX)")

(let input
;;  eg1)
;;  eg2)
;;  eg3)
  data-file.read-all)

(let parse (like "{:skip*3} ' = (' [{:skip*3} ', ' {:skip*3} :list] ')'"))

(let {inputs turns nodes} (do [(lines input.split-lines)]
                            {inputs lines.first (map<-lists (each parse lines.rest.rest))}))

(to (step pos dir)
  ((nodes pos) ("LR" .find dir)))

(to (part1)
  (let cycling-steps (amassing$ step "AAA" turns.cycle))
  ((keep-until (be? "ZZZ") cycling-steps) .count))

(to (part2)
  (to (period<- start)
    (let cycling-steps (amassing$ step start turns.cycle))
    ((keep-until (~ .suffix? "Z") cycling-steps) .count))
    
  (lcm @(each period<- (keep (~ .suffix? "A") nodes.keys))))
