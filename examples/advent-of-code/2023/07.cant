;; (Use run.cant to run this.)

(let eg1 "\
32T3K 765
T55J5 684
KK677 28
KTJJT 220
QQQJA 483")

(let input
;;  eg1)
  data-file.read-all)

(let parse (like "{5} _ :count"))
(let input-hands (for each [(line input.split-lines)]
                   {hand @(parse line)}))

(to (part1)
  (let card-scores (-> "AKQJT98765432" reverse ~.inverse))
  (to (hand-sort-key {hand cards _})
    (list<- (type<-hand cards) (each card-scores cards)))
  (total-winnings hand-sort-key))

(to (total-winnings hand-sort-key)
  (let ordered-hands (sort-by hand-sort-key input-hands))
  (for sum-by [((~ rank0 {hand cards bid}) ordered-hands.items)]
    (* bid rank0.+1)))

(to (type<-hand cards)
  (-> cards bag<- ~.values sort hand-bags))

(let hand-bags (~.inverse '((1 1 1 1 1) ;; high card
                            (1 1 1 2)   ;; 1 pair
                            (1 2 2)     ;; 2 pair
                            (1 1 3)     ;; 3 of a kind
                            (2 3)       ;; full house
                            (1 4)       ;; 4 of a kind
                            (5))))      ;; 5 of a kind

(to (part2)
  (let card-scores (-> "AKQT98765432J" reverse ~.inverse))
  
  (to (best-type<-hand cards)
    (let n-jokers (tally-by (be? #\J) cards))
    (let others (skip (be? #\J) cards))
    ;; Card choices include the ace: for the "high card" type and in
    ;; case it's an all-joker hand.
    (let choices ((link #\A others) .nub))
    (to (reassemble assignment) (chain assignment others))
    (max @(each ||(type<-hand (reassemble it))
                (choices .k-lists n-jokers))))

  (to (hand-sort-key {hand cards _})
    (list<- (best-type<-hand cards) (each card-scores cards)))
  (total-winnings hand-sort-key))
