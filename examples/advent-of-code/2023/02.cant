;; (Use run.cant to run this.)

(let eg1 "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green".split-lines)

(let data
  data-file.read-lines)
;;eg1)

(let parse (like "'Game ' :count ': ' [[:count ' ' {:letter+} :hug]**', ' :hug]**'; '"))
(let inputs (each parse data))

(to ((possible? limits) counts)
  (for every [(`(,n ,color) counts)]
    (<= n (limits .get color 0))))

(to (part1)
  (let p? (possible? (map<- (~ "red" 12) (~ "green" 13) (~ "blue" 14))))
  (sum (for yeahs [((link game cube-sets) inputs)]
         (and (every p? cube-sets) game))))

(import (use 'binary-relations) collect)

(to (part2)
  (for sum-by [((link game cube-sets) inputs)]
    (let rgb-values
      (each (~ .part 1) (collect (for gather [(cs cube-sets)]
                                   (for each [(`(,n ,color) cs)]
                                     (~ color n))))))
    (* @(each ||(max @it) rgb-values))))
