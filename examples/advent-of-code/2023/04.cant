;; (Use run.cant to run this.)

(let eg1 "\
Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11")

(let input
  data-file.read-all)
;;  eg1)

(let parse (like "'Card'_ :count ':'_ [:count**_ :hug]_ '|'_ [:count**_ :hug]"))
(let inputs (each parse input.split-lines))

(to (part1)
  (for sum-by [((list<- card-id winning-ns my-ns) inputs)]
    (let matches (winning-ns.range .intersect my-ns.range))
    (if matches.none? 0 (2 .** matches.count.-1))))
      
(to (part2)
  (let copy-counter ((each ||1 inputs) .array))
  (for each! [((~ i (list<- card-id winning-ns my-ns)) inputs.items)]
    (let this-card-n-copies (copy-counter i))
    (let n-cards-won (~.count (winning-ns.range .intersect my-ns.range)))
    (for each! [(j (i.+1 .thru (min inputs.count.-1 (+ i n-cards-won))))]
      (copy-counter .update j (~ .+ this-card-n-copies))))
  (sum copy-counter.values))


;; A different approach which I couldn't work out in the moment:
(to (part2-cute)
  (let scores (~.array (for each [((list<- card-id winning-ns my-ns) inputs)]
                         (~.count (winning-ns.range .intersect my-ns.range)))))
  (let fecundity
    (memoize (on (i)
               (+ 1 (sum-by fecundity (i.+1 .thru (min scores.count.-1 (+ i (scores i)))))))))
  (sum-by fecundity scores.keys))

;; (out .print (part2-cute))
