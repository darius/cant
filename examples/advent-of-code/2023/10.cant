;; (Use run.cant to run this.)

(import (use 'queue) empty push extend peek)

(let eg1 "\
.....
.S-7.
.|.|.
.L-J.
.....
")

(let eg2 "\
..F7.
.FJ|.
SJ.L7
|F--J
LJ...
")

(let input
;  eg1)
;  eg2)
  data-file.read-all)

(surely (input.split-lines .unique? ~.count)) ;; Uniform-length lines

(let (-- neighborhood (list<- N W E S)) ;; list of offsets from a position to its neighbors
  (do [(w ((input .find #\newline) .+1))] ;; width
    (list<- (- w) -1 1 w)))

(let rune-map (map<- (~ #\| (list<- N S))
                     (~ #\- (list<- E W))
                     (~ #\L (list<- N E))
                     (~ #\J (list<- N W))
                     (~ #\7 (list<- S W))
                     (~ #\F (list<- S E))))

(to (arcs<- pos)
  (for yeahs [(offset (rune-map .get (input pos) '()))]
    ;; Slightly tricky guard to stay inside the visible map.
    (and (not= #\newline (input .get (+ pos offset) #\newline))
         (+ pos offset))))

(to (neighbors<- pos)
  (for yeahs [(offset neighborhood)]
    ;; Slightly tricky guard to stay inside the visible map.
    (and (not= #\newline (input .get (+ pos offset) #\newline))
         (+ pos offset))))

(surely (~.only (keep (be? #\S) input))) ;; Exactly 1 start position
(let start (input .find #\S))

(let path
  (link start
        (do []
          (let start-arcs (for keep [(neighbor (neighbors<- start))]
                            ((arcs<- neighbor) .find? start)))
          (surely (= start-arcs.count 2))
          
          (to (step (~ prev pos))
            (~ pos (~.only ((arcs<- pos) .remove prev))))
          
          (let states (for keep-until [((~ prev pos)
                                        (iterating step (~ start start-arcs.first)))]
                        (= pos start)))
          (each (~ .part 1) states))))

(to (part1)
  ((/ path.count 2) .ceiling))
