;; (Use run.cant to run this.)

(let input (with-input-file ~.read-lines data-file))
(let inputs (each (~ .split ")") input))

(let places (map<-items (collect (each ~.tuple inputs))))


(out .display "\nPart 1\n")

(to (part-1)
;;  (let roots (places.domain .difference (~.range (each (~ 1) inputs))))
;;  (out .print roots) ; Turned out to be just "COM".
  (to (count-orbits depth x)
    (+ depth (for sum-by [(y (places .get x '()))]
               (count-orbits depth.+1 y))))
  (count-orbits 0 "COM"))

(out .say "~w\n" (part-1))


(out .display "\nPart 2\n")

(to (part-2)
  
  ;; Map from each place to its path to COM (not including the place itself).
  (let paths (!map<-))
  (do walking [(path '()) (here "COM")]
    (paths .set! here path)
    (for each! [(next (places .get here '()))]
      (walking (link here path) next)))
  
  (let santa-set ((paths "SAN") .range))

  ;; Walk from YOU towards COM until also on the SAN path.
  ;; Then sum the steps just walked plus the steps from SAN to here.
  (let (~ i here) (for detect [((~ _ here) ((paths "YOU") .items))]
                    (santa-set .maps? here)))
  (+ i ((paths "SAN") .find here)))

(out .say "~w\n" (part-2))
