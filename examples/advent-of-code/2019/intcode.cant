(to (intcode-run core pc @(optional interface))
  (let face (or interface (i/o-interface<- in out)))
  (do loop [pc]
    (may (step core pc face)
      (be #no    face)
      (be new-pc (loop new-pc)))))

(to (i/o-interface<- source sink)
  (make i/o-interface
    (to ~.input
      source.read-line.trim.number)
    (to (~ .output x)
      (sink .say "Output: ~w\n" x))))

;; TODO take in some virtualization of input and output
(to (step core pc face)
  (surely (core .maps? pc))
  
  (to (P mode i)
    (may mode
      (be 0 (core (core (+ pc i))))
      (be 1 (core (+ pc i)))))
  
  (to (Addr mode i)
    (may mode
      (be 0 (core (+ pc i)))))
  
  (let (list<- c-mode b-mode a-mode opcode)
    ((core pc) .digits '(10 10 100) 4)) ;TODO this is *really* slow

  ;;(show core pc)
  (may opcode
    (be 1 ; add
      (core .set! (Addr c-mode 3) (+ (P a-mode 1) (P b-mode 2)))
      (+ pc 4))
    (be 2 ; mul
      (core .set! (Addr c-mode 3) (* (P a-mode 1) (P b-mode 2)))
      (+ pc 4))
    (be 3 ; input
      (core .set! (Addr c-mode 1) face.input)
      (+ pc 2))
    (be 4 ; output
      (face .output (P a-mode 1))
      (+ pc 2))
    (be 5 ; jump-if-true
      (if (not= 0 (P a-mode 1)) (P b-mode 2) (+ pc 3)))
    (be 6 ; jump-if-false
      (if (= 0 (P a-mode 1)) (P b-mode 2) (+ pc 3)))
    (be 7 ; less-than
      (core .set! (Addr c-mode 3) (if (< (P a-mode 1) (P b-mode 2)) 1 0))
      (+ pc 4))
    (be 8 ; equals
      (core .set! (Addr c-mode 3) (if (= (P a-mode 1) (P b-mode 2)) 1 0))
      (+ pc 4))
    (be 99 ; halt
      #no)))

(to (show core pc)
  (let (list<- c-mode b-mode a-mode opcode)
    ((core pc) .digits '(10 10 100) 4))
  (let modes [a-mode b-mode c-mode])
  (let {op name nargs} (ops opcode))
  (out .say "~w ~d" pc name)
  (for each! [(i (1 .thru nargs))]
    (out .say " ~d~w" (mode-names (modes i.-1)) (core (+ pc i))))
  out.newline)

(let ops (map<-lists '((1 {op add 3})
                       (2 {op mul 3})
                       (3 {op input 1})
                       (4 {op output 1})
                       (5 {op jump-if-true 2})
                       (6 {op jump-if-false 2})
                       (7 {op less-than 3})
                       (8 {op equals 3})
                       (99 {op halt 0}))))
(let mode-names ["^" ""])

(export intcode-run)
