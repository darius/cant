(let input (with-input-file ~.read-all data-file))
(let parse (like "(:integer | :skip)*"))
(let inputs (parse input))

(let core inputs.array)

(to (run pc)
  (let a (core (+ pc 1)))
  (let b (core (+ pc 2)))
  (let c (core (+ pc 3)))
  (may (core pc)
    (be 1 ; add
      (core .set! c (+ (core a) (core b)))
      (run (+ pc 4)))
    (be 2 ; mul
      (core .set! c (* (core a) (core b)))
      (run (+ pc 4)))
    (be 99 ; halt
      (core 0))))


(out .display "\nPart 1\n")

(to (part-1)
  (core .set! 1 12)
  (core .set! 2 2)
  (run 0)
  (core 0))

(out .say "~w\n" (part-1))


(out .display "\nPart 2\n")

(let initial-core inputs.array)

(to (check noun verb)
  (core .copy! initial-core)
  (core .set! 1 noun)
  (core .set! 2 verb)
  (let result (run 0))
  (and (= result 19690720)
       (+ (* 100 noun) verb)))

(to (part-2)
  (~.first (yeahs/lazy (:: (check @it)) (grid*/lazy (100 .till) (100 .till)))))

(out .say "~w\n" (part-2))
