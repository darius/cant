(import (use 'parson-core) feed take-1)

(let parson (use 'parson))
(import parson grammar<- like)

(to (average numbers)
  (surely numbers.some? "Average of an empty list")
  (/ (sum numbers) numbers.count))

(to (all-mins-by fn xs)
  (for foldl ((best (list<- xs.first))
              (x xs.rest))
    (may ((fn best.first) .compare (fn x))
      (be -1 best)
      (be  0 (link x best))
      (be +1 (list<- x)))))
         
(to (fill! array value)                 ;TODO should be a mutable-map-trait method
  (for each! ((i array.keys))
    (array .set! i value)))

(to (scanl/lazy f z xs)
  (begin scanning ((z z) (xs xs))
    (link/lazy z (: (if xs.none?
                        '()
                        (scanning (f z xs.first) xs.rest))))))

;; (detect ~.even? '(3 1 4 1 5 9 2 6)) = 4
;; TODO is this worth it? sometimes what you want is the yeahs equivalent
;; TODO #no if not found?
(to (detect keep? xs)
  ((those/lazy keep? xs) .first))

(to (duplicates<- xs)
  (let seen (set<-))
  (begin looking ((xs xs))
    (if xs.none?
        '()
        (do (let x xs.first)
            (if (seen .maps? x)
                (link/lazy x (: (looking xs.rest)))
                (do (seen .add! x)
                    (looking xs.rest)))))))

(to (deletions<- t)
  (for each ((i t.count.-.till))
    `(,(t .slice 0 i) ,(t .slice i.+))))

(to (chain-lines lines)
  (chain @(for each ((line lines))
            (chain line "\n"))))

;; TODO how much slower is this? Doesn't matter since it's no longer used!
;; (to (neighbors<- p)
;;   (for each ((d neighborhood-8))
;;     (vector+ p d))))
(to (neighbors-8<- `(,x ,y))
  (for each ((`(,dx ,dy) neighborhood-8))
    `(,(+ x dx) ,(+ y dy))))

(let neighborhood-8 (for those ((d (grid* '(-1 0 1) '(-1 0 1))))
                      (not= d '(0 0))))

(to (vector* c p) (for each ((coord p)) (* c coord)))
(to (vector+ p q) (each + p q))
(to (vector- p q) (each - p q))

(to (manhattan-distance<- p q)
  (sum-by (compose ~.magnitude -) p q))

(to (bounds<- points)
  (transpose (each bounds-1d<- (transpose points))))

(to (bounds-1d<- ns)
  `(,(min @ns) ,(max @ns)))

(export
  scanl/lazy detect
  duplicates<- deletions<-
  chain-lines all-mins-by average neighbors-8<-
  vector* vector+ vector- manhattan-distance<-
  grammar<- feed take-1
  bounds<- bounds-1d<- 
  )
