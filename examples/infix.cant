;; Format an infix expression into a string with minimal parentheses.

(to (format-infix e)
  (fmt e 0))

(to (fmt e p)
  (may e
    (be (? number?)
      (string<-number e))
    (be (? symbol?)
      e.name)
    (be `(,op ,x)
      (may (unaries .get op)
        (be #no
          ("~w(~d)" .format op (fmt x 0)))
        (be {unary prefix postfix}
          (hm (if prefix  (enclose prefix  p ("~w~d" .format op (fmt x prefix))))
              (if postfix (enclose postfix p ("~d~w" .format (fmt x postfix) op)))))))
    (be `(,op ,x ,y)
      (may (binaries .get op)
        (be #no
          ("~w(~d, ~d)" .format op (fmt x 0) (fmt y 0)))
        (be {binary left right}
          (enclose left p
                   ("~d ~w ~d" .format (fmt x left) op (fmt y right))))))))

(to (enclose inner outer string)
   (if (< inner outer)
       ("(~d)" .format string)
       string))

(let unaries (!map<-))
(let binaries (!map<-))

(to (def-prefix name p)  (unaries .set! name {unary p #no}))
(to (def-postfix name p) (unaries .set! name {unary #no p}))

(to (def-infix name p)   (binaries .set! name {binary p p.+}))

(def-prefix '- 10)                      ;XXX get the right precedences
(def-postfix '! 100)

(def-infix '+ 10)
(def-infix '- 10)
(def-infix '* 20)
(def-infix '/ 20)
(binaries .set! '^ {binary 30 30})   ; right-to-left associativity (is this correct?)

;; smoke test

(out .print (format-infix '(* (+ 1 2) (+ (* 3 4) (* 5 6)))))
