;; Format an infix expression into a string with minimal parentheses.

;; Glossary:
;; p: Precedence level. Higher-precedence operators bind more tightly.
;; e: Expression in s-expr form.

(to (format-infix e)
  (fmt 0 e))

(to (fmt p e)
  (may e
    (be `(,op ,x)    (fmt-unary p op x))
    (be `(,op ,x ,y) (fmt-binary p op x y))
    (else            ("~w" .format e))))

(to (fmt-unary p op x)
  (may (unaries .get op)
    (be #no
      ("~w(~d)" .format op (fmt 0 x)))
    (be {unary prefix postfix}
      (hm (if prefix  (enclose p prefix  ("~w~d" .format op (fmt prefix x))))
          (if postfix (enclose p postfix ("~d~w" .format (fmt postfix x) op)))))))

(to (fmt-binary p op x y)
  (may (binaries .get op)
    (be #no
      ("~w(~d, ~d)" .format op (fmt 0 x) (fmt 0 y)))
    (be {binary left right}
      (enclose p left ("~d ~w ~d" .format (fmt left x) op (fmt right y))))))

(to (enclose outer inner string)
   (if (< inner outer)
       ("(~d)" .format string)
       string))

(let unaries (!map<-))
(let binaries (!map<-))

(to (def-prefix name p)  (unaries .set! name {unary p #no}))
(to (def-postfix name p) (unaries .set! name {unary #no p}))

(to (def-infix name p)   (binaries .set! name {binary p p.+}))

(def-prefix '- 10)                      ;XXX get the right precedences
(def-postfix '! 100)

(def-infix '+ 10)
(def-infix '- 10)
(def-infix '* 20)
(def-infix '/ 20)
(binaries .set! '^ {binary 30 30})   ; right-to-left associativity (is this correct?)

;; smoke test

(out .displayln (format-infix '(* (+ 1 2) (+ (* 3 4) (* 5 6)))))
