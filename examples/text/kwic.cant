;; Generate a "Key-Word In Context" index.
;; TODO:
;;   show line numbers?
;;   skip stopwords
;;   reread Parnas
;;     y'know, the rotated outputs he describes are probably more useful

(import (use 'binary-relations) collect)
(import (use 'parson) like)

;; From stdin to stdout.
(to (main _)
  (kwic in.read-lines))

;; Write a sorted keyword-in-context index.
(to (kwic lines)
  (each! show-group (sort (collect (gather contextify lines)))))

;; (contextify "leaves of grass")
;; -> '({~ "leaves" {~ "leaves of grass" (0 6)}}  ;; where (0 6) is the span of the first word
;;      {~ "of"     {~ "leaves of grass" (7 9)}}
;;      {~ "grass"  {~ "leaves of grass" (10 15)}})
(to (contextify line)
  (for each [(span (word-spans line))]
    (let word (line .from @span))
    (~ word.lowercase (~ line span))))

;; A crude notion of a word: a string of letters with an optional
;; apostrophized suffix. Yield the positions (start end) for each word.
(let word-spans
  (like "([:position :letter+ ('\\'' :letter+)? :position :hug] | :skip)*"))
;; TODO ugly: '\\''

;; Under a heading for `word`, show each of its occurrences.
(to (show-group (~ word occurrences))
  (out .say "~d:\n" word)
  (for each! [((~ line `(,start ,end)) (sort occurrences))]
    (out .say "  ~d**~d**~d\n"
         (line .from 0 start)
         (line .from start end)
         (line .from end))))
