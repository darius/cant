;; Generate a "Key-Word In Context" index.
;; TODO:
;;   show line numbers?
;;   skip stopwords
;;   reread Parnas

(import (use 'parson) like)

;; From stdin to stdout.
(to (main _)
  (kwic in.read-all.split-lines))

;; Write a sorted keyword-in-context index.
(to (kwic lines)
  (each! show-group (group (gather contextify lines))))

;; (contextify "leaves of grass")
;; -> '({~ "leaves" {~ "leaves of grass" (0 6)}}  ;; where (0 6) is the span of the first word
;;      {~ "of"     {~ "leaves of grass" (7 9)}}
;;      {~ "grass"  {~ "leaves of grass" (10 15)}})
(to (contextify line)
  (let spans (word-spans line))
  (for each (((~ i span) spans.items))
    (let word (line .slice @span))
    (~ word.lowercase (~ line span))))

;; A crude notion of a word: a string of letters with an optional
;; apostrophized suffix. Yield the positions (start end) for each word.
(let word-spans
  (like "([:position :letter+ ('\\'' :letter+)? :position :hug] | :skip)*"))
;; TODO ugly: '\\''

;; Given a list of (~ key value), return a list of (~ key all-values)
;; sorted by key.
(to (group items)
  (let map (!map<-))
  (for each! (((~ key value) items))
    ((map .get-set! key flexarray<-) .push! value))
  (for each ((key (sort map.keys)))
    (~ key ((map key) .values))))

;; Under a heading for `word`, show each of its occurrences.
(to (show-group (~ word occurrences))
  (out .say "~d:\n" word)
  (for each! (((~ line `(,start ,end)) (sort occurrences)))
    (out .say "  ~d<~d>~d\n"
         (line .slice 0 start)
         (line .slice start end)
         (line .slice end))))
