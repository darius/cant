;; Update what's shown on the screen.

(import (use 'ansi-terminal) 
  cursor-hide cursor-show home clear-to-right goto)
(import (use "console")
  logs)

;; The screen size.
(let (~ rows cols) (~ 18 80))          ;TODO query for it or something
(let console-rows 5) ; #rows extra, reserved for the debugging console

;; An array of texts, one per screen row.
(to (display-buffer<-)
  (-> '("") (~ .repeat rows) ~.array))

;; Return text representing rune at column x.
(to (render-rune rune x)  ;TODO make this a rune method?
  (if rune.printable?
      rune.text
      ("\\x~02x" .format rune.code)))

(to (module powers)
  (import powers out)

  ;; Track what's on the screen, to avoid redundant writes.
  (let showing (display-buffer<-))

  ;; Compute how to show `flextext` from coordinate `start` with cursor at
  ;; `point`. Return an object that can say whether the cursor is visible
  ;; and can show the rendering.
  (to (render flextext start point)
    (let lines (display-buffer<-))
    (let point-x (box<- #no))
    (let point-y (box<- #no))
    (begin rendering ((p start) (x 0) (y 0))
      (when (< y rows)
        (when (= p point)
          (point-x .^= x)
          (point-y .^= y))
        (let text (flextext .get p 1))
        (let pp p.+)
        (if (or (= text "") (= text "\n"))
            (rendering pp 0 y.+)  ;; TODO flexarray to text, i guess
            (begin appending ((glyphs (render-rune text.first x))
                              (x x)
                              (y y))
              (hm (if glyphs.none? (rendering pp x y))
                  (do (lines .set! y
                             (chain (lines y) glyphs.first.text))) ;XXX quadratic
                  (if (< x.+ cols) (appending glyphs.rest x.+ y))
                  (if (< y.+ rows) (appending glyphs.rest 0 y.+))
                  (else            'done))))))
    (make _
      (to ~.point-visible?  (yeah? point-y.^))
      ;; XXX doesn't mean 'is centered' any more:
      (to ~.point-centered? (and point-y.^ (<= point-y.^ (rows .quotient 2))))
      (to ~.show
        (out .display cursor-hide)
        (out .display home)
        (for each! (((~ i line) lines.items))
          (unless (= line (showing i))
            (out .display (goto 0 i))
            (out .display line)
            (out .display clear-to-right)
            (showing .set! i line)))
        ;; TODO: styling for the logs
        (out .display (goto 0 rows))
        (for each! ((message (logs.^ .from 0 console-rows)))
          (out .display (message .from 0 cols))
          (out .display clear-to-right)
          (out .display "\r\n"))
        (out .display (goto point-x.^ point-y.^))
        (out .display cursor-show))))

  (export
    cols rows
    render))
