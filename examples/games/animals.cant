;; Computer plays 20 questions, an old minicomputer game.
;; Adapted from http://www.ulisp.com/list?1LQH

(to (main _)
  (play "examples/games/animals.data")) ;TODO assumes we run from main Cant dir

(to (play filename)
  (let data (with-input-file read filename))
  (say "Think of an animal, and I'll try to guess it.\n\n")
  (let new-data (playing data))
  (unless (= new-data data)
    (with-output-file (~ .write new-data) filename)))

(to (playing choice-tree)
  (may choice-tree
    (be {choose question y n}
      (if (yes-answer? question)
          {choose question (playing y) n}
          {choose question y (playing n)}))
    (be (? text? animal)
      (hm (when (yes-answer? "Is it " animal "?")
            (say "Ho ho!\n")
            animal)
          (else
            (learn animal))))))

(to (learn mistake)
  (let new (ask "What were you thinking of?"))
  (let question
    (ask "Give me a yes/no question to distinguish " new " from " mistake ":"))
  (if (yes-answer? "What would the answer be for " new "?")
      {choose question new mistake}
      {choose question mistake new}))

(to (yes-answer? @prompt)
  (do loop []
    (may ((ask @prompt) .get 0)
      (be #\y #yes)
      (be #\n #no)
      (be #\q (os-exit 0))
      (else (say "Please answer y or n (or q to quit).\n")
            (loop)))))

(to (ask @prompt)
  (say @prompt " ")
  (may in.read-line
    (be (? zilch?) (os-exit 0))
    (be line line.trim)))

(to (say @texts)
  (each! ||(out .display it) texts))
