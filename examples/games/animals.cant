;; Computer plays 20 questions, an old minicomputer game.
;; Adapted from http://www.ulisp.com/list?1LQH

(to (main _)
  (play "examples/games/animals.data")) ;TODO assumes we run from main Cant dir

(to (play filename)
  (let data (with-input-file read filename))
  (let new-data (playing data))
  (unless (= new-data data)
    (with-output-file (~ .write new-data) filename)))

(to (playing choice-tree)
  (may choice-tree
    (be {choose question y n}
      (if (yes/no? question)
          {choose question (playing y) n}
          {choose question y (playing n)}))
    (be (? text? animal)
      (hm (when (yes/no? "Is it " animal "?")
            (say "Ho ho!\n")
            animal)
          (else
            (learn animal))))))

(to (learn mistake)
  (let new (ask "What were you thinking of?"))
  (let question
    (ask "Give me a yes/no question to distinguish " new " from " mistake ":"))
  (if (yes/no? "What would the answer be for " new "?")
      {choose question new mistake}
      {choose question mistake new}))

(to (yes/no? @prompt)
  (may ((ask @prompt) .trim)
    (be (? (~ .prefix? "y")) #yes)
    (be (? (~ .prefix? "n")) #no)
    (be (? (~ .prefix? "q")) (os-exit 0))
    (else (say "Please answer y or n (or q to quit).") (yes/no? @prompt))))

(to (ask @prompt)
  (say (chain @prompt) " ") stdin.read-line) ;TODO oughta be (say @prompt " ")

(to (say @texts)
  out.newline
  (each! (-> (out .display it)) texts))
