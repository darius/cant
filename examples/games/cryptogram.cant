;; A UI for cryptogram puzzles.
;; Ported from github.com/darius/sturm.
;; (Hit control-X to quit.)

(import ((use 'sturm) (export console))
  cbreak-mode get-key render
  cursor green red unstyled)
(import (use 'chaos)
  random-chaos<-)

(to (main args)
  (let cryptogram
    (may args.rest
      (be '()
        (encrypt (random-code<- (random-chaos<- system-randomness-source<-))
                 (run-fortune)))
      (be `(,text)
        text)
      (else
        (oops ("Usage: ~d [cryptogram]" .format (args 0))))))
  (for cbreak-mode []
    (puzzle cryptogram)))

(to (encrypt code text)
  (text-by (: (code .get it it)) text.lowercase))

(to (random-code<- chaos)
  (map<-items (zip alphabet (alphabet .alter (~ .shuffle! chaos)))))

(let alphabet (#\a .thru #\z))

(to (run-fortune)
  ;; TODO ensure fits in sturm's width
  (shell-run "exec fortune"))

(to (shell-run command)                 ;; TODO extract to a library
  (let `(,from-stdout ,to-stdin ,pid) (open-subprocess command))
  ;; TODO catch subprocess errors
  from-stdout.read-all)

(to (puzzle cryptogram)
  (let pad (crypto-scratchpad<- cryptogram))
  (begin playing []
    (render (pad .view #yes))
    (may (get-key)
      (be 'esc (render (pad .view #no)))
      (be key
        (may key
          (be 'home      pad.go-to-start)
          (be 'end       pad.go-to-end)
          (be 'left      (pad .shift-by -1))
          (be 'right     (pad .shift-by  1))
          (be 'up        (pad .shift-line -1))
          (be 'down      (pad .shift-line  1))
          (be 'shift-tab (pad .shift-to-space -1))
          (be #\tab      (pad .shift-to-space  1))
          (be 'backspace (pad .shift-by -1) (pad .jot #\space))
          (be 'del       (pad .jot #\space) (pad .shift-by 1))
          (be (-- (? rune?) (? ~.uppercase?))
            (pad .shift-to-code 1 key))
          (be (or #\space (when (alphabet .find? key)))
            (pad .jot key)
            (pad .shift-by 1))
          (else))
        (playing)))))

;; The puzzle state.
(to (crypto-scratchpad<- cryptogram)

  (let code (keep ~.letter? cryptogram.uppercase))
  (surely code.some?)
  (let decoder (!map-by (: #\space) code.nub))
  (let point (box<- 0))           ; Index in `code` of the cursor

  (let lines (each clean cryptogram.uppercase.split-lines))
  (let line-starts                ; Set of positions that start a line
    (~.range (amassing + 0 (for each [(line lines)]
                             (tally-by ~.letter? line)))))

  (to (shift-by offset)
    (point .^= (code .ity (+ point.^ offset))))

  (to (shift-till offset stop?)
    (shift-by offset)
    (unless (stop?)
      (shift-till offset stop?)))

  (make _

    (to (~ .jot letter)
      (decoder .set! (code point.^) letter))

    (to ~.go-to-start
      (point .^= 0))

    (to ~.go-to-end
      (point .^= code.count.-))

    (to (~ .shift-by offset)
      (shift-by offset))

    (to (~ .shift-line offset)
      (shift-till offset ($ (line-starts .maps? point.^))))

    (to (~ .shift-to-space offset)
      (when (decoder .find? #\space)
        (shift-till offset ($ (= #\space (decoder (code point.^)))))))

    (to (~ .shift-to-code offset letter)
      (when (code .find? letter)
        (shift-till offset ($ (= letter (code point.^))))))

    ;; Return a Sturm view of the decoding-in-progress.
    (to (~ .view show-cursor?)
      (let counts (hey (bag<- decoder.values) ; bag of decoded plaintext letters
                       (~ .delete! #\space)))
      (let clashes (~.range (for where [(n counts)] ; set of letters with >1 preimage
                              (< 1 n))))
      (let letters-left (for each [(rune alphabet)] ; display of letters available to try
                          (if (counts .maps? rune) #\space rune)))

      (let pos (box<- 0)) ; current index into `code`

      (let view (flexarray<-))
      (to (emit x) (view .push! x))

      (emit (green ["Free: " letters-left "\n"]))
      (for each! [(line lines)]
        (emit #\newline)
        ;; a line of the tentative plaintext:
        (for each! [(rune line)]
          (when (and show-cursor? rune.letter?)
            (when (= pos.^ point.^)
              (emit cursor))
            pos.+!)
          (emit (decoder .get rune rune)))
        (emit #\newline)
        ;; separator line:
        (for each! [(rune line)]
          (emit (if rune.letter? #\- #\space)))
        (emit #\newline)
        ;; line of ciphertext:
        (for each! [(rune line)]
          (let color (hm (if (clashes .maps? (decoder .get rune)) red)
                         (if (= rune (code point.^))              green)
                         (else                                    unstyled)))
          (emit (color rune)))
        (emit #\newline))

      view.values)))

;; Expand tabs; blank out other control runes.
(to (clean text)
  (let r (flexarray<-))
  (for each! [(rune text)]
    (hm (when (= rune #\tab)
          (begin padding []
            (r .push! #\space)
            (unless (r.count .even? 8)
              (padding))))
        (when (< rune #\space)
          (r .push! #\space))
        (else
          (r .push! rune))))
  r.values)

(export main)
