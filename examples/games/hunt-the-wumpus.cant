;; A simplified version of Gregory Yob's "Hunt The Wumpus".
;; TODO the full cave network; superbats?

(import (use 'chaos) random-chaos<-)

(let chaos (random-chaos<- system-randomness-source<-))


;; Start and end the game

(to (main _)
  (play))

(to (play)
  (let (list<- A B C D) (each cave<- '("A" "B" "C" "D")))
  (A .connect [B C D])
  (B .connect [C D A])
  (C .connect [D A B])
  (D .connect [A B C])
  (hunter .go A)
  (wumpus .go C)
  ((pit<-) .go D)
  (with-ejector (on (ejector)
                  (quitter .^= ejector)
                  (begin ()
                      (play-turn)
                    (loop)))))

(let quitter (box<-))
(to (quit) (quitter.^ .eject 'quit))

(to (bye message)
  (out .say "\n~d\n" message)
  (quit))

(to (die reason)
  (out .displayln reason)
  (bye "Ha ha ha - you lose!"))


;; Play a turn

(to (play-turn)
  (describe)
  (begin asking ()
    (may (ask "Shoot, Move, or Quit (S-M-Q)?")
      (be "S" (shoot))
      (be "M" (move))
      (be "Q" (quit))
      (else (asking)))))

(to (describe)
  (let here hunter.where)
  (out .display-lines here.beware)
  (out .say "You are in room ~d\n" here.name)
  (out .say "Tunnels lead to ~d\n" (" " .join (each ~.name here.neighbors))))

(to (move)
  (hunter .go (ask-where "Where to?")))

(to (shoot)
  (arrow .go (ask-where "Shoot down which tunnel?"))
  ;; If control returns here, the arrow missed. (We quit when it hits.)
  (arrow .go limbo)
  wumpus.wander)  ; An arrow that misses wakes up the wumpus.

;; Return an adjacent cave named by the user.
(to (ask-where prompt)
  (let candidates (map<-values ~.name hunter.where.neighbors))
  (or (candidates .get (ask prompt))
      (do (out .say "Not possible - ")
          (ask-where prompt))))

(to (ask question)
  (out .say "~d " question)
  (may in.read-line
    (be (? zilch?) (quit))
    (be answer     answer.trim.uppercase)))


;; Places

(to (cave<- name)
  (let neighbors (flexarray<-))
  (let contents (set<-))
  (make cave
    (to ~.name             name)

    (to ~.neighbors        neighbors.values)
    (to (~ .connect caves) (neighbors .extend! caves.values))

    (to ~.beware           (standardize (gather ~.warnings neighbors.values)))
    (to ~.warnings         (each ~.describe contents.keys))

    (to (~ .release thing)
      (contents .delete! thing))
    (to (~ .hold thing)
      (let others contents.keys)
      (contents .add! thing)
      (each! (~ .welcome thing) others))))

(to (standardize warnings)
  (sort warnings.nub))

(make limbo
  (to (~ .release thing))
  (to (~ .hold thing)))


;; Things

(to (thing-trait<-)
  (let where (box<- limbo))
  (make-trait thing-trait me
    (to ~.where where.^)
    (to (~ .go there)
      (where.^ .release me)
      (where .^= there)
      (there .hold me))
    (to (~ .welcome thing))  ; React to thing entering my cave.
    (to message
      (miranda-trait me message))))

(make wumpus {extend (thing-trait<-)}
  (to ~.describe "I smell a wumpus!")
  (to (~ .welcome thing)
    (may thing
      (be (= arrow)
        (out .say "AHA! You got the wumpus!\n") 
        (bye "Hee hee hee - the wumpus'll get you next time!!"))
      (be (= hunter)
        (out .say "... Oops! Bumped a wumpus!\n")
        wumpus.wander)
      (else)))
  (to ~.wander
    ;; Move to a random neighbor, or just circle back.
    (let here wumpus.where)
    (-> (link here here.neighbors)
        (~ .sample-value chaos)
        (:: (wumpus .go it)))))

(to (pit<-)
  (make pit {extend (thing-trait<-)}
    (to ~.describe "I feel a draft")
    (to (~ .welcome thing)
      (when (= thing hunter)
        (die "YYYYIIIIEEEE . . . Fell in pit")))))

(make hunter {extend (thing-trait<-)}
  (to (~ .welcome thing)
    (when (= thing wumpus)
      (die "Tsk tsk tsk - wumpus got you!"))))

(make arrow {extend (thing-trait<-)})
