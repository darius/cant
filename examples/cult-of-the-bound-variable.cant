;; Universal Machine from http://www.boundvariable.org/task.shtml
;; Ported from https://github.com/darius/superbench
;; ~/git/superbench/um/um.lua

(to (trace @args)
  (out .say @args))

(let mask32 (- (2 .** 32) 1))

(to (run program sink source)
  (let mem (flexarray<- program))
  (let free-list (flexarray<-))
  (let reg (array<-count 8 0))

  (do running [program (pc 0)]
    
    (to (next)
      (running program (pc .u+ 1)))

    (let inst (program pc))
    (let opcode (inst .u>> 28))

    (may opcode
      (be 13
        (reg .set! (7 .and (inst .u>> 25))
             (inst .and 0x1FFFFFF))
        (next))
      (else
        (let a (7 .and (inst .u>> 6)))
        (let b (7 .and (inst .u>> 3)))
        (let c (7 .and inst))
        (may opcode
          (be 0
            (unless (= (reg c) 0)
              (reg .set! a (reg b)))
            (next))
          (be 1
            (reg .set! a ((mem (reg b))
                          (reg c)))
            (next))
          (be 2
            ((mem (reg a)) .set! (reg b) (reg c))
            (next))
          (be 3
            (reg .set! a ((reg b) .u+ (reg c)))
            (next))
          (be 4
            (reg .set! a ((reg b) .u* (reg c)))
            (next))
          (be 5
            (reg .set! a ((reg b) .u/ (reg c)))
            (next))
          (be 6
            ;; TODO these mask32 .and's shouldn't be needed with a proper `word32` type
            (reg .set! a (mask32 .and (((reg b) .and (reg c)) .not)))
            (next))
          (be 7
            "Successful exit")
          (be 8
            (let chunk (array<-count (reg c) 0))
            (reg .set! b
                 (hm (when free-list.none?
                       (mem .push! chunk))
                     (else
                       (let i free-list.pop!)
                       (mem .set! i chunk)
                       i)))
            (next))
          (be 9
            (mem .set! (reg c) #no)
            (free-list .push! (reg c))
            (next))
          (be 10
;;            (surely (<= 0 (reg c) 255))
            ;; We don't use (sink .write-u8 (reg c)) because sink might not be a binary sink:
            (sink .display (rune<- (reg c)))
            (next))
          (be 11
            (let s source.read-rune)
;;            (surely (or (zilch? s) (<= 0 s.code 255)))
            (reg .set! c
                 (if (zilch? s) mask32 s.code))
            (next))
          (be 12
            (hm (when (= (reg b) 0)
                  (running program (reg c)))
                (else
                  (let new-program (~.copy (mem (reg b))))
                  (mem .set! 0 new-program)
                  (running new-program (reg c)))))
          (else (oops "Bad opcode" opcode)))))))

(to (read-program source)
  (let program (flexarray<-))
  (do reading []
    (let b3 source.read-u8)
    (unless (zilch? b3)
      (let b2 source.read-u8)
      (let b1 source.read-u8)
      (let b0 source.read-u8)
      ;; TODO: a syntax for int-guard coercion instead?
      (program .push! (u32<-bytes b3 b2 b1 b0))
      (reading)))
  program)

(to (u32<-bytes b3 b2 b1 b0)
  (append-byte (append-byte (append-byte b3 b2) b1) b0))

(to (append-byte u byte)
  (byte .u+ (u .u<< 8)))

;; TODO put something like this in stdlib
(to (with-binary-input-file fn filename)
  (with-closing fn (open-binary-input-file filename)))

(to (with-binary-output-file fn filename)
  (with-closing fn (open-binary-output-file filename)))

(to (main `(,_ ,filename))
  (let program (with-binary-input-file read-program filename))
  (run program out in))
