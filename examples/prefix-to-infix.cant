;; Format an infix expression into a text with minimal parentheses.

;; Glossary:
;; p: Precedence level. Higher-precedence operators bind more tightly.
;; e: Expression in s-expr form.

(to (format-infix e)
  (fmt 0 e))

(to (fmt p e)
  (may e
    (be `(,op ,@args)
      (surely (symbol? op) "Weird operator" e)
      (if (and (associative? op) (not= args.count 2))
          (fmt p (amass1 (on (x y) `(,op ,x ,y)) args))
          (may args
            (be `(,x)    (fmt-unary p op x))
            (be `(,x ,y) (fmt-binary p op x y)))))
    (else
      ("~w" .format e))))

(to (associative? op)
  (for mayhap (({binary _ _ assoc} (binaries .get op)))
    (= assoc 'associative)))

(to (fmt-unary p op x)
  (may (unaries .get op)
    (be #no          ("~w(~d)" .format op (fmt 0 x)))
    (be {prefix pp}  (enclose p pp ("~w~d" .format op (fmt pp x))))
    (be {postfix pp} (enclose p pp ("~d~w" .format (fmt pp x) op)))))

(to (fmt-binary p op x y)
  (may (binaries .get op)
    (be #no
      ("~w(~d, ~d)" .format op (fmt 0 x) (fmt 0 y)))
    (be {binary left right _}
      (enclose p left ("~d ~w ~d" .format (fmt left x) op (fmt right y))))))

(to (enclose outer inner text)
   (if (<= outer inner)
       text
       ("(~d)" .format text)))

(let unaries (!map<-))
(let binaries (!map<-))

(to (def-prefix name p)  (unaries .set! name {prefix p}))
(to (def-postfix name p) (unaries .set! name {postfix p}))

(to (def-infix name left-p @(optional associativity))
  (let assoc (or associativity 'left-to-right))
  (let right-p (may assoc
                 (be 'left-to-right left-p.+)
                 (be 'right-to-left left-p)
                 (be 'associative   left-p.+)))
  (binaries .set! name {binary left-p right-p assoc}))

(def-prefix '- 99)
(def-postfix '! 100)

(def-infix '+ 10 'associative)
(def-infix '- 10)
(def-infix '* 20 'associative)
(def-infix '/ 20)
(def-infix '^ 30 'right-to-left)

;; smoke test

(to (try e)
  (out .say "~36w -> ~w\n" e (format-infix e)))

(try '(+ 1 2))
(try '(* (+ 1 2) (+ (* 3 4) (* 5 6))))
(try '(* (+ (- 1) 2)
         (+ (* 3 (! 4))
            (* 5 6))))
(try '(! 4))
(try '(! (- 4)))
(try '(* 3 (! 4)))
(try '(* (! 4) 3))
(try '(* 3 1 4))
(try '(- (- (- 1 2) 3) 4))
(try '(- (- 1 2) (- 3 4)))
(try '(+ (- 1) 2 (- (* 3 4)) (- 5)))
(try '(- (^ 2 3)))
(try '(^ (- 2) 3))
