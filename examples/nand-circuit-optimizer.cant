;; Find a smallest combinational circuit in NANDs for a boolean function.
;; From https://github.com/darius/superbench
;; Ultimately based on Kragen Sitaker's in C, but vectorized and
;; not doing don't-cares.

(to (superopt truth-table max-gates)
  (let n-inputs (integer-log2 truth-table.count))
  (find-circuits (number<-text truth-table 2) n-inputs max-gates))

(to (integer-log2 n)
  (may (n .log 2)
    (be (? integer? power) power.exact)
    (else (oops "Not a power of 2" n))))

(to (find-circuits wanted n-inputs max-gates)
  (let inputs ((tabulate-inputs n-inputs) .array))
  (let mask (- (1 .<< (1 .<< n-inputs)) 1))

  (to (print-formula L-input R-input)
    (let v-name (chain ("ABCDEF" .from 0 n-inputs)
                       ("abcdefghijklmnopqrstuvwxyz" .from n-inputs)))
    (for each! [(i L-input.keys)]
      (let g (v-name (+ i n-inputs)))
      (let L (v-name (L-input i)))
      (let R (v-name (R-input i)))
      (out .say "~d = ~d ~~& ~d; " g L R))
    out.newline)

  (to (find-for-n n-gates)
    (out .say "Trying ~w gates...\n" n-gates)
    (let n-wires (+ n-inputs n-gates))
    (let L-input (array<-count n-gates #no))
    (let R-input (array<-count n-gates #no))
    (let found?  (box<- #no))
    (let wire    (chain inputs L-input))
    (begin sweeping [(gate 0)]
      (for each! [(L (0 .till (+ n-inputs gate)))]
        (let L-wire (wire L))
        (L-input .set! gate L)          ;XXX how about .:= or .<- or something?
        (for each! [(R (0 .thru L))]
          (let value (nand L-wire (wire R)))
          (R-input .set! gate R)
          (wire .set! (+ n-inputs gate) value)
          (hm (when (< gate.+ n-gates)
                (sweeping gate.+))
              (when (= wanted (mask .and value))
                (found? .^= #yes)
                (print-formula L-input R-input))
              (else)))))
    found?.^)

  (some find-for-n (1 .thru max-gates)))

(to (nand x y)
  ((x .and y) .not))     ;XXX why bitwise not here? only 1 bit, right?

(to (tabulate-inputs n)
  ;; An inputs array is an array of n bitvectors. It holds all
  ;; possible input patterns 'transposed': that is, the kth test case
  ;; can be formed out of bit #k of each the list's elements, one
  ;; element per circuit input. Transposed is the most useful form
  ;; because we can compute all test cases in parallel with bitwise
  ;; operators.
  (hm (if (= n 0) '())
      (else (let shift (1 .<< n.-))
            (link (- (1 .<< shift) 1)
                  (for each [(iv (tabulate-inputs n.-))]
                    (iv .or (iv .<< shift)))))))


(superopt "0110" 3)
(superopt "1011" 3)
;;(superopt "0110" 4)
;;(superopt "01100111" 6)
