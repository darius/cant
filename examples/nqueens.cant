;; The N-queens problem as a BDD.

(import (use 'bdd)
  bdd-and bdd-or satisfy-first
  lit0 lit1 build-choice)

(to (main args)
  (may args.rest
    (be `(,n) (queens (number<-text n)))
    (else     (out .say "Usage: ~d board-size\n" (args 0)))))

(to (queens n)
  (may (satisfy-first (queens-problem n) 1)
    (be #no (out .display "none\n"))
    (be env (print-board n env))))

(to (print-board n env)
  (for each! ((row (board<- n)))
    (for each! ((var row))
      (out .say "~d " (".Q" (env var))))
    out.newline))

(to (queens-problem n)
  (conjoin (for each ((r n.till))
             (disjoin (for each ((c n.till))
                        (place-queen n r c))))))

(to (conjoin nodes) (foldr1 bdd-and nodes))
(to (disjoin nodes) (foldr1 bdd-or  nodes))

(to (place-queen n r c)

  (let env (!map<-))

  (to (exclude rr cc)
    (when (and (<= 0 rr) (< rr n)
               (<= 0 cc) (< cc n))
      (env .set! (queen n rr cc) #no)))
  
  (for each! ((cc n.till))
    (exclude r cc))

  (for each! ((rr n.till))
    (exclude rr c))

  (for each! ((dd ((- n.-) .till n))) ; diagonals
    (exclude (+ r dd) (+ c dd))
    (exclude (+ r dd) (- c dd))
    (exclude (- r dd) (+ c dd))
    (exclude (- r dd) (- c dd)))

  (env .set! (queen n r c) #yes) ; (Overlaps and overrides the above no's)

  (match-env env))

;; Return a BDD that evaluates to 1 just when every variable in env
;; has its given value.
(to (match-env env)                 ;TODO move this to bdd.scm?
  (for foldl ((tree lit1)
              ((~ var value) (sort env.items {reverse})))
    (if value
        (build-choice var lit0 tree)
        (build-choice var tree lit0))))

;; The variable for a queen at (row r, column c) in an n*n board.
(to (queen n r c)
  (+ 2 (* n r) c))  ; Variables must be >= 2, to not clash with literals.

;; Return a 2-d array of distinct variables: each means there's a
;; queen at its position. Row/column numbers start from 0.
(to (board<- n)
  (for each ((r n.till))
    (interval<- (+ 2 (* n r))
                (+ 2 (* n r.+)))))

(export queens queens-problem print-board)
