;; An example from William Cook's essay on OOP vs. ADTs
;; http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf
;; Sets of integers, represented by an algebraic datatype.
;; We don't yet support abstract datatypes (need 'synergy') --
;; we could actually hack that up in terms of =, but it'd be
;; nicer with a primitive.

(let empty-set {empty})

(to (adjoin<- n s)
  (if (has? s n)
      s
      {extension n s}))

(to (merge<- s1 s2)
  (may s1
    (be {empty} s2)
    (else       {meld s1 s2})))

(to (empty? s)
  (may s
    (be {empty}         #yes)
    (be {extension _ _} #no)
    (be {meld s1 s2}    (and (empty? s1) (empty? s2)))))

(to (has? s n)
  (may s
    (be {empty}           #no)
    (be {extension n1 s1} (or (= n n1) (has? s1 n)))
    (be {meld s1 s2}      (or (has? s1 n) (has? s2 n)))))

;; Smoke test

(do []
  (let eg (adjoin<- 5 (adjoin<- 6 empty-set)))
  (out .print (has? eg 5))
  (out .print (has? eg 6))
  (out .print (has? eg 7)))
