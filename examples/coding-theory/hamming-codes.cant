;; Hamming codes
;; from Hamming *The art of doing science and engineering*

;; The simplest of these codes add parity checks to a message to
;; correct a single substitution error.
;; TODO The same principles can extend to detecting a double error.

(to (basic-hamming-code<- n-check-bits)
  (surely n-check-bits.positive?)

  (let n-encoded-bits (- (2 .** n-check-bits) 1))
  (let n-message-bits (- n-encoded-bits n-check-bits))
  (surely n-message-bits.positive?)
  
  (to (well-formed? bits)
    (every bit? bits))

  (let taps
    (~.array (transpose (for each ((place (0 .till (2 .** n-check-bits))))
                          (place .digits 2 n-check-bits)))))

  (to (parity message place)
    (-> (for each ((place-bit (taps place))
                   (message-bit message.values)) 
          (place-bit .and message-bit))
        sum (~ .modulo 2)))

  (make basic-hamming-code

    (to ~.n-message-bits n-message-bits)
    
    (to (~ .encode bits)
      (surely (well-formed? bits))
      (surely (= bits.count n-message-bits))
      (let m (~.array
              ;; TODO write this as a fold or something?
              (link 0 (begin inserting ((p 1) (rest bits))
                        (hm (if rest.none? '())
                            (if (power-of-2? p) (link 0 (inserting p.+ rest)))
                            (else (link rest.first (inserting p.+ rest.rest))))))))
      (for each! ((place n-check-bits.till))
        ;; TODO is this mutability safe? I should be very suspicious:
        (m .set! (1 .<< place) (parity m place)))
      m.values.rest)

    (to (~ .decode encoded-bits)
      (surely (well-formed? encoded-bits))
      (surely (= encoded-bits.count n-encoded-bits))
      (let m (~.array (link 0 encoded-bits)))
      (let encoded-n (count<-digits m.values 2))
      (let syndrome (for each ((place n-check-bits.till))
                      (parity m place)))
      (let correction (1 .<< (count<-digits syndrome 2)))
      (let corrected (encoded-n .xor correction)) ;; N.B. place 0 (meaning 'correct') is skipped below
      (for yeahs (((~ power bit) (-> (corrected .digits 2 n-encoded-bits.+) ~.items ~.rest)))
        (and (not (power-of-2? power))
             bit)))))

(to (power-of-2? n)
  (integer? (n .log 2)))

(to (bit? x)
  (and (count? x) (<= x 1)))

(to (count<-digits digits base)         ;N.B. little-endian. TODO add to stdlib?
  (for foldr ((digit digits) (total 0))
    (+ (* base total) digit)))

;; TODO number methods worth adding:
;; n .bit k
;; n .bitfield k length
;; also corresponding update methods? sigh.
;; how about just a method to convert a number to a virtual map (a bitarray), and vice versa?


;; Smoke test

(hide
  (let c (basic-hamming-code<- 3))

  (let m '(1 0 0 1))

  (let cm (c .encode m))
  (out .say "encode ~w -> ~w\n" m cm)

  (let dcm (c .decode cm))
  (out .say "decode -> ~w\n" dcm)
  (surely (= m dcm))

  (let corrupt-1 '(0 0 1 1 0 1 1)) ; Altered bit at position 6
  (out .say "corrupt:  ~w\n" corrupt-1)
  (out .say "decode -> ~w\n" (c .decode corrupt-1))
  (surely (= m (c .decode corrupt-1))))


;; More systematic

(to (test-exhaustively)
  (let c (basic-hamming-code<- 3))
  (let m-length c.n-message-bits)
  (let e-length (+ m-length 3))
  (for each! ((m (0 .till (1 .<< m-length))))   ;; TODO itertools-style generator for subsets?
    (let message (m .digits 2 m-length))

    (let cm (c .encode message))
    (out .say "encode ~w -> ~w\n" message cm)

    ;; Decode of encode should = message.
    (let dcm (c .decode cm))
    (out .say "decode -> ~w\n" dcm)
    (surely (= message dcm))

    ;; Should correct all 1-bit errors.
    (for each! ((place e-length.till))
      (let corrupt (for each (((~ b bit) cm.items))
                     (bit .xor ((= place b) .count))))
      (let dcc (c .decode corrupt))
      (surely (= dcc message)))

    ;; Should report all 2-bit errors (well, not the basic-hamming-code, those don't, so TODO)
    out.newline
    ))

(test-exhaustively)


;; TODO:
;; - run this file in the regular automated test
