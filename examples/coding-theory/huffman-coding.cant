;; Huffman coding

(import (use 'pairing-heap) priority-queues<-)
(import (priority-queues<- <=) pq<-list pq-insert pq-peek)

(to (huffman-code<- frequency-items)
  (code<-tree (build-tree frequency-items)))

(to (code<-tree tree)
  (make huffman-code
    (to ~.encoder
      (let map (map<-items (tabulate tree)))
      (on (symbols) (gather map symbols)))
    (to ~.decoder
      (on (bits) (decode tree bits)))
    (to ~.table
      (tabulate tree))
    (to (~ .show sink)
      ;; TODO it'd be nice if format-tables could help here
      (for each! [((~ symbol bits) (tabulate tree))]
        (sink .say "~d ~d\n" symbol (text-by "01" bits))))))

(to (build-tree frequency-items)
  (surely frequency-items.some?)
  (do loop [(pq (pq<-list (for each [((~ symbol frequency) frequency-items)]
                            (~ frequency {leaf symbol}))))]
    (may (pq-peek pq)
      (be {nonempty (~ f1 t1) pq1}
        (may (pq-peek pq1)
          (be {empty} t1)
          (be {nonempty (~ f2 t2) pq2}
            (loop (pq-insert pq2 (~ (+ f1 f2) {branch t1 t2})))))))))

(to (tabulate tree)
  (do listing [tree (path '()) (tail '())]
    (may tree
      (be {leaf symbol}      (link (~ symbol path) tail))
      (be {branch on-0 on-1} (listing on-0 `(,@path 0)
                                      (listing on-1 `(,@path 1)
                                               tail))))))

(to (decode root bits)
  (do stepping [(tree root) bits]
    (hm (if bits.none? '())
        (let {branch @subtrees} tree)
        (may (subtrees bits.first)
          (be {leaf symbol} (link symbol (stepping root bits.rest)))
          (be subtree       (stepping subtree bits.rest))))))

(export huffman-code<-)
