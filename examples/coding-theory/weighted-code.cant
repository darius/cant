;; Weighted codes
;; from Hamming *The art of doing science and engineering*, ch. 11, p. 79

;; These codes add one check digit to a message, to detect a single
;; transposition or substitution error. The check digit is based on a
;; weighted sum of the message digits, where the weights are [1..n],
;; modulo a prime modulus.

(import (use 'factoring) prime?)

(to (weighted-code<- modulus)
  (surely (prime? modulus))

  (to (well-formed? ns)
    (for every [(n ns)]
      (<= 0 n modulus.-)))
  
  (let normalize (~ .modulo modulus))

  (make weighted-code
    (to (~ .encode ns)
      (surely (well-formed? ns))
      (let check-digit (-> (link 0 ns) weighted-sum - normalize))
      (link check-digit ns))
    (to (~ .decode encoded-ns)
      (surely (well-formed? encoded-ns))
      (surely encoded-ns.some?)
      (let checksum (-> encoded-ns weighted-sum normalize))
      (and (= 0 checksum) encoded-ns.rest))))


;; A few different ways to compute the weighted sum, just to see how
;; to express them in Cant:

;; 1*ns[0] + 2*ns[1] + 3*ns[2] + ...
(to (weighted-sum ns)
  (sum-by * ns (1 .thru ns.count)))

;; Equivalent, without multiplying:
(to (weighted-sum-sans-* ns)
  (hm (if ns.none? 0) ; (This case never comes up in the calls from above, though.)
      (else (-> ns reverse running-sum running-sum ~.last))))

(to (running-sum numbers)
  (~.rest (amassing$ + 0 numbers)))

;; Equivalent, in a loop:
(to (weighted-sum-loop ns)
  (begin [(ns (reverse ns)) (total-1 0) (total-2 0)]
    (may ns
      (be '() total-2)
      (be `(,n ,@rest)
        (let n1 (+ n total-1))
        (loop rest n1 (+ n1 total-2))))))


;; Smoke test

(hide
  (let c (weighted-code<- 7))

  (let m '(3 1 4))

  (let cm (c .encode m))
  (out .say "encode ~w -> ~w\n" m cm)

  (let dcm (c .decode cm))
  (out .say "decode -> ~w\n" dcm)
  (surely (= m dcm))

  (let corrupt '(3 4 1 4)) ; Altered first message digit
  (out .say "decode ~w -> ~w\n" corrupt (c .decode corrupt))
  (surely (not (c .decode corrupt))))


;; Property tests

(import ((use 'squickcheck) (export out))
  all should
  a-list-of a-count)

;; TODO we lack a convenient way to generate this M for a test, and
;; then generate messages from a suitable alphabet for M
(let test-M 19)
(let test-code (weighted-code<- test-M))

;; - Are the different ways of computing the weighted sum equal?

(for all [(ns (a-list-of a-count))]
  (should = (weighted-sum ns) (weighted-sum-sans-* ns)))

(for all [(ns (a-list-of a-count))]
  (should = (weighted-sum ns) (weighted-sum-loop ns)))

;; - Round-trip encode/decode = identity
(for all [(message (a-list-of a-count))] ;TODO no way currently to ask for a number in range test-M.till
  (hm (unless (every (: (< it test-M)) message)
        (out .say "?")
        #yes)
      (else
        (should = message (-> message
                              (: (test-code .encode it))
                              (: (test-code .decode it)))))))

;; - Digits other than the check digit are encoded as-is
(for all [(message (a-list-of a-count))]
  (hm (unless (every (: (< it test-M)) message)
        (out .say "?")
        #yes)
      (else
        (let encoded (test-code .encode message))
        (should = message encoded.rest))))

;; - Detect error: alter single symbol
(for all [(message (a-list-of a-count)) (i a-count)]
  (let length message.count)
  (hm (unless (and (every (: (< it test-M)) message)
                   (<= i length))
        (out .say "?")
        #yes)
      (else
        (let encoded (test-code .encode message))
        (let altered (encoded .alter (~ .update i (: (it.+ .modulo test-M)))))
        (let decoded (test-code .decode altered))
        (should not decoded))))

;; - Detect error: swap nonequal symbols at non-modulus distance
(for all [(message (a-list-of a-count)) (i a-count) (j a-count)]
  (let length message.count)
  (hm (unless (and (every (: (< it test-M)) message)
                   (<= i length) (<= j length) (not= i j))
        (out .say "?")
        #yes)
      (else
        (let encoded (test-code .encode message))
        (or (= (encoded i) (encoded j))
            (test-M .even? (- i j))
            (do (let altered (encoded .alter (~ .swap! i j)))
                (let decoded (test-code .decode altered))
                (should not decoded))))))


;; TODO:
;; - run this file in the regular automated test
