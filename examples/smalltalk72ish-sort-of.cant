;; A (very slightly) Smalltalk-72-like open interpreter.
;; I think the key thing still to do is this:
;; In an expression like (1 + (t length)) I have to parenthesize
;; the (t length), where Smalltalk-72 would have (1 + t length).
;; Here's how I think that's supposed to work:
;; The send-number procedure needs to call terp with the whole
;; (t length) remainder. (Same change for the $ primitive.)
;; I may be confused about the rest here:
;; The object bound to t looks for a message in "... length",
;; and eats it if it finds it, but if it doesn't find a message
;; it understands, it leaves the tail alone and returns itself.
;; So:
;; 1. Don't oops if you see no message you understand.
;;    (Expect debugging troubles from this.)
;; 2. Make the message frames mutable?
;;    *Probably* easier to implement that way.


;; Example programs in the language:

(to (main _)
  (out .print (a0))
  (out .print (a1))
  (out .print (a2))

  (out .print (b0))
  (out .print (b1))

  (out .print (c0))
  (out .print (c1))

  (out .print (d0))
  (out .print (d1))
  (out .print (d2))

  (out .print (t4))

  (out .print (e0))
  (out .print (e1))
  (out .print (e2))
)


(to (a0) (run '(#yes >> 42 137)))
(to (a1) (run '(#no >> 42 137)))
(to (a2) (run '(2 + 3)))

(to (b0) (run '((: $) 42)))
(to (b1) (run '((: ($)) 42)))

(to (c0) (run '((: 5 + $) 67)))
(to (c1) (run '((: $ + $) 5 67)))

(to (d0) (run '((: % length) length)))
(to (d1) (run '((: % length >> 1 % not-length >> 2) not-length)))
(to (d2) (run '((: % length >> 0) length)))

(to (t4) (run '((: $ length) (: % length >> 42))))

(let eg-empty
  '(
    let empty (: % length >> 10)
    empty length + 1
    ))
(let eg-pair-0
  '(
    let empty (: % length >> 0)
    let pair
       (: let t $
          : % length >> (1 + (t length)))
    (pair empty) length
    ))
;; Here's the only 'real' example:
;; Define constructors equivalent to Lisp's NIL and CONS,
;; plus CAR, CDR, LENGTH methods. (Actually HD and TL.)
(let eg-pair-1
  '(
    let empty (: % length >> 10)
    let pair
       (: let h $
          let t $
          : % hd     >> h
            % tl     >> t
            % length >> (t length + 1))
    (pair 1 (pair 2 empty)) length
    ))

(to (e0) (run eg-empty))
(to (e1) (run eg-pair-0))
(to (e2) (run eg-pair-1))


;; OK, now to implement it.

(to (run e)
  (terp e '() '(halt)))

(to (trace x) 'ok)

(to (terp e r k)
  (trace `(terp ,e ,r ,k))
  (may e
    (be '$                             (prim-$ k))
    (be (? symbol?)                    (return k (lookup r e)))
    (be `(: ,@rest)                    (return k (make-definition rest r)))
    (be `(% ,pattern ,@rest)           (terp-% pattern (nest rest r k)))
    (be `(let ,variable ,val-e ,@rest) (terp val-e r `(let ,variable ,rest ,r ,k)))
    (be `(,first ,@rest)               (terp first r (nest rest r k)))
    (be '()                            (oops "empty expression"))
    (else                              (return k e))))

(to (nest es r k)
  (if es.none? k `(nest ,es ,r ,k)))

(to (make-message e r k)
  ;; XXX null message probably should be kept instead
  ;; e.g. so you'd get an oops on too many $'s
  (if (= '() e) k `(message ,e ,r ,k)))

(to (return k value)
  (may k
    (be `(nest ,@_)
      (send value k))
    (be `(message ,@_) ;XXX I don't know what I'm doing. This clause wasn't in the Scheme version.
      (send value k))
    (be `(let ,variable ,rest ,r2 ,k2)
      (terp rest `((,variable ,value) ,@r2) k2))
    (be `(number-+ ,self ,k2)
      (return k2 (+ self value)))
    (be '(halt)
      value)))

(to (send object kk)
  (let k (to-message kk))
  (trace `(send ,object ,k))
  (may object
    (be (? number?) (send-number object k))
    (be (? bool?)   (send-bool object k))
    (be `(,tag ,e ,r)
      (surely (= tag tag-definition))
      (terp e r k))))

(to (to-message k)
  (may k
    (be `(nest ,@rest) `(message ,@rest))
    (be `(message ,@_) k)))                   ;I guess?

(to (send-number self k)
  (may k
    (be `(message ,e2 ,r2 ,k2)
      (may e2
        (be `(+ ,e3 ,@rest)
          (terp e3 r2
                `(number-+ ,self ,(nest rest r2 k2))))))))

(to (send-bool self k)
  (may k
    (be `(message ,e2 ,r2 ,k2)
      (may e2
        (be `(>> ,then ,@rest) (terp (if self then rest) r2 k2))))))

  

(to (prim-$ k)
  (extract-message k (on (replace `(,e ,@es) r2 k2)
                       (terp e r2
                             (replace (make-message es r2 k2))))))

(to (terp-% pattern k)
  (trace `(terp-% (pattern: ,pattern) (k: ,k)))
  (extract-message k (on (replace e2 r2 k2)
                       (if (= pattern e2.first)
                           (return (replace (make-message e2.rest r2 k2)) #yes)
                           (return k #no)))))

(to (extract-message k take-message)
  (begin walking (k (replace itself))
    (may k
      (be `(message ,e2 ,r2 ,k2)
        (take-message replace e2 r2 k2))
      (else (walking k.last (on (k-prime)
                              (chain k.but-last `(,k-prime))))))))

;; N.B. that'd be easier if we kept the k in the *first* slot


(to (make-definition e r)
  `(,tag-definition ,e ,r))

(make tag-definition)

(to (lookup r name)
  (let `(,_ ,value) (assoc name r))
  value)

(export main)
