;; OK, let's get an idea what search-cant-code should look like,
;; from an actual application: finding instances of the pattern syntax
;; I'm about to outlaw. I.e., patterns like (a b) instead of `(,a ,b).

(import (use 'cant-source-walker)
  expr-subparts patt-subparts macroexpand-outer-patt)

(import (use 'pretty-print) pp<-)
(let pp (pp<- (export out)))

(to (main `(,_ ,@filenames))
  (each! report-badness filenames))

(to (report-badness filename)
;;  (out .say "Checking ~d...\n" filename)
  (may (those bad-expr? (with-input-file read-all filename))
    (be '() 'ok)
    (be top-level-bad-exprs
      (out .say "In ~d these top-level expressions harbor badness:\n" filename)
      (each! pp top-level-bad-exprs)
      out.newline)))

(to (bad-expr? expr)
  (bad-part? (expr-subparts expr)))

(to (bad-part? `(,subexprs ,subpatts))
  (or (some bad-expr? subexprs)
      (some bad-patt? subpatts)))

(to (bad-patt? patt)
  (may (let p (macroexpand-outer-patt patt))
    (be `(,s ,@_)
      (if (not ('(~ list<- link quote and view @ quasiquote) .find? s))
          (do (out .say "This subpattern is bad: ~w\n" patt)
              #yes)
          (bad-part? (patt-subparts p))))
    (else (bad-part? (patt-subparts p)))))

(export main bad-expr? bad-patt?)
