;; Huffman coding

(import (use 'pairing-heap) priority-queues<-)
(import (priority-queues<- <=) pq<-list pq-insert pq-peek)

(to (build-tree freqs)
  (surely freqs.some?)
  (begin ((pq (pq<-list (for each (((~ symbol frequency) freqs))
                          (~ frequency {leaf symbol})))))
    (may (pq-peek pq)
      (be {nonempty (~ f1 t1) pq1}
        (may (pq-peek pq1)
          (be {empty} t1)
          (be {nonempty (~ f2 t2) pq2}
            (loop (pq-insert pq2 (~ (+ f1 f2) {branch t1 t2})))))))))

(to (show-tree sink tree)
  (for each! (((~ symbol bits) (tabulate tree)))
    (sink .say "~d ~d\n" symbol (text<-list (each "01" bits)))))

(to (tabulate tree)
  (begin ((tree tree) (path '()) (tail '()))
    (may tree
      (be {leaf symbol}      (link (~ symbol path) tail))
      (be {branch on-0 on-1} (loop on-0 `(,@path 0)
                                   (loop on-1 `(,@path 1)
                                         tail))))))

(to (encoder<- tree)
  (map<-items (tabulate tree)))

(to (encode encoder symbols)
  (gather encoder symbols))

(to (decode root bits)
  (begin stepping ((tree root) (bits bits))
    (hm (if bits.none? '())
        (do (let {branch @subtrees} tree))
        (may (subtrees bits.first)
          (be {leaf symbol} (link symbol (stepping root bits.rest)))
          (be subtree       (stepping subtree bits.rest))))))

(export build-tree show-tree encoder<- encode decode)
