;; Huffman coding

(import (use 'pairing-heap) priority-queues<-)

(import (priority-queues<- <=) pq<-list pq-insert pq-peek)

(to (build-tree freqs)
  (surely freqs.some?)
  (begin ((pq (pq<-list (for each (((~ symbol frequency) freqs))
                          (~ frequency {leaf symbol})))))
    (may (pq-peek pq)
      (be {nonempty (~ f1 t1) pq1}
        (may (pq-peek pq1)
          (be {empty} t1)
          (be {nonempty (~ f2 t2) pq2}
            (loop (pq-insert pq2 (~ (+ f1 f2) {branch t1 t2})))))))))

(to (walk tree visit)
  (begin walking ((path '()) (tree tree))
    (may tree
      (be {leaf symbol}
        (visit symbol (reverse path)))
      (be {branch on-0 on-1}
        (walking `(0 ,@path) on-0)
        (walking `(1 ,@path) on-1)))))

(to (show-tree tree)
  (walk tree (on (symbol encoding)
               (out .say "~d ~d\n" symbol (text<-list (each "01" encoding))))))

(to (encoder<- tree)
  (hey (!map<-)
       (-> (walk tree (method<- it '.set!)))))

(to (encode encoder symbols)
  (gather encoder symbols))

(to (decode root bits)
  (begin stepping ((tree root) (bits bits))
    (hm (if bits.none? '())
        (do (let {branch @subtrees} tree))
        (may (subtrees bits.first)
          (be {leaf symbol} (link symbol (stepping root bits.rest)))
          (be subtree       (stepping subtree bits.rest))))))

(export build-tree show-tree encoder<- encode decode)
