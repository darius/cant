;; Sieve of Eratosthenes benchmark.

(let SIZE 8191)  ; (original defined SIZE as inclusive upper bound)

(let flags (array<-count SIZE #no))      

(to (main _)
  (out .say "10 iterations\n")
  (let count (box<- 0))
  (for each! [(_ (10 .till))]
    (count .^= 0)
    (for each! [(i SIZE.till)]     ;TODO .fill! method
      (flags .set! i #yes))
    (for each! [(i SIZE.till)]
      (when (flags i)
        (let prime (+ i i 3))
        (for each! [(k ((+ i prime) .till SIZE prime))]
          (flags .set! k #no))
        count.+!)))
  (out .say "~w primes\n" count.^))
