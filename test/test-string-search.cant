(import (use 'string-search)
  string-matcher<- string-match/brute)

(to (check-both pat cases)
  (check (-> (string-match/brute pat it)) cases)
  (check (string-matcher<- pat) cases))
  
(to (check match cases)
;;  (out .say "checking ~w\n" match)
  (for each! (((~ expected dat) cases))
    (let result (match dat))
    (surely (= expected result) "Bad match" match dat)))

(check-both "" '({~ 0 ""} {~ 0 "abc"}))
(check-both "X" '({~ #no ""}
                  {~ 0 "X"}
                  {~ 1 "aXbc"}
                  {~ 1 "aXbcX"}
                  {~ 4 "a-bcX"}))
(check-both "XX" '({~ #no ""}
                   {~ #no "X"}
                   {~ #no "aXbc"}
                   {~ 0 "XX"}
                   {~ 1 "aXX"}))
;; Boy, this is boring.

(import ((use 'squickcheck) (export out))
  a-list-of
  all should)

;; A string from a small alphabet, to encourage overlap of patterns.
(to (a-babble g)
  (string<-list ((a-list-of a-letter) g)))

(to (a-letter g)
  (g .range #\a #\c))

(for all ((pat a-babble))
  (should = 0 ((string-matcher<- pat) pat)))

(to (no-match-through? pat dat k)
  (not (for some ((i (0 .to k)))
         (= pat (dat .slice 0 i)))))

(for all ((pat a-babble) (dat a-babble))
  (may (string-match/brute pat dat)
    (be #no (should no-match-through? pat dat (- dat.count pat.count)))
    (be i (and (should no-match-through? pat dat i.-) ;TODO rethink this `should` function
               (should = pat (dat .slice i (+ i pat.count)))))))

;; TODO some string method for (= pat (dat .slice i (+ i pat.count)))

(for all ((pat a-babble) (dat a-babble))
  (let i (string-match/brute pat dat))
  (should = i ((string-matcher<- pat) dat)))
