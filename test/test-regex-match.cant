(import (use 'regex-match) regex-match regex-parse)

(to (test regex should-match should-not)
  (let r (regex-parse regex))
  (out .say "~d\n~d\n" regex (text-by (:: "-") regex))
  (for each! [(text should-match)]
    (test-1 r text #yes))
  (for each! [(text should-not)]
    (test-1 r text #no))
  out.newline)

(to (test-1 parsed text should?)
  (let match? (regex-match parsed text))
  (out .say "~4d ~d ~w\n"
            (if (= match? should?) "" "FAIL")
            (if match? "y" "n")
            text))

(out .print (regex-parse "."))

(test "."        '("a")         '("" "ab"))
(test "X"        '("X")         '("hey"))
(test "XY"       '("XY")        '("hey" "X" "XYZ"))
(test "X|Y"      '("X" "Y")     '("hey" "Z"))
(test "X*"       '("" "X" "XX") '("hey"))
(test "a(b|c)*d" '("ad" "abcd") '("ab" "B"))
(test "a.*d"     '("ad" "abcd") '("ab" "B"))
(test "a[bc]*d"  '("ad" "abcd") '("ab" "B"))

; TODO more tests

(export test)
