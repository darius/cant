(import (use 'text-find)
  text-finder<-)

(to (check-both pat cases)
  (check (~ .find-slice pat) cases)
  (check (text-finder<- pat) cases))
  
(to (check match cases)
;;  (out .say "checking ~w\n" match)
  (for each! [((~ expected dat) cases)]
    (let result (match dat))
    (surely (= expected result) "Bad match" match dat)))

(check-both "" '({~ 0 ""} {~ 0 "abc"}))
(check-both "X" '({~ #no ""}
                  {~ 0 "X"}
                  {~ 1 "aXbc"}
                  {~ 1 "aXbcX"}
                  {~ 4 "a-bcX"}))
(check-both "XX" '({~ #no ""}
                   {~ #no "X"}
                   {~ #no "aXbc"}
                   {~ 0 "XX"}
                   {~ 1 "aXX"}))
;; Boy, this is boring.

(import ((use 'squickcheck) (export out))
  a-list-of
  all should)

;; A text from a small alphabet, to encourage overlap of patterns.
(to (a-babble g)
  (-> g (a-list-of a-letter) ~.text))

(to (a-letter g)
  (g .interval #\a #\c))

(for all [(pat a-babble)]
  (should = 0 ((text-finder<- pat) pat)))

(to (no-match-through? pat dat k)
  (not (for some [(i (0 .thru k))]
         (= pat (dat .from 0 i)))))

(for all [(pat a-babble) (dat a-babble)]
  (may (dat .find-slice pat)
    (be #no (should no-match-through? pat dat (- dat.count pat.count)))
    (be i (and (should no-match-through? pat dat i.-) ;TODO rethink this `should` function
               (should = pat (dat .from i (+ i pat.count)))))))

;; TODO some text method for (= pat (dat .from i (+ i pat.count)))

(for all [(pat a-babble) (dat a-babble)]
  (let i (dat .find-slice pat))
  (should = i ((text-finder<- pat) dat)))
